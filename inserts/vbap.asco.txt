/*
VBAP created by Ville Pukki
This version ported to AntesCollider by José Miguel Fernandez from SuperCollider version by Scott Wilson
IRCAM / Sorbonne Université, Paris

Copyright

This software is being provided to you, the licensee, by Ville Pulkki,
under the following license. By obtaining, using and/or copying this
software, you agree that you have read, understood, and will comply
with these terms and conditions: Permission to use, copy, modify and
distribute, including the right to grant others rights to distribute
at any tier, this software and its documentation for any purpose and
without fee or royalty is hereby granted, provided that you agree to
comply with the following copyright notice and statements, including
the disclaimer, and that the same appear on ALL copies of the software
and documentation, including modifications that you make for internal
use or for distribution:


 Written by Ville Pulkki 1999
 Helsinki University of Technology
 and
 Unversity of California at Berkeley

*/

@global $vbap_buf_id @persistent
$vbap_buf_id := 0

@obj_def VBAPSpeakerArray($dim, $directions)
{
	@local $maxNumSpeakers := 55, $minSideLength := 0.01, $speakers := [], $numSpeakers, $sets, $directions_list := [], $vbapBuf, $buf_name

	@init 
	{
		$buf_name := "vbap_buf_id"+$vbap_buf_id

		if($dim == 2)
		{
			forall $azi in $directions
			{
				$directions_list.push_back([$azi, 0])
			}
			$directions := $directions_list
		}

		$numSpeakers := $directions.size()


		forall $dir in $directions
		{
			// $speakers.push_back(obj::VBAPSpeaker($dir[0], $dir[1]))
			$speakers.push_back(@VBAPSpeaker(azi = $dir[0], ele = $dir[1]))
			// print (""+$speakers)
		}
		$THISOBJ.anglesToCartesian()

	}

// print (""+@VBAPSpeaker(10, 20))
	@fun_def anglesToCartesian()
	{
		forall $spkr in $speakers
		{
			@local $result
			$result := @anglesToCartesian_compiled($spkr.azi(), $spkr.ele())
			@set_x($spkr, $result[0])
			@set_y($spkr, $result[1])
			@set_z($spkr, $result[2])
		}
	}

	@fun_def getSetsAndMatrices() 
	{
		/* calculate and print out chosen loudspeaker sets and corresponding  matrices */

		if($dim == 3) 
		{
			// print 3D
			$THISOBJ.choose_ls_triplets()
			return ($THISOBJ.calculate_3x3_matrixes())
			
		}
		else
		{
			if($dim == 2)
			{
				// print 2D
				return $THISOBJ.choose_ls_tuplets()
			}
			else
			{
				print "Error in loudspeaker direction data"
				return <undef>
			}

		}
	}

	@fun_def loadToBuffer($server) 
	{
		// ::loadcollection($server_name, $buf_name, $tab_collection) 
		::loadcollection($server, $buf_name, $THISOBJ.getSetsAndMatrices())
		// print getSetsAndMatrices (""+$THISOBJ.getSetsAndMatrices())
	}

	@fun_def vbapBuf() 
	{
		$vbapBuf := $buff_map("server1")($buf_name)
		return $vbapBuf
	}

	@fun_def numSpeakers() 
	{
		return $numSpeakers
	}
	     /* Selects the loudspeaker triplets, and
      calculates the inversion matrices for each selected triplet.
     A line (connection) is drawn between each loudspeaker. The lines
     denote the sides of the triangles. The triangles should not be
     intersecting. All crossing connections are searched and the
     longer connection is erased. This yields non-intesecting triangles,
     which can be used in panning.
     See theory in paper Pulkki, V. Lokki, T. "Creating Auditory Displays
     with Multiple Loudspeakers Using VBAP: A Case Study with
     DIVA Project" in International Conference on
     Auditory Displays -98.*/

	@fun_def choose_ls_triplets()
	{
		@local $vb1, $vb2, $tmp_vec, $i1, $j1, $k1, $m, $li, $table_size, $connections, $angles, $sorted_angles, $distance_table, $distance_table_i, $distance_table_j, $distance, $index := 0
		// instances of VBAPSpeaker
		// init vars defined above
		$connections := [[<undef> | $x in $maxNumSpeakers] | $j in $maxNumSpeakers] 
		$angles := [$x | $x in $maxNumSpeakers]
		$sorted_angles := [$x | $x in $maxNumSpeakers]
		$distance_table := [<undef> | $x in (($maxNumSpeakers * ($maxNumSpeakers - 1)) / 2)]
		$distance_table_i := [<undef> | $x in (($maxNumSpeakers * ($maxNumSpeakers - 1)) / 2)]
		$distance_table_j := [<undef> | $x in (($maxNumSpeakers * ($maxNumSpeakers - 1)) / 2)]
		
		$sets := []
		
		forall $i in ($numSpeakers)
		{
			forall $j in (($numSpeakers) - ($i+1))
			{
				$j := $j+($i+1)

				forall $k in (($numSpeakers) - ($j+1))
				{
					$k := $k+($j+1)
					if($THISOBJ.vol_p_side_lgth($i,$j,$k) > $minSideLength)
					{
						$connections[$i][$j] := 1
						$connections[$j][$i] := 1
						$connections[$i][$k] := 1
						$connections[$k][$i] := 1
						$connections[$j][$k] := 1
						$connections[$k][$j] := 1
						// $sets.push_back(obj::VBAPSpeakerSet([$i,$j,$k]))
						$sets.push_back(@VBAPSpeakerSet([$i,$j,$k]))
					}
				}
			}
		}		
		/*calculate distancies between all lss and sorting them*/

		$table_size := (($numSpeakers - 1) * ($numSpeakers)) / 2

		forall $i in ($table_size -1)
		{
			$distance_table[$i] := 100000.0 
		}

		forall $i in $numSpeakers
		{
			forall $j in ($numSpeakers - ($i+1))
			{
				@local $k, $dec := -1, $inc := 0
				$j := $j+($i+1)

				if($connections[$i][$j] == 1)
				{
					@local $l := 0
					$distance := @abs(@vec_angle($speakers[$i],$speakers[$j]))
					$k := 0

					forall $f in ($table_size-1-$k)
					{
						if ($distance_table[$k] < $distance)
						{
							$k := $k+1
						}
						else
						{						
							$l := (($table_size - 1)+($k)) - $f
							$distance_table[$l] := $distance_table[$l-1]
							$distance_table_i[$l] := $distance_table_i[$l-1]
							$distance_table_j[$l] := $distance_table_j[$l-1]
						}

					}
					$distance_table[$k] := $distance
					$distance_table_i[$k] := $i
					$distance_table_j[$k] := $j
				}
				else
				{
					$table_size := $table_size - 1
				}
			}
		}

	   /*disconnecting connections which are crossing shorter ones,
	     starting from shortest one and removing all that cross it,
	     and proceeding to next shortest */

	   forall $i in $table_size
	   {
	   	@local $fst_ls, $sec_ls //, $local_index := 0
	   	// print i_  $i
	   	$fst_ls := $distance_table_i[$i]
			$sec_ls := $distance_table_j[$i]

			if($connections[$fst_ls][$sec_ls] == 1)
			{
				forall $j in $numSpeakers
				{
					forall $k in ($numSpeakers - ($j+1))
					{
						$k := $k+($j+1)
						if(($j != $fst_ls) && ($k != $sec_ls) && ($k != $fst_ls) && ($j != $sec_ls))
						{
							if($THISOBJ.lines_intersect($fst_ls, $sec_ls, $j,$k))
							{
								$connections[$j][$k] := 0
								$connections[$k][$j] := 0
							}
						}
					}
				}
			}
	   }

	  /* remove triangles which had crossing sides
	     with smaller triangles or include loudspeakers*/
		//"triplet_amount before stripping: %\n".postf(sets.size);
		// print sets_size_before ($sets.size())

		forall $set in $sets
		{
			$i1 := $set[0]
			$j1 := $set[1]
			$k1 := $set[2]

			if(($connections[$i1][$j1] == 0) || ($connections[$i1][$k1] == 0) || ($connections[$j1][$k1] == 0) || $THISOBJ.any_ls_inside_triplet($i1,$j1,$k1))
			{
				
				$sets.remove($index)
				$index -= 1
			}
			$index += 1
		}
		// print sets_size_after ($sets.size())
	}

////////////////

	@fun_def lines_intersect ($i, $j, $k, $l)
	{
	     /* checks if two lines intersect on 3D sphere
	       */
	   @local  $epsilon, $v1,  $v2,  $v3,  $neg_v3,  $angle,  $dist_ij, $dist_kl, $dist_iv3, $dist_jv3, $dist_inv3, $dist_jnv3,  $dist_kv3, $dist_lv3, $dist_knv3, $dist_lnv3

		$epsilon := 0.01 //1e-9
		$v1 := @unq_cross_prod($speakers[$i], $speakers[$j])
		$v2 := @unq_cross_prod($speakers[$k], $speakers[$l])
		$v3 := @unq_cross_prod($v1, $v2)

		// $neg_v3 := obj::VBAPSpeaker()
		$neg_v3 := @VBAPSpeaker()

		// $neg_v3.x(0.0 - $v3.$x)
		// $neg_v3.y(0.0 - $v3.$y)
		// $neg_v3.z(0.0 - $v3.$z)

		@set_x($neg_v3, 0.0 - $v3.x())
		@set_y($neg_v3, 0.0 - $v3.y())
		@set_z($neg_v3, 0.0 - $v3.z())
		

		$dist_ij := (@vec_angle($speakers[$i], $speakers[$j]))
		$dist_kl := (@vec_angle($speakers[$k], $speakers[$l]))
		$dist_iv3 := (@vec_angle($speakers[$i], $v3))
		$dist_jv3 := (@vec_angle($v3, $speakers[$j]))
		$dist_inv3 := (@vec_angle($speakers[$i], $neg_v3))
		$dist_jnv3 := (@vec_angle($neg_v3, $speakers[$j]))
		$dist_kv3 := (@vec_angle($speakers[$k], $v3))
		$dist_lv3 := (@vec_angle($v3, $speakers[$l]))
		$dist_knv3 := (@vec_angle($speakers[$k], $neg_v3))
		$dist_lnv3 := (@vec_angle($neg_v3, $speakers[$l]))

		// /* if one of loudspeakers is close to crossing point, don't do anything*/
		if((@abs($dist_iv3) <= $epsilon) || (@abs($dist_jv3) <= $epsilon) || (@abs($dist_kv3) <= $epsilon) || (@abs($dist_lv3) <= $epsilon) || (@abs($dist_inv3) <= $epsilon) || (@abs($dist_jnv3) <= $epsilon) || (@abs($dist_knv3) <= $epsilon) || (@abs($dist_lnv3) <= $epsilon))
		{
			return 0
		}
		else
		{
			// /* if crossing point is on line between both loudspeakers return 1 */
			if (((@abs($dist_ij - ($dist_iv3 + $dist_jv3)) <= $epsilon ) && (@abs($dist_kl - ($dist_kv3 + $dist_lv3))  <= $epsilon)) || ((@abs($dist_ij - ($dist_inv3 + $dist_jnv3)) <= $epsilon)  && (@abs($dist_kl - ($dist_knv3 + $dist_lnv3)) <= $epsilon )))
		   { 
		   	return 1
		   }
		   else
		   {
		   	return 0
		   }			
		}
	}

  /* calculate volume of the parallelepiped defined by the loudspeaker
     direction vectors and divide it with total length of the triangle sides.
     This is used when removing too narrow triangles. */
	@fun_def vol_p_side_lgth($i, $j, $k)
	{
		@local $volper, $lgth, $xprod

		$xprod := @unq_cross_prod($speakers[$i], $speakers[$j])
		$volper := @abs(@vec_prod($xprod, $speakers[$k]))
		$lgth := (@abs(@vec_angle($speakers[$i], $speakers[$j])) + @abs(@vec_angle($speakers[$i], $speakers[$k])) + @abs(@vec_angle($speakers[$j], $speakers[$k])))

		if($lgth > 0.00001)
		{ 
			return ($volper / $lgth)
		}
		else
		{ 
			return 0.0 
		}
	}

	/* vector cross product */
	// @fun_def unq_cross_prod($v1, $v2)
	// {
	// 	@local $length, $result

	// 	// $result := obj::VBAPSpeaker()
	// 	$result := @VBAPSpeaker()
		
	// 	// $result.x(($v1.$y * $v2.$z ) - ($v1.$z * $v2.$y))
	// 	// $result.y(($v1.$z * $v2.$x ) - ($v1.$x * $v2.$z))
	// 	// $result.z(($v1.$x * $v2.$y ) - ($v1.$y * $v2.$x))
	// 	@set_x($result, ($v1.y() * $v2.z()) - ($v1.z() * $v2.y()))
	// 	@set_y($result, ($v1.z() * $v2.x()) - ($v1.x() * $v2.z()))
	// 	@set_z($result, ($v1.x() * $v2.y()) - ($v1.y() * $v2.x()))
	// 	$length := @vec_length($result)
	// 	@set_x($result, $result.x() / $length)
	// 	@set_y($result, $result.y() / $length)
	// 	@set_z($result, $result.z() / $length)
	// 	// $result.x($result.$x / $length)
	// 	// $result.y($result.$y / $length)
	// 	// $result.z($result.$z / $length)
	// 	return $result
	// }

	// @fun_def vec_length($v1)
	// {
	// 	@local $res

	// 	$res := @sqrt(@abs($v1.x().pow(2)) + @abs($v1.y().pow(2)) + @abs($v1.z().pow(2)))

	// 	if ($res==0.) // Evite les division par 0
	// 	{
	// 		$res := 0.0000001
	// 	}
	// 	/* length of a vector */
	// 	return $res
	// }

	// @fun_def vec_prod($v1, $v2)
	// {
	// 	/* vector dot product */
	// 	return (($v1.x() * $v2.x()) + ($v1.y() * $v2.y()) + ($v1.z() * $v2.z()))
	// }

	// @fun_def vec_angle($v1, $v2)
	// {
	// 	@local $inner

	// 	$inner := (($v1.x() * $v2.x()) + ($v1.y() * $v2.y()) + ($v1.z() * $v2.z())) / ($THISOBJ.vec_length($v1) * $THISOBJ.vec_length($v2))

	// 	if($inner > 1.0) 
	// 	{$inner := 1.0}
	// 	if($inner < -1.0) 
	// 	{$inner := -1.0}
	// 	return @abs(@acos($inner))
	// }

	@fun_def any_ls_inside_triplet($a, $b, $c) // speakers, numSpeakers
	{
		/* returns true if there is loudspeaker(s) inside given ls triplet */
		@local $invdet, $lp1, $lp2, $lp3, $invmx, $tmp, $any_ls_inside, $this_inside

		$lp1 := $speakers[$a]
		$lp2 := $speakers[$b]
		$lp3 := $speakers[$c]

		$invmx := [0 | $x in 9] 

		/* matrix inversion */
		$invdet := 1.0 / ($lp1.x() * (($lp2.y() * $lp3.z()) - ($lp2.z() * $lp3.y()))- ($lp1.y() * (($lp2.x() * $lp3.z()) - ($lp2.z() * $lp3.x()))) + ($lp1.z() * (($lp2.x() * $lp3.y()) - ($lp2.y() * $lp3.x()))))
		
		$invmx[0] := (($lp2.y() * $lp3.z()) - ($lp2.z() * $lp3.y())) * $invdet
		$invmx[3] := (($lp1.y() * $lp3.z()) - ($lp1.z() * $lp3.y())) * $invdet.neg_compiled()
		$invmx[6] := (($lp1.y() * $lp2.z()) - ($lp1.z() * $lp2.y())) * $invdet
		$invmx[1] := (($lp2.x() * $lp3.z()) - ($lp2.z() * $lp3.x())) * $invdet.neg_compiled()
		$invmx[4] := (($lp1.x() * $lp3.z()) - ($lp1.z() * $lp3.x())) * $invdet
		$invmx[7] := (($lp1.x() * $lp2.z()) - ($lp1.z() * $lp2.x())) * $invdet.neg_compiled()
		$invmx[2] := (($lp2.x() * $lp3.y()) - ($lp2.y() * $lp3.x())) * $invdet
		$invmx[5] := (($lp1.x() * $lp3.y()) - ($lp1.y() * $lp3.x())) * $invdet.neg_compiled()
		$invmx[8] := (($lp1.x() * $lp2.y()) - ($lp1.y() * $lp2.x())) * $invdet

		$any_ls_inside := false

		forall $i in $numSpeakers
		{
			if(($i != $a) && ($i != $b) && ($i != $c))
			{
				$this_inside := 1
				forall $j in 3
				{
					$tmp := $speakers[$i].x() * $invmx[0 + ($j*3)]
					$tmp := $speakers[$i].y() * $invmx[1 + ($j*3)] + $tmp
					$tmp := $speakers[$i].z() * $invmx[2 + ($j*3)] + $tmp
					if($tmp < -0.001) 
					{
						$this_inside := 0
					}					
				}
				if($this_inside) 
				{
					$any_ls_inside := 1
				}
			}
		}
		return $any_ls_inside
	}


	@fun_def calculate_3x3_matrixes() 
	{
     /* Calculates the inverse matrices for 3D */
     @local $invdet, $lp1, $lp2, $lp3, $invmx, $triplet_amount := 0, $pointer, $list_length :=0, $triplet_amount := 0, $pointer, $list_length :=0, $result

		if($sets.is_undef())
		{
			print "define-loudspeakers: Not valid 3-D configuration"
			return <undef>
		}

		$triplet_amount := $sets.size()
		//"triplet_amount: %\n".postf(triplet_amount);
		$list_length := $triplet_amount * 21 + 2
		$result := [0.0 | $x in $list_length]

		$result[0] := $dim
		$result[1] := $numSpeakers
		$pointer := 2

		forall $set in $sets
		{
			$lp1 := $speakers[$set[0]]
			$lp2 := $speakers[$set[1]]
			$lp3 := $speakers[$set[2]]

			$invmx := [0.0 | $x in 9] 
			$invdet := 1.0 / (  ($lp1.x() * (($lp2.y() * $lp3.z()) - ($lp2.z() * $lp3.y()))) - ($lp1.y() * (($lp2.x() * $lp3.z()) - ($lp2.z() * $lp3.x()))) + ($lp1.z() * (($lp2.x() * $lp3.y()) - ($lp2.y() * $lp3.x()))))

			$invmx[0] := (($lp2.y() * $lp3.z()) - ($lp2.z() * $lp3.y())) * $invdet
			$invmx[3] := (($lp1.y() * $lp3.z()) - ($lp1.z() * $lp3.y())) * $invdet.neg_compiled()
			$invmx[6] := (($lp1.y() * $lp2.z()) - ($lp1.z() * $lp2.y())) * $invdet
			$invmx[1] := (($lp2.x() * $lp3.z()) - ($lp2.z() * $lp3.x())) * $invdet.neg_compiled()
			$invmx[4] := (($lp1.x() * $lp3.z()) - ($lp1.z() * $lp3.x())) * $invdet
			$invmx[7] := (($lp1.x() * $lp2.z()) - ($lp1.z() * $lp2.x())) * $invdet.neg_compiled()
			$invmx[2] := (($lp2.x() * $lp3.y()) - ($lp2.y() * $lp3.x())) * $invdet
			$invmx[5] := (($lp1.x() * $lp3.y()) - ($lp1.y() * $lp3.x())) * $invdet.neg_compiled()
			$invmx[8] := (($lp1.x() * $lp2.y()) - ($lp1.y() * $lp2.x())) * $invdet

			/*$set.inv_mx($invmx)*/

			forall $i in 3
			{
				$result[$pointer] := $set[$i] + 1;
				$pointer += 1
			}

			forall $i in 9
			{
				$result[$pointer] := $invmx[$i]
				$pointer += 1
			}

			$result[$pointer] := $lp1.x()
			$pointer += 1
			$result[$pointer] := $lp2.x()
			$pointer += 1
			$result[$pointer] := $lp3.x()
			$pointer += 1
			$result[$pointer] := $lp1.y() 
			$pointer += 1
			$result[$pointer] := $lp2.y() 
			$pointer += 1
			$result[$pointer] := $lp3.y() 
			$pointer += 1
			$result[$pointer] := $lp1.z() 
			$pointer += 1
			$result[$pointer] := $lp2.z() 
			$pointer += 1
			$result[$pointer] := $lp3.z() 
			$pointer += 1
		}
		return $result
	}

	@fun_def choose_ls_tuplets() 
	{
     /* selects the loudspeaker pairs, calculates the inversion
        matrices and stores the data to a global array*/
      @local $atorad,$w1,$w2,$p1,$p2, $sorted_lss, $exist, $amount := 0, $inv_mat, $ls_table, $list_length, $result, $pointer
      $atorad := (2 * 3.1415927 / 360)

		$exist := [<undef> | $x in $maxNumSpeakers] 
		$inv_mat := [[<undef> | $x in 4] | $y in $maxNumSpeakers] 
		
		forall $i in $maxNumSpeakers
		{
			$exist[$i] := 0
		}

		/* sort loudspeakers according their azimuth angle */
		$sorted_lss := $THISOBJ.sort_2D_lss()

		// /* adjacent loudspeakers are the loudspeaker pairs to be used.*/
		forall $i in $numSpeakers-1
		{
			if(($speakers[$sorted_lss[$i+1]].azi() - $speakers[$sorted_lss[$i]].azi()) <= (180 - 10)) 
			{
				if(@calc_2D_inv_tmatrix($speakers[$sorted_lss[$i]].azi(), $speakers[$sorted_lss[$i+1]].azi(), $inv_mat[$i]))
				{
					$exist[$i] := 1
					$amount += 1
				}
			}
		}

		if(((6.283 - ($speakers[$sorted_lss[$numSpeakers-1]].azi())) + ($speakers[$sorted_lss[0]].azi())) <= (180 -  10)) 
		{
			if(@calc_2D_inv_tmatrix($speakers[$sorted_lss[$numSpeakers-1]].azi(), $speakers[$sorted_lss[0]].azi(), $inv_mat[$numSpeakers-1]))
			{
				$exist[$numSpeakers-1] := 1
				$amount += 1
			}
		}

		/* Output */
		$list_length := $amount * 6 + 2
		$result := [<undef> | $x in $list_length] 

		$result[0] := $dim
		$result[1] := $numSpeakers

		$pointer := 2

		forall $i in ($numSpeakers-1)
		{
			if($exist[$i] == 1)
			{
				$result[$pointer] := $sorted_lss[$i]+1
				$pointer += 1
				$result[$pointer] := $sorted_lss[$i+1]+1
				$pointer += 1
				forall $j in 4
				{
					$result[$pointer] := $inv_mat[$i][$j]
					$pointer += 1		
				}
			}
		}

		if($exist[$numSpeakers-1] == 1) 
		{
			$result[$pointer] := $sorted_lss[$numSpeakers-1]+1
			$pointer += 1
			$result[$pointer] := $sorted_lss[0]+1
			$pointer += 1
			forall $j in 4
			{
				$result[$pointer] := $inv_mat[$numSpeakers-1][$j]
				$pointer += 1				
			}
		}
		return $result
	}

	@fun_def sort_2D_lss()
	{
		/* sort loudspeakers according to azimuth angle */
		@local $index, $tmp, $tmp_azi, $rad2ang, $sorted_lss 

		$rad2ang := 360.0 / ( 2 * $pi );
		$sorted_lss := [<undef> | $x in $maxNumSpeakers] 

		/* Transforming angles between -180 and 180 */
		forall $i in $numSpeakers
		{
			$speakers[$i].set_azi(@acos($speakers[$i].x()) * $rad2ang)
			if(@abs($speakers[$i].y()) <= 0.001)
			{
				$tmp := 1.0
			}
			else
			{
				$tmp := ($speakers[$i].y() / @abs($speakers[$i].y()))
			}
			$speakers[$i].set_azi($speakers[$i].azi() * $tmp)
		}

		forall $i in $numSpeakers
		{
			$tmp := 2000
			forall $j in $numSpeakers
			{
				if($speakers[$j].azi() <= $tmp)
				{
					$tmp := $speakers[$j].azi()
					$index := $j					
				}
			}
			$sorted_lss[$i] := $index
			$tmp_azi := ($speakers[$index].azi())
			$speakers[$index].set_azi($tmp_azi + 4000.0)		
		}
		forall $i in $numSpeakers
		{
			$tmp_azi := ($speakers[$i].azi())
			$speakers[$i].set_azi($tmp_azi - 4000.0)
		}
		return $sorted_lss
	}

	// @fun_def calc_2D_inv_tmatrix($azi1, $azi2, $inv_mat)
	// {
	// /* calculate inverse 2x2 matrix */
	// 	@local $x1, $x2, $x3, $x4, $y1, $y2, $y3, $y4, $det, $rad2ang

	// 	$rad2ang := 360.0 / (2 * 3.141592)

	// 	$x1 := @cos($azi1 / $rad2ang)
	// 	$x2 := @sin($azi1 / $rad2ang)
	// 	$x3 := @cos($azi2 / $rad2ang)
	// 	$x4 := @sin($azi2 / $rad2ang)
	// 	$det := ($x1 * $x4) - ( $x3 * $x2 )

	// 	if(@abs($det) <= 0.001)
	// 	{
	// 		$inv_mat[0] := 0.0
	// 		$inv_mat[1] := 0.0
	// 		$inv_mat[2] := 0.0
	// 		$inv_mat[3] := 0.0
	// 		return false
	// 	}
	// 	else
	// 	{
	// 		$inv_mat[0] := ($x4 / $det)
	// 		$inv_mat[1] := ($x3.neg() / $det)
	// 		$inv_mat[2] := ($x2.neg() / $det)
	// 		$inv_mat[3] := ($x1 / $det)
	// 		return true
	// 	}
	// }
}

// @obj_def VBAPSpeaker($azimuth = 0, $elevation = 0)
// {

// 	// setters are 'private'
// 	@local $x, $y, $z, $azi, $ele
// 	// spherical coords, angles (in degrees) from a central point
// 	// var <>azi; 	// from median plane +/- 180 deg
// 	// var <>ele; 	// above azimuthal plane
// 	@init
// 	{
// 		$azi := $azimuth
// 		$ele := $elevation
// 	}
// 	@fun_def x($x_ext)
// 	{
// 		$x := $x_ext
// 	}
// 	@fun_def y($y_ext)
// 	{
// 		$y := $y_ext
// 	}
// 	@fun_def z($z_ext)
// 	{
// 		$z := $z_ext
// 	}	
// 	@fun_def azi($azi_ext)
// 	{
// 		$azi := $azi_ext
// 	}	
// 	@fun_def ele($ele_ext)
// 	{
// 		$ele := $ele_ext
// 	}				
// }

@fun_def VBAPSpeaker($x =0, $y =0, $z =0, $azi =0, $ele =0)
{ return [$x, $y, $z, $azi, $ele] }

@fun_def x($speaker)   { $speaker[0] }
@fun_def y($speaker)   { $speaker[1] }
@fun_def z($speaker)   { $speaker[2] }
@fun_def azi($speaker) { $speaker[3] }
@fun_def ele($speaker) { $speaker[4] }

@fun_def set_x($speaker, $x)     { $speaker[0] := $x }
@fun_def set_y($speaker, $y)     { $speaker[1] := $y }
@fun_def set_z($speaker, $z)     { $speaker[2] := $z }
@fun_def set_azi($speaker, $azi) { $speaker[3] := $azi }
@fun_def set_ele($speaker, $ele) { $speaker[4] := $ele }

@fun_def VBAPSpeakerSet($chanOffsets)
{ return $chanOffsets }

@fun_def chanOffsets($speaker_set, $list) 
{ 
	$speaker_set[0] := $list[0]
	$speaker_set[1] := $list[1]
	$speaker_set[2] := $list[2]
}



@fun_def anglesToCartesian($azi, $ele)
{
	@local $x := 0., $y := 0., $z := 0., $atorad := 0.

	$atorad := (2 * 3.1415927 / 360)
	$x := @cos($azi * $atorad) * @cos($ele * $atorad)
	$y := @sin($azi * $atorad) * @cos($ele * $atorad)
	$z := @sin($ele * $atorad)
	return [$x, $y, $z]
}

	@fun_def vec_length($v1)
	{
		@local $res := 0.

		$res := @sqrt(@abs($v1.x().pow(2)) + @abs($v1.y().pow(2)) + @abs($v1.z().pow(2)))

		if ($res==0.) // Evite les division par 0
		{
			$res := 0.0000001
		}
		/* length of a vector */
		return $res
	}

	@fun_def vec_prod($v1, $v2)
	{
		/* vector dot product */
		return (($v1.x() * $v2.x()) + ($v1.y() * $v2.y()) + ($v1.z() * $v2.z()))
	}

	@fun_def vec_angle($v1, $v2)
	{
		@local $inner

		$inner := (($v1.x() * $v2.x()) + ($v1.y() * $v2.y()) + ($v1.z() * $v2.z())) / (@vec_length($v1) * @vec_length($v2))

		if($inner > 1.0) 
		{$inner := 1.0}
		if($inner < -1.0) 
		{$inner := -1.0}
		return @abs(@acos($inner))
	}
	
	@fun_def calc_2D_inv_tmatrix($azi1, $azi2, $inv_mat)
	{
	/* calculate inverse 2x2 matrix */
		@local $x1, $x2, $x3, $x4, $y1, $y2, $y3, $y4, $det, $rad2ang

		$rad2ang := 360.0 / (2 * 3.141592)

		$x1 := @cos($azi1 / $rad2ang)
		$x2 := @sin($azi1 / $rad2ang)
		$x3 := @cos($azi2 / $rad2ang)
		$x4 := @sin($azi2 / $rad2ang)
		$det := ($x1 * $x4) - ( $x3 * $x2 )

		if(@abs($det) <= 0.001)
		{
			$inv_mat[0] := 0.0
			$inv_mat[1] := 0.0
			$inv_mat[2] := 0.0
			$inv_mat[3] := 0.0
			return false
		}
		else
		{
			$inv_mat[0] := ($x4 / $det)
			$inv_mat[1] := ($x3.neg_compiled() / $det)
			$inv_mat[2] := ($x2.neg_compiled() / $det)
			$inv_mat[3] := ($x1 / $det)
			return true
		}
	}

	@fun_def unq_cross_prod($v1, $v2)
	{
		@local $length, $result

		$result := @VBAPSpeaker()
		@set_x($result, ($v1.y() * $v2.z()) - ($v1.z() * $v2.y()))
		@set_y($result, ($v1.z() * $v2.x()) - ($v1.x() * $v2.z()))
		@set_z($result, ($v1.x() * $v2.y()) - ($v1.y() * $v2.x()))
		$length := @vec_length($result)
		@set_x($result, $result.x() / $length)
		@set_y($result, $result.y() / $length)
		@set_z($result, $result.z() / $length)
		return $result
	}

$ret2 := @compilation(MAP{
	@anglesToCartesian -> [["double", "double"], ["double"]],
	// @calc_2D_inv_tmatrix -> [["double", "double", "double"], "bool"]
	// @vec_length -> [["double"], "double"]
})

