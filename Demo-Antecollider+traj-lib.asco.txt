@insert "inserts/extra_functions4_compiled.asco.txt"
@insert "inserts/AntesCollider_lib2.asco.txt"
@insert "inserts/pm_obj_comp.asco.txt"
@insert "inserts/Trajectory_Score_Lib.asco.txt"
@insert "inserts/vbap.asco.txt"

antescofo::suivi 0 // pas de suivi!!


NOTE 60 1 start_SC_multiserver

// representation des serveurs dans Antesocofo


//$audio_card := "Digiface Dante (23970887)" // Studio1
// $audio_card := "Digiface Dante (23979314)" // Studio2
// $audio_card := "MacBook Pro Speakers"
 $audio_card := [2,3]

obj::sc_server("server1", 57110, device = $audio_card, outputs = 24) //, block_size = 128) 
obj::sc_server("server2", 57111, device = $audio_card, outputs = 24) //, block_size = 128) 
obj::sc_server("server3", 57112, device = $audio_card, outputs = 24) //, block_size = 128) 
obj::sc_server("server4", 57113, device = $audio_card, outputs = 24) //, block_size = 128) 
// obj::sc_server("server5", 57114, device = $audio_card, outputs = 24) //, block_size = 128) 
// obj::sc_server("server6", 57115, device = $audio_card, outputs = 24) //, block_size = 128) 


NOTE 60 1 create_load_envs_buff

::envs_nim_map2buffer("server1", $envs_map) // convert $envs_map to buffers
::envs_nim_map2buffer("server2", $envs_map) // convert $envs_map to buffers
::envs_nim_map2buffer("server3", $envs_map) // convert $envs_map to buffers
::envs_nim_map2buffer("server4", $envs_map) // convert $envs_map to buffers
// ::envs_nim_map2buffer("server5", $envs_map) // convert $envs_map to buffers
// ::envs_nim_map2buffer("server6", $envs_map) // convert $envs_map to buffers


NOTE 60 1 load_samples

::load_samples_folder() // load folder content into $SF_folder MAP

::load_samples("server1") // load all samples from the "/Users/fernandez/Library/Application\ Support/SuperCollider/sounds/" folder
::load_samples("server2")
::load_samples("server3")
// ::load_samples("server4")
// ::load_samples("server5")
// ::load_samples("server6")

// ::load_samples2("server1")
// obj::crea_track_HOA("track_hoa1", "group_hoa1", amp = 0, doppler = 0)

// $tracks("track_hoa1").mod_add(["play_buf2", "buf", 20, "amp", 0])

// $tracks("track_hoa1").free(1)

 // $Servers("server1").dumpOSC(1)

NOTE 60 1 mix_groups

//
obj::mix_group("group_1", "server1")
obj::mix_group("group_2", "server2")
obj::mix_group("group_3", "server3")


NOTE 60 1 mix_groups_HOA

/// Need HOA Ugens

//// Octophonique

// obj::mix_group_HOA("group_hoa1", "server1", "octo", 4)
// obj::mix_group_HOA("group_hoa2", "server2", "octo", 4)
// obj::mix_group_HOA("group_hoa3", "server3", "octo", 4)
// obj::mix_group_HOA("group_hoa4", "server4", "octo", 4)
// obj::mix_group_HOA("group_hoa5", "server5", "octo", 4)
// obj::mix_group_HOA("group_hoa6", "server6", "octo", 4)

//// Studio1 IRCAM

//obj::mix_group_HOA("group_hoa1", "server1", "studio1", 5) // decoder adt library
//obj::mix_group_HOA("group_hoa2", "server2", "studio1", 5) // decoder adt library
//obj::mix_group_HOA("group_hoa3", "server3", "studio1", 5) // decoder adt library
//obj::mix_group_HOA("group_hoa4", "server4", "studio1", 5) // decoder adt library
//obj::mix_group_HOA("group_hoa5", "server5", "studio1", 5) // decoder adt library
//obj::mix_group_HOA("group_hoa6", "server6", "studio1", 5) // decoder adt library

// obj::mix_group_HOA("group_hoa1", "server1", "studio1", 7, "ambitools") // decoder ambitools library
// obj::mix_group_HOA("group_hoa2", "server2", "studio1", 7, "ambitools") // decoder ambitools library
// obj::mix_group_HOA("group_hoa3", "server3", "studio1", 7, "ambitools") // decoder ambitools library
// obj::mix_group_HOA("group_hoa4", "server4", "studio1", 7, "ambitools") // decoder ambitools library
// obj::mix_group_HOA("group_hoa5", "server5", "studio1", 7, "ambitools") // decoder ambitools library
// obj::mix_group_HOA("group_hoa6", "server6", "studio1", 7, "ambitools") // decoder ambitools library

// obj::mix_group_HOA("group_hoa1", "server1", "studio1", 7, "iem") // decoder IEM library
// obj::mix_group_HOA("group_hoa2", "server2", "studio1", 7, "iem") // decoder IEM library
// obj::mix_group_HOA("group_hoa3", "server3", "studio1", 7, "iem") // decoder IEM library
// obj::mix_group_HOA("group_hoa4", "server4", "studio1", 7, "iem") // decoder IEM library
// obj::mix_group_HOA("group_hoa5", "server5", "studio1", 7, "iem") // decoder IEM library
// obj::mix_group_HOA("group_hoa6", "server6", "studio1", 7, "iem") // decoder IEM library

//// SAT

// obj::mix_group_HOA("group_hoa1", "server1", "sat", 5)
// obj::mix_group_HOA("group_hoa2", "server2", "sat", 5)
// obj::mix_group_HOA("group_hoa3", "server3", "sat", 5)
// obj::mix_group_HOA("group_hoa4", "server4", "sat", 5)
// obj::mix_group_HOA("group_hoa5", "server5", "sat", 5)
// obj::mix_group_HOA("group_hoa6", "server6", "sat", 5)

//// VST decoders

// obj::mix_group_HOA("group_hoa1", "server1", "iem", 4)
// obj::mix_group_HOA("group_hoa1", "server1", "iem_AllRA", 4)
// obj::mix_group_HOA("group_hoa1", "server1", "iem_binaural", 4)
// obj::mix_group_HOA("group_hoa1", "server1", "harpex", 1)
// obj::mix_group_HOA("group_hoa1", "server1", "sparta_ambibin", 5)
// obj::mix_group_HOA("group_hoa1", "server1", "compass_binaural", 5)
// obj::mix_group_HOA("group_hoa1", "server1", "a7monitor", 4)
// obj::mix_group_HOA("group_hoa1", "server1", "iem_adaptivebinaural", 4)
// obj::mix_group_HOA("group_hoa1", "server1", "sparta_ambidec", 5)


// obj::mix_group_HOA("group_hoa1", "server1", "iem_binaural", 7)
// obj::mix_group_HOA("group_hoa2", "server2", "iem_binaural", 7)
// obj::mix_group_HOA("group_hoa3", "server3", "iem_binaural", 7)
// obj::mix_group_HOA("group_hoa4", "server4", "iem_binaural", 7)
// obj::mix_group_HOA("group_hoa5", "server5", "iem_binaural", 7)
// obj::mix_group_HOA("group_hoa6", "server6", "iem_binaural", 7)


// obj::mix_group_HOA("group_hoa1", "server1", "a7monitor", 7)
// obj::mix_group_HOA("group_hoa2", "server2", "a7monitor", 7)
// obj::mix_group_HOA("group_hoa3", "server3", "a7monitor", 7)
// obj::mix_group_HOA("group_hoa4", "server4", "a7monitor", 7)
// obj::mix_group_HOA("group_hoa5", "server5", "a7monitor", 7)
// obj::mix_group_HOA("group_hoa6", "server6", "a7monitor", 7)

// obj::mix_group_HOA("group_hoa1", "server1", "sparta_ambibin", 3)
// obj::mix_group_HOA("group_hoa2", "server2", "sparta_ambibin", 3)
// obj::mix_group_HOA("group_hoa3", "server3", "sparta_ambibin", 3)
// obj::mix_group_HOA("group_hoa4", "server4", "sparta_ambibin", 3)
// obj::mix_group_HOA("group_hoa5", "server5", "sparta_ambibin", 3)
// obj::mix_group_HOA("group_hoa6", "server6", "sparta_ambibin", 3)

// $groups("group_hoa1").vst_decoder_gui(1)
// $groups("group_hoa2").vst_decoder_gui(1)
// $groups("group_hoa3").vst_decoder_gui(1)
// $groups("group_hoa4").vst_decoder_gui(1)
// $groups("group_hoa5").vst_decoder_gui(1)
// $groups("group_hoa6").vst_decoder_gui(1)

// $groups("group_hoa1").free(1)
// $groups("group_hoa2").free(1)
// $groups("group_hoa3").free(1)
// $groups("group_hoa4").free(1)
// $groups("group_hoa5").free(1)
// $groups("group_hoa6").free(1)

// obj::mix_group_HOA("group_hoa1", "server1", "no_decoder", 3)
// obj::mix_group_HOA("group_hoa2", "server2", "no_decoder", 3)
// obj::mix_group_HOA("group_hoa3", "server3", "no_decoder", 3)
// obj::mix_group_HOA("group_hoa4", "server4", "no_decoder", 3)
// obj::mix_group_HOA("group_hoa5", "server5", "no_decoder", 3)
// obj::mix_group_HOA("group_hoa6", "server6", "no_decoder", 3)

// $Servers("server1").g_dumpTree(0, 1)

NOTE 60 1 demo_mix_group_0


obj::crea_track("sc_track3", "group_1", fade_in = 1, amp = 0, [["BassSynth1", "freq", 35.9, "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10], ["TPan8", "pos", 0., "width", 2, "lag", 0, "amp", 0]])
$tracks("sc_track3").rand_lfo("BassSynth1", "fmrange", 1, 10, 1.5, "linear", 120)
$tracks("sc_track3").rand_lfo("BassSynth1", "freq", 35.3, 37.2, 35.9, "linear", 120)
$tracks("sc_track3").rand_lfo("BassSynth1", "lpf", 200, 500, 214, "linear", 60)
$tracks("sc_track3").rand_lfo("BassSynth1", "rq", 0.1, 0.6, 0.35, "linear", 60)

// $tracks("sc_track3").gui()

// /// insert module after synth "BassSynth1"
$tracks("sc_track3").mod_add(["TRingMod1", "modfreq", 164.4, "ampmod", 0, "lpfilt", 3822.5, "hpfilt", 50, "amp", -2.6], "after" , "TPan8")
$tracks("sc_track3").brown_lfo("TRingMod1", "modfreq", 50, 333, 50, 164.4, "linear", 120)
$tracks("sc_track3").brown_lfo("TRingMod1", "hpfilt", 50, 600, 50, 50, "linear", 120)
$tracks("sc_track3").brown_lfo("TRingMod1", "lpfilt", 50, 3822.5, 50, 3822.5, "linear", 120)


$tracks("sc_track3").mod_add(["TFlanger", "flangefreq", 1.822], "after", "TRingMod1")
$tracks("sc_track3").rand_lfo("TFlanger", "flangefreq", 1.22, 2, 1.822, "linear", 60)
$tracks("sc_track3").rand_lfo("TFlanger", "ampmod", 0.001, 0.02, 0.005, "linear", 60)

$tracks("sc_track3").mod_add(["Noisy", "freq", 380, "fr1", 5, "fr2", 10, "fr3", 1, "amp", -14], "after", "TFlanger", 10)
$tracks("sc_track3").rand_lfo("Noisy", "freq", 200, 400, 380, "linear", 600)


$tracks("sc_track3").mod_add(["TAdCVerb", "revTime", 0.3], "before", "audioOut8")
$tracks("sc_track3").set("TAdCVerb", ["revTime", 2.1])
$tracks("sc_track3").set("TAdCVerb", ["revTime", 0])


NOTE 60 1 demo_mix_group_1

//// change node orders

$tracks("sc_track3").mod_move_before("TFlanger", "TRingMod1")
$tracks("sc_track3").mod_move_after("TRingMod1", "TAdCVerb")

NOTE 60 1 demo_mix_group_2

$tracks("sc_track3").mod_rand()

NOTE 60 1 demo_mix_group_3

// $ro_temp := 120
$nim_tempo := NIM { 0 10, 15 1000 "sine", 15 20 "linear"}
Curve @grain 0.01 { $ro_temp : $nim_tempo}

group ro @tempo $ro_temp
{
	loop rand_order 0.1
	{
		$tracks("sc_track3").mod_rand()
	}
}

NOTE 60 1 demo_mix_group_4
abort ro

NOTE 60 1 demo_mix_group_5
/// pause
$tracks("sc_track3").pause(0.1)

NOTE 60 1 demo_mix_group_6
///resume
$tracks("sc_track3").resume(0.1)

NOTE 60 1 demo_mix_group_7
/// free track "sc_track3" in 5 beats 
$tracks("sc_track3").free(5)



NOTE 60 1 groups_tracks_HOA
 
obj::crea_track_HOA("track_hoa1", "group_hoa1", amp = 0, doppler = 0, in_channels = 1)
obj::crea_track_HOA("track_hoa2", "group_hoa1", amp = 0, doppler = 0, in_channels = 1)

// SynthDef
$tracks("track_hoa1").mod_add(["TestSynth3", "freq",200, "amp", 0])
$tracks("track_hoa1").rand_lfo_xyz(-1, 1, 0.5, -1, 1, -0.5, -0.5, 0.5, 0.1, 80, "linear")

// set parameter
$tracks("track_hoa1").set("TestSynth3", ["freq", 20])
$tracks("track_hoa1").set("TestSynth3", ["freq", 120])
$tracks("track_hoa1").set("TestSynth3", ["amp", -3])
$tracks("track_hoa1").set("TestSynth3", ["fc", 2000])
$tracks("track_hoa1").ambi_x(0)
$tracks("track_hoa1").ambi_y(0)
$tracks("track_hoa1").ambi_z(0)
$tracks("track_hoa1").free()
// set modulation
$tracks("track_hoa1").bpf_param("TestSynth3", "fc", [2000, 5, "exp", 20, 3, 3000, 10, "exp_out", 100]) // change pour toutes les instances de "TestSynth3"
$tracks("track_hoa1").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 120)
$tracks("track_hoa1").rand_lfo("TestSynth3", "rq", 0.1, 0.3, 0.2, "linear", 60)

// VST module you need FabFilter
$tracks("track_hoa1").mod_add("MultiEQ")
$tracks("track_hoa1").mod_add("FabFilter Pro-Q 3")
// SynthDef
$tracks("track_hoa1").mod_add(["TDust", "freq", 10, "amp", -1], "before", "MultiEQ")
$tracks("track_hoa1").rand_lfo("TDust", "freq", 1, 50, 10, "linear", 60)

$tracks("track_hoa1").gui("MultiEQ") // open vst editor	
$tracks("track_hoa1").gui("MultiEQ", 0) // close vst editor

$tracks("track_hoa1").gui("FabFilter Pro-Q 3") // open vst editor	
$tracks("track_hoa1").gui("FabFilter Pro-Q 3", 0) // open vst editor	

$tracks("track_hoa1").set("MultiEQ", ["xFade", 1])

$Servers("server1").g_dumpTree(0, 1)

// traj
$of_gui := ::gui_oF_trajs() // send o OpenFramaworks visual
//$duree, $radio, $start_angle, $start_elev, $end_angle, $end_elev, $dir = 1
$tracks("track_hoa1").hoa_pol_rota(10, 0.6, 0, 0, 360, 0, 1)
$tracks("track_hoa1").hoa_pol_rota(10, 0.6, 0, 0, 360, 0, 1)
$tracks("track_hoa1").traj_lib_lissajou3D(loop_num = 20)

$tracks("track_hoa1").mod_remove("MultiEQ", 1)
$tracks("track_hoa1").mod_remove("FabFilter Pro-Q 3", 1)
$tracks("track_hoa1").amp(0)

// track2
$tracks("track_hoa2").mod_add(["TAddic_20_8_mod_mono", preset, "psycho2"], fade_in = 5)
$tracks("track_hoa2").brown_lfo("TAddic_20_8_mod_mono", "ampmod", 0, 30, 2, 0, "linear", 120)
$tracks("track_hoa2").brown_lfo("TAddic_20_8_mod_mono", "transp", 1.305, 1.315, 0.1, 1.31, "linear", 60)
$tracks("track_hoa2").mod_add(["Impulse_Pluck", "freq", 1010, "freq_imp", 8, "del", 0.001, "amp", 1], fade_in = 5)
$tracks("track_hoa2").rand_lfo("Impulse_Pluck", "freq", 900, 1130, 1010, "linear", 60)
$tracks("track_hoa2").brown_lfo("Impulse_Pluck", "freq_imp", 7, 30, 2, 8, "linear", 120)
// spat rand xyz_position
$tracks("track_hoa2").ambi_rand_lfo_sphere2(0.5, -120, -20, 0, 360, 0, 0, "linear", 29)
$tracks("track_hoa2").traj_lib_clelie3D(loop_num = 20)


$tracks("track_hoa1").mod_add("MultiEQ", "after", "TDust")
$tracks("track_hoa1").gui("MultiEQ") // open vst editor
$tracks("track_hoa1").set("MultiEQ", ["Filter Frequency 2", 200, "Filter Gain 2", 15, "Filter Q 2", 8, "Filter Frequency 3", 300, "Filter Gain 3", 15, "Filter Q 3", 8, "Filter Frequency 4", 500, "Filter Gain 4", 15, "Filter Q 4", 8, "Filter Frequency 5", 800, "Filter Gain 5", 15, "Filter Q 5", 8]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Frequency 2", 30, 3000, 200, "linear", 50)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Frequency 3", 30, 3000, 300, "exp_out", 60)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Frequency 4", 30, 3000, 500, "exp_out", 80)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Frequency 5", 30, 3000, 800, "linear", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Gain 2", 0, 15, 0, "exp_out", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Gain 3", 0, 15, 0, "exp_out", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Gain 4", 0, 15, 0, "exp_out", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Gain 5", 0, 15, 0, "exp_out", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Q 2", 1, 8, 1, "linear", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Q 3", 1, 8, 1, "linear", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Q 4", 1, 8, 1, "linear", 100)
$tracks("track_hoa1").rand_lfo("MultiEQ", "Filter Q 5", 1, 8, 1, "linear", 100)

$tracks("track_hoa1").lfo_abort("MultiEQ", "Filter Frequency 2")
$tracks("track_hoa1").lfo_abort("MultiEQ", "Filter Frequency 3")
$tracks("track_hoa1").lfo_abort("MultiEQ", "Filter Frequency 4")
$tracks("track_hoa1").lfo_abort("MultiEQ", "Filter Frequency 5")

$tracks("track_hoa1").set("MultiEQ", ["bypass", 0]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$tracks("track_hoa1").master_vst("FdnReverb")
$tracks("track_hoa1").master_vst("FabFilter Pro-Q 3")
$groups("group_hoa1").gui("FabFilter Pro-Q 3")
$tracks("track_hoa1").gui("FdnReverb") // open vst editor
$tracks("track_hoa1").gui("FdnReverb", 0) // close vst editor
$tracks("track_hoa1").set("FdnReverb", ["Reverberation Time", 9])
$tracks("track_hoa1").set("FdnReverb", ["bypass", 0]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

$tracks("track_hoa2").amp(-4)

// $tracks("track_hoa1").master_vst("aXMeter") 
// $tracks("track_hoa1").gui("aXMeter") // open vst editor
$tracks("track_hoa1").mod_remove("FdnReverb", 0.1) 


// Add Mix group Master VST
$groups("group_hoa1").mod_add(["FdnReverb"])
$groups("group_hoa1").mod_add(["MultiEQ"])
$groups("group_hoa1").mod_remove("FdnReverb")

$groups("group_hoa1").gui("FdnReverb", 0)
$groups("group_hoa1").gui("MultiEQ")

$groups("group_hoa1").set("FdnReverb", ["bypass", 0]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$groups("group_hoa1").set("FdnReverb", ["Room Size", 5, "Reverberation Time", 5]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

// $groups("group_hoa1").rand_lfo("FdnReverb", "Reverberation Time", 0.2, 9, 5, "linear", 10)
// $groups("group_hoa1").lfo_abort("FdnReverb", "Reverberation Time")
	
// $groups("group_hoa1").mod_add(["MultiBandCompressor"], "after", "FdnReverb")
// $groups("group_hoa1").vst_gui("MultiBandCompressor", 1)
// $groups("group_hoa1").set("MultiBandCompressor", ["bypass", 1]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
// $groups("group_hoa1").mod_remove("MultiBandCompressor")

// $groups("group_hoa1").mod_add(["DualDelay"])
// $groups("group_hoa1").gui("DualDelay")
// $groups("group_hoa1").set("DualDelay", ["bypass", 1]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
// $groups("group_hoa1").mod_remove("DualDelay")

// $groups("group_hoa1").mod_add(["EnergyVisualizer"])
// $groups("group_hoa1").gui("EnergyVisualizer") // open vst editor
// $groups("group_hoa1").gui("EnergyVisualizer", 0) // close vst editor
// $groups("group_hoa1").mod_remove("EnergyVisualizer") 

$groups("group_hoa1").amp([0, 5, -20]) // ramp amplitude group_hoa1
$groups("group_hoa1").amp(-120)



NOTE 60 1 VBAP_2D_exemple

// Define Loudspeakers for Vbap
$vbap_array_8 := obj::VBAPSpeakerArray(2, [0, 45, 90, 135, 180, -135, -90, -45]) // 8 channel ring
$vbap_array_8.loadToBuffer("server1") //load Vbap buffer to server 

print vbapBuf (""+$vbap_array_8.vbapBuf()) // buffer number
print numSpeakers (""+$vbap_array_8.numSpeakers()) // Speakers number

// Create mix_group with number of Speakers outputs
obj::mix_group("group_vbap1", "server1", num_channels = $vbap_array_8.numSpeakers())


// Create tracks with Vbap 8 channels outpout
obj::crea_track("track_vbap1", "group_vbap1", amp = 0, [["TestSynth3", "freq", 111, "amp", 1], ["Vbap_8", "vbapBuf", $vbap_array_8.vbapBuf()]])
$tracks("track_vbap1").set("Vbap_8", ["azi", 90])	
$tracks("track_vbap1").set("Vbap_8", ["rad", 0.6])

$tracks("track_vbap1").rand_lfo("Vbap_8", "azi", -180, 180, 0, "linear", 60)
$tracks("track_vbap1").rand_lfo("Vbap_8", "rad", 0, 12, 0, "linear", 60)
$tracks("track_vbap1").lfo_abort("Vbap_8", "azi")
$tracks("track_vbap1").lfo_abort("Vbap_8", "rad")

$tracks("track_vbap1").free(1)

obj::crea_track("track_vbap2", "group_vbap1", amp = 0, [["TestSynth3", "freq", 200, "amp", 1], ["Vbap_8", "vbapBuf", $vbap_array_8.vbapBuf()]])
$tracks("track_vbap2").rand_lfo("Vbap_8", "azi", -180, 180, 0, "linear", 60)
$tracks("track_vbap2").free(1)

NOTE 60 1 VBAP_3D_exemple 

$vbap_array_3D := obj::VBAPSpeakerArray(3, [[-22.5, 14.97], [22.5, 14.97], [-67.5, 14.97], [67.5, 14.97], [-112.5, 14.97], [112.5, 14.97], [-157.5, 14.97], [157.5, 14.97], [-45, 0], [45, 0], [-90, 0], [90, 0], [-135, 0], [135, 0], [0, 0], [180, 0]]) // zig zag partial dome
$vbap_array_3D.loadToBuffer("server1") //load Vbap buffer to server  			

$Vbap_num_speakers := $vbap_array_3D.numSpeakers()
$Vbap_module_name := "Vbap_"+$Vbap_num_speakers
$Vbap_buf_num := $vbap_array_3D.vbapBuf()

print vbapBuf $Vbap_buf_num // buffer number
print numSpeakers $Vbap_num_speakers // Speakers number

obj::mix_group("group_vbap_3D", "server1", num_channels = $Vbap_num_speakers)

obj::crea_track("track_vbap3D", "group_vbap_3D", amp = 0, [["TestSynth3", "freq", 200, "amp", 1], [$Vbap_module_name, "vbapBuf", $Vbap_buf_num]])
$tracks("track_vbap3D").set($Vbap_module_name, ["azi", -180])
$tracks("track_vbap3D").rand_lfo($Vbap_module_name, "azi", -180, 180, 0, "linear", 60)
$tracks("track_vbap3D").rand_lfo($Vbap_module_name, "ele", 0, 20, 0, "linear", 60)
$tracks("track_vbap3D").lfo_abort($Vbap_module_name, "azi")
$tracks("track_vbap3D").lfo_abort($Vbap_module_name, "ele")
$tracks("track_vbap3D").orbit_traj(0, 0.06)

$tracks("track_vbap3D").free(1)


NOTE 60 1 orbits
// $tracks("track_hoa1").
// traj
$of_gui := ::gui_oF_trajs() // send o OpenFramaworks visual
$HOA_global_z := 0
obj::crea_track_HOA("track_hoa1", "group_hoa1", [["Impulse_Pluck", "freq", 548.83099365234, "freq_imp", 10.770000457764, "del", 0.0060000000521541, "amp", -3]])
$tracks("track_hoa1").orbit_traj(0, 0.06)			

obj::crea_track_HOA("track_hoa2", "group_hoa1", [["Impulse_Pluck", "freq", 600, "freq_imp", 20, "del", 0.000500000521541, "amp", -3]])
$tracks("track_hoa2").orbit_traj(0, 0.04)

obj::crea_track_HOA("track_hoa3", "group_hoa1", [["Impulse_Pluck", "freq", 300, "freq_imp", 20, "del", 0.000500000521541, "amp", -3]])
$tracks("track_hoa3").orbit_traj(0, 0.033)

obj::crea_track_HOA("track_hoa4", "group_hoa1", [["Impulse_Pluck", "freq", 400, "freq_imp", 30, "del", 0.000200000521541, "amp", 0]])
$tracks("track_hoa4").orbit_traj(0, 0.01)

 // create 13 new trajs
$freqs := [234, 345, 456, 567, 678, 789, 890, 901, 1024, 1156, 1234, 1356, 1356]
forall $x in $freqs.size()
{
	obj::crea_track_HOA("track_hoa"+($x+5), "group_hoa2", ["TestSynth3", "freq", $freqs[$x], "amp", -8])
	$tracks("track_hoa"+($x+5)).orbit_traj(@rand_range(90, 180), @rand_range(0.008, 0.067))
}

 // create 13 new trajs
$freqs2 := [234, 345, 456, 567, 678, 789, 890, 901, 1024, 1156, 1234, 1356, 1356]-100
forall $x in $freqs2.size()
{
	obj::crea_track_HOA("track_hoa"+($x+19), "group_hoa3", ["TestSynth3", "freq", $freqs2[$x], "amp", -8])
	$tracks("track_hoa"+($x+19)).orbit_traj(@rand_range(90, 180), @rand_range(0.008, 0.067))
}

 // create 13 new trajs
$freqs3 := @rand_vect(20, 150, 800)
forall $x in $freqs3.size()
{
	obj::crea_track_HOA("track_hoa"+($x+32), "group_hoa4", ["TestSynth3", "freq", $freqs3[$x], "amp", -8])
	$tracks("track_hoa"+($x+32)).orbit_traj(@rand_range(90, 180), @rand_range(0.008, 0.067))
}

//  // create 13 new trajs
$freqs4 := @rand_vect(20, 100, 300)
forall $x in $freqs4.size()
{
	obj::crea_track_HOA("track_hoa"+($x+53), "group_hoa5", ["TestSynth3", "freq", $freqs4[$x], "amp", -8])
	$tracks("track_hoa"+($x+53)).orbit_traj(@rand_range(90, 180), @rand_range(0.008, 0.067))
}

//  // create 13 new trajs
// $freqs5 := @rand_vect(20, 400, 1000)
// forall $x in $freqs5.size()
// {
// 	obj::crea_track_HOA("track_hoa"+($x+74), "group_hoa6", ["TestSynth3", "freq", $freqs5[$x], "amp", -8])
// 	$tracks("track_hoa"+($x+74)).orbit_traj(@rand_range(90, 180), @rand_range(0.008, 0.067))
// }

// random lfo control fc 
forall $x in 50
{
	$tracks("track_hoa"+($x+5)).rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
}

forall $x in 50
{
	$tracks("track_hoa"+($x+5)).mod_replace("TestSynth3", "Impulse_Pluck", 0.1)
	$tracks("track_hoa"+($x+5)).set("Impulse_Pluck", ["freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0])
}

forall $x in 53
{
	$tracks("track_hoa"+($x+1)).free(2)
}

NOTE 1 60 Trajectory_Score_Library

$of_gui := ::gui_oF_trajs() // send o OpenFramaworks visual

// 2D
obj::crea_track_HOA("track_traj_2D_1", "group_hoa1", [["Impulse_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_2D_1").traj_lib_ellipse(loop_num = 20, speed=4)
$tracks("track_traj_2D_1").set_out(["dist", 1])
$tracks("track_traj_2D_1").set_out(["azi",-80])
$tracks("track_traj_2D_1").set_out(["ele",60])
$tracks("track_traj_2D_1").free()
obj::crea_track_HOA("track_traj_2D_2", "group_hoa1", [["Impulse	_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_2D_2").traj_lib_sin(2, -2, 0.2, 3, 0., 2, loop_num = 20, elev=0.1)

obj::crea_track_HOA("track_traj_2D_3", "group_hoa1", [["Impulse_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_2D_3").traj_lib_lissajou(loop_num = 20)
$tracks("track_traj_2D_3").traj_lib_lissajou(loop_num = 20, b=2)
$tracks("track_traj_2D_3").traj_lib_lissajou(loop_num = 20, m=5)

obj::crea_track_HOA("track_traj_2D_4", "group_hoa1", [["TestSynth3", "freq", @rand_range(150, 444), "amp", -8]])
$tracks("track_traj_2D_4").traj_lib_lissajou_bis(k=7, loop_num = 20, elev=0.05)

obj::crea_track_HOA("track_traj_2D_5", "group_hoa2", [["TestSynth3", "freq", @rand_range(150, 444), "amp", -8]])
$tracks("track_traj_2D_5").traj_lib_deltoide(loop_num = 20, elev=0.05)

obj::crea_track_HOA("track_traj_2D_6", "group_hoa2", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_6").traj_lib_rosace(loop_num = 20, elev=0.5)
// $tracks("track_traj_2D_6").free()
obj::crea_track_HOA("track_traj_2D_7", "group_hoa3", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_7").traj_lib_rosace_var(loop_num = 20, elev=0.5)

obj::crea_track_HOA("track_traj_2D_8", "group_hoa3", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_8").traj_lib_gauss(iniT=-2, targeT=0.5, k = 0.2, loop_num = 20)

obj::crea_track_HOA("track_traj_2D_9", "group_hoa3", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_9").traj_lib_hypocycloide1(loop_num = 20, elev=0.1)

obj::crea_track_HOA("track_traj_2D_10", "group_hoa4", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_10").traj_lib_hypocycloide2(loop_num = 20, elev=0.1)

obj::crea_track_HOA("track_traj_2D_11", "group_hoa4", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_11").traj_lib_curvoide(loop_num = 20, elev=0.1)

obj::crea_track_HOA("track_traj_2D_12", "group_hoa4", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_12").traj_lib_hypo_var(loop_num = 20, elev=0.1)

obj::crea_track_HOA("track_traj_2D_13", "group_hoa5", [["BassSynth1", "freq", @rand_range(30, 60), "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_2D_13").traj_lib_epi(m = $pi/2, speed =20, loop_num = 20)

// 3D
obj::crea_track_HOA("track_traj_3D_1", "group_hoa5", [["Impulse_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_3D_1").traj_lib_generic3D(loop_num = 20, speed=4)

obj::crea_track_HOA("track_traj_3D_2", "group_hoa5", [["Impulse_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_3D_2").traj_lib_helicoide3D(loop_num = 20)

obj::crea_track_HOA("track_traj_3D_3", "group_hoa6", [["Impulse_Pluck", "freq", @rand_range(900, 1130), "freq_imp", @rand_range(8, 30), "del", @rand_range(0.001, 0.002), "amp", 0]])
$tracks("track_traj_3D_3").traj_lib_couronne3D(loop_num = 20)

obj::crea_track_HOA("track_traj_3D_4", "group_hoa6", [["TestSynth3", "freq", @rand_range(150, 444), "amp", -8]])
$tracks("track_traj_3D_4").traj_lib_clelie3D(loop_num = 20, offsetX = 0, offsetY = 0)

obj::crea_track_HOA("track_traj_3D_5", "group_hoa6", [["BassSynth1", "freq", 35.9, "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10]])
$tracks("track_traj_3D_5").traj_lib_lissajou3D(loop_num = 200, offsetX = 0.2, offsetY = 0.2)

forall $x in 13
{
	$tracks("track_traj_2D_"+($x+1)).free()
}

forall $x in 5
{
	$tracks("track_traj_3D_"+($x+1)).free()
}


NOTE 1 60 Plane_3D_HOA

group planet3D
{
	@local $grille_masses, $baseFreq, $scale_coords, $synths, $synths_Planet_3D, $masses, $inner_masses, $links, $out_pos, $out_vel, $offsets, $m_coords, $i := 0, $ii := 0, $iii := 0, $mass_posx := [], $mass_posy := [], $mass_posz := [], $hoa_bus
	////// creation de la grille 3D //////
	// taille de la grille
	$grille_masses := [6, 6]

	// number of freqs/synth
	$n_freqs := @reduce(@*, $grille_masses)

	// tableaux masses, links
	$masses := []
	$inner_masses := []
	$links := []
	$out_pos := []
	$out_vel := []
	// $offsets := [$grille_masses + 2 - ($grille_masses + 2 * 0.5), 0].flatten()
	// $offsets := [6, 5, 0.]
	// $offsets := [3.86, 3.76, 0.] pour 7x7
	$offsets := [3.5, 3, 0.]
	// frequence de base
	$baseFreq := 30
	// $scale_coords := 0.1
		// tableau comprehension genere une grille de coordonées à partir de $grille_masses
	$m_coords := [ [[$i, $j] | $i in $grille_masses[0]+2 ] | $j in $grille_masses[1]+2]

	$hoa_bus := $groups("group_hoa1").$hoa_bus
	$hoa_order := $groups("group_hoa1").$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa3" dans la variable $hoa_bus
	
	$synths := [ [ ["Form_lag_HOA_"+$hoa_order, "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $hoa_bus, "lag", 1] | $i in $grille_masses[0] ] | $j in $grille_masses[1] ] // contruction de la grille de links

	obj::crea_track_HOA("synths_Planet_3D", "group_hoa1", fade_in = 4, amp = 0, $synths.flatten(1), encoder = false)
	// $tracks("synths_Planet_3D").master_vst("FdnReverb")
	// $tracks("synths_Planet_3D").gui("FdnReverb")
	// $tracks("synths_Planet_3D").set("FdnReverb", ["bypass", 1])

	// tableau comprehension genere une grille de links en 3D
	$links := [ [ obj::Link3D(0., 1., 0.1, 0.1) | $i in ($grille_masses[0]+1)+($grille_masses[0]+2) ] | $j in ($grille_masses[1]+2)] // contruction de la grille de links

	forall $x_co in $m_coords // construction de la grille de masses
	{
		_ := $masses.insert($i, [])
		forall $mass_co in $x_co
		{
			@local $mass
			// création de masses
			$mass := obj::Mass3D(10., [$mass_co[0], $mass_co[1], 0] - $offsets)

			if(($mass_co.member(0).not()) && (($mass_co[0]!= ($grille_masses[0]+1)) && ($mass_co[1] != ($grille_masses[1]+1)))) // recupere les masses de l'interieur
			{
				// print massasasas (""+$mass)
				$inner_masses.push_back($mass) // masse de l'interieur pour les trigger après
			}
			// print grille (""+$mass_co)
			_ := $masses[$i].insert($ii, $mass) // tab de toutes les masses
			$ii += 1
		}
		$ii := 0
		$i += 1
	}

	group compute // calcule l'état du système à chaque boucle de la loop à 0.01
	{	
		@local $out, $index_connect, $index_connect2, $index_connect3, $index_out_pos

		loop 0.02 //0.01
		{
			$index_connect := 0
			$index_connect2 := 0
			$index_connect3 := 0
			$index_out_pos := 0

			forall $list_link in $links
			{
				forall $link_connect in $list_link // parcour la liste de links pour contruire les liens entre masses
				{
					if($index_connect2 < $grille_masses[0]+1) // connexions horizontales o-o-o
					{
						$link_connect.connect($masses[$index_connect][$index_connect2], $masses[$index_connect][$index_connect2+1])
					}
					else
					{																	//	o
						if($index_connect < (@size($links) -1)) // connexions verticales 	|
						{																//	o
							$link_connect.connect($masses[$index_connect][$index_connect3], $masses[$index_connect+1][$index_connect3])
							$index_connect3 += 1
						}
					}
					$index_connect2 := $index_connect2 + 1
				}
				$index_connect2 := 0 // reset line
				$index_connect3 := 0 // reset line
				$index_connect += 1
			}
			forall $trig_mass in $inner_masses // trigger
			{
				$out_pos[$index_out_pos] := $trig_mass.$position_out
				$out_vel[$index_out_pos] := $trig_mass.$velocity_out
				$trig_mass.trig()
				$tracks("synths_Planet_3D").set_single("Form_lag_HOA_"+$hoa_order, $index_out_pos, ["mul", ($trig_mass.$force_out[3].clip_compiled(0, 1)), "bpf", (@clip_compiled($trig_mass.$position_out[2].scale_compiled(-0.3, 0.3, 50, 800, 1.02), 50, 2500)), "x", $trig_mass.$position_out[0], "y", $trig_mass.$position_out[1], "z", $trig_mass.$position_out[2]])
				$index_out_pos += 1
			}
			 of_list3D ($out_pos.flatten()) // send to OF of_list
		}
	}
	// INT position 
	$pos_fac_init := 0.61222
	forall $mass_obj in $masses.flatten()
	{
		let $mass_obj.$position_out[0] := $mass_obj.$posX_old_1*$pos_fac_init
		let $mass_obj.$position_out[1] := $mass_obj.$posY_old_1*$pos_fac_init
		$mass_obj.$posX_old_2 := $mass_obj.$position_out[0]
		$mass_obj.$posY_old_2 := $mass_obj.$position_out[1]
	}

	///// OSC /////
	// recever OSC from openFrameworks

	group oscrecv_ofx
	{
		@local $mass_num := 0., $force_x := 0., $force_y := 0., $force_z := 0., $links_length, $base_freqs_of, $ax, $ay, $az, $axy

		whenever ($from_of_gui==$from_of_gui)
		{
			// print (""+$from_of_gui)
			switch ($from_of_gui[0])
			{
		      	case "/parameters/3D_plane_forces/mass_num":
		      	$mass_num := $from_of_gui[1]
		      	case "/parameters/3D_plane_forces/force_x":
		      	$force_x := $from_of_gui[1]
		      	case "/parameters/3D_plane_forces/force_y":
		      	$force_y := $from_of_gui[1]
				case "/parameters/3D_plane_forces/force_z":
				$force_z := $from_of_gui[1]
				case "/parameters/3D_plane_forces/reset":
				forall $links_obj in $links.flatten()
				{
					$links_obj.reset()
				}
				case "/parameters/3D_plane_forces/links_length":
				forall $links_obj in $links.flatten()
				{
					$links_obj.$length := ($from_of_gui[1])
					// print ($links_obj.$length)
				}
				case "/parameters/3D_plane_forces/links_rigidity":
				forall $links_obj in $links.flatten()
				{
					$links_obj.$rigidity := ($from_of_gui[1])
					// print ($links_obj.$rigidity)
				}
				case "/parameters/3D_plane_forces/links_vel":
				forall $links_obj in $links.flatten()
				{
					$links_obj.$vel_damp := ($from_of_gui[1])
					// print ($links_obj.$vel_damp)
				}
				case "/parameters/3D_plane_forces/mass": // control all mass
				forall $inner_mass_obj in $inner_masses.flatten()
				{
					$inner_mass_obj.$mass := ($from_of_gui[1])
				}
				case "/parameters/3D_plane_forces/posX": // all masses offset x
				forall $mass_obj in $masses.flatten()
				{
					let $mass_obj.$position_out[0] := $mass_obj.$posX_old_2+$from_of_gui[1] 
					// $mass_posx[$ax] := $mass_obj.$position_out[0]
					$mass_obj.$posX_old_1 := $mass_obj.$position_out[0]
				}
				case "/parameters/3D_plane_forces/posY": // all masses offset y
				forall $mass_obj in $masses.flatten()
				{
					let $mass_obj.$position_out[1] := $mass_obj.$posY_old_2+$from_of_gui[1] 
					// $mass_posy[$ay] := $mass_obj.$position_out[1]
					$mass_obj.$posY_old_1 := $mass_obj.$position_out[1]
				}
				case "/parameters/3D_plane_forces/posZ": // all masses offset z
				forall $mass_obj in $masses.flatten()
				{
					let $mass_obj.$position_out[2] := $mass_obj.$zInit+$from_of_gui[1] 
					// $mass_posz[$az] := $mass_obj.$position_out[2]
					$mass_obj.$posZ_old_1 := $mass_obj.$position_out[2]
					$mass_obj.$posZ_old_2 := $mass_obj.$position_out[2]
				}
				case "/parameters/3D_plane_forces/pos_fac": // all masses offset z
				forall $mass_obj in $masses.flatten()
				{
					let $mass_obj.$position_out[0] := $mass_obj.$posX_old_1*$from_of_gui[1] 
					let $mass_obj.$position_out[1] := $mass_obj.$posY_old_1*$from_of_gui[1] 
					$mass_obj.$posX_old_2 := $mass_obj.$position_out[0]
					$mass_obj.$posY_old_2 := $mass_obj.$position_out[1]
				}
				case "/parameters/3D_plane_forces/baseFreq":
				$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $grille_masses[0] ] | $j in $grille_masses[1]] // construction grille inner_mass freqs
				$base_freqs_of := $base_freqs_of.flatten(1)
				// print (""+$base_freqs_of)
				forall $inner_mass_index in $inner_masses.size()
				{
					// _ := $synths_Planet_3D.set_single("Form", $inner_mass_index, $base_freqs_of[$inner_mass_index])
					$tracks("synths_Planet_3D").set_single("Form_lag_HOA_"+$hoa_order, $inner_mass_index, $base_freqs_of[$inner_mass_index])
				}
			}
			_ := $inner_masses[$mass_num].force([$force_x, $force_y, $force_z])
		}
	}
}
	// @proc_def plane_rand()
	// {
	// 	$rand_freqs := @rand_range_int_vect(6, 200, 600)
	// 	$rand_freqs := [ [["freq", $rand_freqs[$i]+($j*0.1)] | $i in 6 ] | $j in 6] // construction grille inner_mass freqs
	// 	$rand_freqs := $rand_freqs.flatten(1)
	// 	forall $inner_mass_index in $inner_masses.size()
	// 	{
	// 		$tracks("synths_Planet_3D").set_single("Form_lag_HOA_"+$hoa_order, $inner_mass_index, $rand_freqs[$inner_mass_index])
	// 	}
	// }

	// ::plane_rand_freqs()

NOTE 1 60 Plane_3D_OFF

abort planet3D

NOTE 60 1 PM_Solveur

//PM Solveur équations

@macro_def @L { 12 } // = 144

$L := @L
$N := $L * $L
$S := 2 * $N
@macro_def @S { (2 * @L * @L) }

$m_coords := [ [[($i*0.2)-1.2, ($j*0.2)-1.2, 0] | $i in $L ] | $j in $L]
$m_coords_visual := $m_coords.flatten()
// print (""+$m_coords)

// number of freqs/synth
$n_freqs := $N

// frequence de base
$baseFreq := 30


	// print (""+$groups("group_hoa1"))
	$mix_group_solver := "group_hoa1"
	$hoa_bus := $groups($mix_group_solver).$hoa_bus
	$hoa_order := $groups($mix_group_solver).$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa3" dans la variable $hoa_bus
// $synths := [ [ ["Form", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "pan", ($j+1)-($L*0.5)/$L] | $i in $L ] | $j in $L ] // contruction de la grille de links

	$synths := [ [ ["Form_lag_HOA_"+$hoa_order, "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 0, "aamp", 1/$n_freqs, "globTBus", $hoa_bus, "x", $m_coords[$i][$i], "y", $m_coords[$j][$j], "z", $m_coords[$i][$j]] | $i in $L ] | $j in $L ] // contruction de la grille de links
	$synths := $synths.flatten(1)
	// print (""+$synths)
	$synth_server1 := $synths.slice(0, 24)
	$synth_server2 := $synths.slice(24, 48)
	$synth_server3 := $synths.slice(48, 72)
	$synth_server4 := $synths.slice(72, 96)
	$synth_server5 := $synths.slice(96, 120)
	$synth_server6 := $synths.slice(120, 144)

	obj::crea_track_HOA("PM_Solveur_track1", "group_hoa1", fade_in = 1, amp = 0, $synth_server1, encoder = false)
	obj::crea_track_HOA("PM_Solveur_track2", "group_hoa2", fade_in = 1, amp = 0, $synth_server2, encoder = false)
	obj::crea_track_HOA("PM_Solveur_track3", "group_hoa3", fade_in = 1, amp = 0, $synth_server3, encoder = false)
	obj::crea_track_HOA("PM_Solveur_track4", "group_hoa4", fade_in = 1, amp = 0, $synth_server4, encoder = false)
	obj::crea_track_HOA("PM_Solveur_track5", "group_hoa5", fade_in = 1, amp = 0, $synth_server5, encoder = false)
	obj::crea_track_HOA("PM_Solveur_track6", "group_hoa6", fade_in = 1, amp = 0, $synth_server6, encoder = false)

@fun_def index2serveur($i)
{
	if(0 <= $i && $i < 24) 
	{ 
		return "PM_Solveur_track1" 
	}
	else 
	{ 
		if(24 <= $i && $i < 48) 
		{
			return "PM_Solveur_track2" 
		}
		else
		{
			if(48 <= $i && $i < 72) 
			{ 
				return "PM_Solveur_track3" 
			}
			else 
			{ 
				if(72 <= $i && $i < 96) 
				{
					return "PM_Solveur_track4" 
				}
				else
				{
					if(96 <= $i && $i < 120) 
					{ 
						return "PM_Solveur_track5" 
					}
					else 
					{ 
						return "PM_Solveur_track6" 
					}
				}
			}
		}
	}
}

@fun_def index2serveur_index($i)
{
	if(0 <= $i && $i < 24) 
	{ 
		return $i
	}
	else 
	{ 
		if(24 <= $i && $i < 48) 
		{
			return $i-24
		}
		else
		{
			if(48 <= $i && $i < 72) 
			{ 
				return $i-48
			}
				else 
				{ 
				if(72 <= $i && $i < 96) 
				{
					return $i-72
				}
				else
				{
					if(96 <= $i && $i < 120) 
					{ 
						return $i-96
					}
					else 
					{ 
						return $i-120
					}
				}
			}
		}
	}
}

@fun_def evolve($t, $y, $ydot)
{
    @local $p := 0
    
    Loop
    {
       @local $i := ($p / $L)
       @local $j := ($p % $L)

       @evolve_aux(($i == 0),
                   ($j == $L - 1),
                   ($i == $L - 1),
                   ($j == 0),
                   $y,
                   $ydot,
                   $p,
                   $i,
                   $j)
       
       $p += 1
    } during[$N #]

    return 0;
}

$D := 0.
$k := 1.0

whenever ($D == $D || $k == $k)
{
     print "$D = " $D
     print "$k = " $k
}

@fun_def evolve_aux($cn, $ce, $cs, $cw, $y, $ydot, $p, $ip, $jp)
{
	@local $pv := $p + $N

	@local $pn := ($ip - 1) * $L + $jp
	@local $pe := $ip * $L + ($jp + 1)
	@local $ps := ($ip + 1) * $L + $jp
	@local $pw := $ip * $L + ($jp - 1)

	@local $xn := ($cn ? $y[$p] : ($y[$p] - $y[$pn]))
	@local $ln := @sqrt(1 + $xn*$xn)
	@local $thetan := @atan($xn)
	@local $fn := $ln * @sin($thetan)

	@local $xe := ($ce ? $y[$p] : ($y[$p] - $y[$pe]))
	@local $le := @sqrt(1 + $xe*$xe)
	@local $thetae := @atan($xe)
	@local $fe := $le * @sin($thetae)

	@local $xs := ($cs ? $y[$p] : ($y[$p] - $y[$ps]))
	@local $ls := @sqrt(1 + $xs*$xs)
	@local $thetas := @atan($xs)
	@local $fs := $ls * @sin($thetas)

	@local $xw := ($cw ? $y[$p] : ($y[$p] - $y[$pw]))
	@local $lw := @sqrt(1 + $xw*$xw)
	@local $thetaw := @atan($xw)
	@local $fw := $lw * @sin($thetaw)


	@local $d := $D * $y[$pv]

	@local $f := $fn + $fe + $fs + $fw + $d


	$ydot[$pv] := - $k * $f
	$ydot[$p] := $y[$pv]

	return 0
}




$cpt := 0
$p := 0

$f1 := 0

    $y0 := [ 0. | ($S) ]
    // $p := $N / 2
    $y0[$p] := $f1

whenever ($f1 == $f1)
{
	    // @local $my_curve
	    // $y0[10] := $f1
	    // print $f1
	    // $y0 := [ 0. | ($S) ]
	    // $p := $N / 2
	    $y0[$p] := $f1

	    // $y0[$p] := 2

	abort my_curve


	// $d0 := @host_date()
	Curve my_curve
	@grain 0.05 //(1./25.) 0.05
	@action {


	    @local $count := 0
	    Loop 0. {
		   	$m_coords_visual[$count*3 + 2] := $y[$count]
		    $tracks($count.index2serveur()).set_single("Form_lag_HOA_"+$hoa_order, $count.index2serveur_index(), ["mul", $y[$count], "bpf", $y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02), "z", $y[$count]]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))
	      $count += 1
	    } during [$N #]

	    of_list3D $m_coords_visual
	}
	{
	    $y' = @evolve[$NOW, $y]
	    $y = $y0

	    dim = @S
	    order = 8
	    ; tolR = 1.e-8
	    ; tolA = 1.e-8
	    ; lapack = true
	    
	    signatures = MAP {
	       @evolve_aux -> [ ["bool", "bool", "bool", "bool",
	                         ["double"], ["double"],
	                         "int", "int", "int" ],
	                        "int"],
	       "$D" -> "float",
	       "$N" -> "int",
	       "$L" -> "int",
	       "$S" -> "int",
	       "$k" -> "float",
	    }

	    whenever $y[$N / 2] =>= 0. { $cpt += 1 }
	}
}
	// recever OSC from openFrameworks
	// oscrecv PM_solveur 6666 * $from_of_gui

	group oscrecv_ofx
	{
		@local $base_freqs_of

			whenever ($from_of_gui==$from_of_gui)
			{
				// print (""+$from_of_gui)

				switch ($from_of_gui[0])
				{
			      	case "/parameters/PM_solveur/damping":
			      	$D := $from_of_gui[1]
			      	case "/parameters/PM_solveur/k":
			      	$k := $from_of_gui[1]
			      	case "/parameters/PM_solveur/mass_pos":
			      	$p := $from_of_gui[1]			      	
					case "/parameters/PM_solveur/force":
					$f1 := $from_of_gui[1]
					// case "/parameters/PM_solveur/volume":
					// $groups("PM_Solveur").amp($from_of_gui[1]) // controle le group en entier					
					case "/parameters/PM_solveur/freq":
					$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $L ] | $j in $L] // construction grille inner_mass freqs
					$base_freqs_of := $base_freqs_of.flatten(1)

					@local $count := 0
				    Loop 0. {

				    	$tracks($count.index2serveur()).set_single("Form_lag_HOA_"+$hoa_order, $count.index2serveur_index(), ($base_freqs_of[$count]))
				      	$count += 1

				    } during [$N #]

				}
			}
	}

NOTE 60 1 Stop_PM_Solveur

abort my_curve
abort oscrecv_ofx
// $groups("PM_Solveur").free(1)

$tracks("PM_Solveur_track1").free()
$tracks("PM_Solveur_track2").free()
$tracks("PM_Solveur_track3").free()
$tracks("PM_Solveur_track4").free()
$tracks("PM_Solveur_track5").free()
$tracks("PM_Solveur_track6").free()

NOTE 1 60 HOA_order3

$groups("group_hoa1").free()
$groups("group_hoa2").free()
$groups("group_hoa3").free()
$groups("group_hoa4").free()
$groups("group_hoa5").free()
$groups("group_hoa6").free()

0.5 obj::mix_group_HOA("group_hoa1", "server1", "iem_binaural", 3)
obj::mix_group_HOA("group_hoa2", "server2", "iem_binaural", 3)
obj::mix_group_HOA("group_hoa3", "server3", "iem_binaural", 3)
obj::mix_group_HOA("group_hoa4", "server4", "iem_binaural", 3)
obj::mix_group_HOA("group_hoa5", "server5", "iem_binaural", 3)
obj::mix_group_HOA("group_hoa6", "server6", "iem_binaural", 3)

NOTE 1 60 insectes_3D_HOA


$mass_mass := 300. // la masse de chaque particule
$limit := 1 // pour initialisation
$inc := 0
// 3D tab
$masses := []
$out_pos_final := []

$hoa_bus := $groups("group_hoa1").$hoa_bus //recupère le bus hoa du mix_group_HOA "group_hoa1" dans la variable $hoa_bus
$hoa_order := $groups("group_hoa1").$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa1" dans la variable $hoa_bus

// track HOA pour la création du groupe de synthèses
obj::crea_track_HOA("gaz_molecules", "group_hoa1", fade_in = 1, amp = 0, encoder = false, doppler = 0) 

@proc_def add_mass()
{
	$coords := [$limit.rand2(), $limit.rand2(), $limit.rand2()]*0.5 // random init coords XYZ
	$masses.push_back(obj::Mass3D($mass_mass, $coords))
	$tracks("gaz_molecules").mod_add(["SynthBasic1_HOA_"+$hoa_order, "mul", 0.0001, "freq", (1/($inc+1)*600)+150, "globTBus", $hoa_bus ], fade_in = 1.5)
	$inc += 1
}
@proc_def remove_mass()
{
	if($masses.size()> 0)
	{
		$masses.remove(0)
		$tracks("gaz_molecules").mod_remove_single("SynthBasic1_HOA_"+$hoa_order, 0, 1.5)
		forall $i in 3 // x, y, z
		{
			$out_pos_final.remove(0)
		}
	}
	else 
	{
		print no_synth
	}
}
// Physicals
// limites dans une sphère
$limit_sphere := obj::Sphere3D(0, 0, 0, 1, 3, 0, 0, -0.6, 2, 0, 0) 
// Ambient3D genère des variations de positions aléatoires
$ambient := obj::Ambient3D(randomFX = 0.5, randomFY = 0.5, randomFZ = 0.5) //random mov

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0
		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			$mss.inter_sphere($limit_sphere)
			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			$tracks("gaz_molecules").set_single("SynthBasic1_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.1, 1).clip_compiled(0, 0.1), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", ($mss.$position_out[2]+$HOA_global_z)]) 
			$i += 1
		}		
		of_molecules $out_pos_final // OSC vers visualisation
	}
}

NOTE 1 60 insectes_3D_HOA_polar


$mass_mass := 300. // la masse de chaque particule
$limit := 1 // pour initialisation
$inc := 0
// 3D tab
$masses := []
$out_pos_final := []

$hoa_bus := $groups("group_hoa1").$hoa_bus //recupère le bus hoa du mix_group_HOA "group_hoa1" dans la variable $hoa_bus
$hoa_order := $groups("group_hoa1").$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa1" dans la variable $hoa_bus

// track HOA pour la création du groupe de synthèses
obj::crea_track_HOA("gaz_molecules", "group_hoa1", fade_in = 1, amp = 0, encoder = false, doppler = 0) 

@proc_def add_mass()
{
	$coords := [$limit.rand2(), $limit.rand2(), $limit.rand2()]*0.5 // random init coords XYZ
	$masses.push_back(obj::Mass3D($mass_mass, $coords))
	$tracks("gaz_molecules").mod_add(["SynthBasic1_Ambi_"+$hoa_order, "mul", 0.0001, "freq", (1/($inc+1)*600)+150, "globTBus", $hoa_bus ], fade_in = 1.5)
	$inc += 1
}
@proc_def remove_mass()
{
	if($masses.size()> 0)
	{
		$masses.remove(0)
		$tracks("gaz_molecules").mod_remove_single("SynthBasic1_Ambi_"+$hoa_order, 0, 1.5)
		forall $i in 3 // x, y, z
		{
			$out_pos_final.remove(0)
		}
	}
	else 
	{
		print no_synth
	}
}
// Physicals
// limites dans une sphère
$limit_sphere := obj::Sphere3D(0, 0, 0, 1, 3, 0, 0, -0.6, 2, 0, 0) 
// Ambient3D genère des variations de positions aléatoires
$ambient := obj::Ambient3D(randomFX = 0.5, randomFY = 0.5, randomFZ = 0.5) //random mov

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0, $car2pol
		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			$mss.inter_sphere($limit_sphere)
			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			// print mass_position_out_cart ($mss.$position_out)
			$car2pol := @cartopol3D_tab($mss.$position_out)
			$tracks("gaz_molecules").set_single("SynthBasic1_Ambi_"+$hoa_order, $i, ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.1, 1).clip_compiled(0, 0.1), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000), "radius", $car2pol[0], "azi", $car2pol[1], "ele", $car2pol[2]]) 
			$i += 1
		}		
		of_molecules $out_pos_final // OSC vers visualisation
	}
}

// abort gaz_molecules_3D

NOTE 1 60 HOA_rec

$groups("group_hoa3").record_hoa("insectos_studio2_2_hoa5")
$Servers("server1").g_dumpTree(0, 1)
$tracks("gaz_molecules").free()
NOTE 60 1 stop_rec_hoa

$groups("group_hoa3").stop_record("insectos_studio2_2_hoa5")

::add_mass()

Forall $x in 200
{
	::add_mass()
}

::remove_mass()

forall $x in 200
{
	::remove_mass()
}

abort gaz_molecules_3D
print toto

NOTE 1 60 insectes_2D_VBAP

// Define Loudspeakers for Vbap
// $vbap_array_2d := obj::VBAPSpeakerArray(2, [0, 45, 90, 135, 180, -135, -90, -45]) // 8 channel ring
$vbap_array_2d := obj::VBAPSpeakerArray(2, [-45, 45, 135, -135]) // 8 channel ring

$vbap_array_2d.loadToBuffer("server1") //load Vbap buffer to "server1" 

obj::mix_group("group_vbap1", "server1", num_channels = $vbap_array_2d.numSpeakers())

$mass_mass := 300. // la masse de chaque particule
$limit := 1 // pour initialisation
$inc := 0

// 3D tab
$masses := []
$out_pos_final := []
$cartopol_vbap2d := []
$tracks_2d := []

@proc_def add_mass()
{
	$coords := [$limit.rand2(), $limit.rand2(), $limit.rand2()]*0.5 // random init coords XYZ
	$masses.push_back(obj::Mass3D($mass_mass, $coords))
	obj::crea_track("track_vbap"+$inc, "group_vbap1", amp = 0, fade_in = 1.5, [["SynthBasic", "mul", 0.0001, "freq", (1/($inc+1)*600)+150], ["Vbap_8", "vbapBuf", $vbap_array_2d.vbapBuf()]])
	$tracks_2d.push_back($inc)
	// $tracks("gaz_molecules").mod_add(["SynthBasic1_HOA_"+$hoa_order, "mul", 0.0001, "freq", (1/($inc+1)*600)+150, "globTBus", $hoa_bus ], fade_in = 1.5)
	$inc += 1
}

@proc_def remove_mass()
{
	if($tracks.is_defined("track_vbap"+$tracks_2d[0]))
	{
		$tracks("track_vbap"+$tracks_2d[0]).free(1.5)
		$tracks_2d.remove(0)
		$masses.remove(0)
		// $tracks("gaz_molecules").mod_remove_single("SynthBasic1_HOA_"+$hoa_order, 0, 1.5)
		
		// $tracks_2d[0].free(1.5)
		// $tracks_2d.remove(0)
		forall $i in 3 // x, y, z
		{
			$out_pos_final.remove(0)
		}		
	}
	else
	{
		print no_synth
	}


}
// Physicals
// limites dans une sphère
$limit_sphere := obj::Sphere3D(0, 0, 0, 1, 3, 0, 0, -0.6, 2, 0, 0) 
// Ambient3D genère des variations de positions aléatoires
$ambient := obj::Ambient3D(randomFX = 0.5, randomFY = 0.5, randomFZ = 0.5) //random mov

// $tracks("track_vbap0").set("SynthBasic", ["mul", 1])
// $tracks("track_vbap0").set("Vbap_cart_8", ["x", ])
// $tracks("track_vbap0").free(1)

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0
		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			$mss.inter_sphere($limit_sphere)
			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			$cartopol_vbap2d := @cartopol3D($mss.$position_out[0], $mss.$position_out[1], $mss.$position_out[2])
			// $tracks("gaz_molecules").set_single("SynthBasic1_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.1, 1).clip_compiled(0, 0.1), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", ($mss.$position_out[2]+$HOA_global_z)]) 
			$tracks("track_vbap"+$tracks_2d[$i]).set("SynthBasic", ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.3, 1).clip_compiled(0, 0.3), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000)]) 
			$tracks("track_vbap"+$tracks_2d[$i]).set("Vbap_8", ["rad", $cartopol_vbap2d[0], "azi", $cartopol_vbap2d[1], "ele", $cartopol_vbap2d[2]])
			// print i $i
			$i += 1
		}		
		of_molecules $out_pos_final // OSC vers visualisation
	}
}

abort gaz_molecules_3D

NOTE 1 60 HOA_rec

$groups("group_vbap1").record("insectos_vbap8ch")
$Servers("server1").g_dumpTree(0, 1)

NOTE 60 1 stop_rec_hoa

$groups("group_vbap1").stop_record("insectos_vbap8ch")

::add_mass()	

::remove_mass()

abort gaz_molecules_3D



NOTE 1 60 insectes_3D_VBAP_studio1

// Define Loudspeakers for Vbap
// Studio1
$vbap_array_3d := obj::VBAPSpeakerArray(3, [[0.0, -5.0, 2.65], [40.0, -5.0, 2.65], [80.0, -5.0, 2.65], [120.0, -5.0, 2.65], [160.0, -5.0, 2.65], [-160.0, -5.0, 2.65], [-120.0, -5.0, 2.65], [-80.0, -5.0, 2.65], [-40.0, -5.0, 2.65], [20.0, 26.0, 2.65], [60.0, 26.0, 2.65], [100.0, 26.0, 2.65], [140.0, 26.0, 2.65], [-180.0, 26.0, 2.65], [-140.0, 26.0, 2.65], [-100.0, 26.0, 2.65], [-60.0, 26.0, 2.65], [-20.0, 26.0, 2.65], [0.0, 57.0, 2.65], [72.0, 57.0, 2.65], [144.0, 57.0, 2.65], [-144.0, 57.0, 2.65], [-72.0, 57.0, 2.65], [-90.0, 90.0, 2.65]]) // 8 channel ring

$vbap_array_3d.loadToBuffer("server1") //load Vbap buffer to "server1" 

print ($vbap_array_3d.numSpeakers())

obj::mix_group("group_vbap1", "server1", num_channels = $vbap_array_3d.numSpeakers())
$mass_mass := 300. // la masse de chaque particule
$limit := 1 // pour initialisation
$inc := 0

// 3D tab
$masses := []
$out_pos_final := []
$cartopol_vbap2d := []
$tracks_2d := []

@proc_def add_mass()
{
	$coords := [$limit.rand2(), $limit.rand2(), $limit.rand2()]*0.5 // random init coords XYZ
	$masses.push_back(obj::Mass3D($mass_mass, $coords))
	obj::crea_track("track_vbap"+$inc, "group_vbap1", amp = 0, fade_in = 1.5, [["SynthBasic", "mul", 0.0001, "freq", (1/($inc+1)*600)+150], ["Vbap_24", "vbapBuf", $vbap_array_3d.vbapBuf()]])
	$tracks_2d.push_back($inc)
	// $tracks("gaz_molecules").mod_add(["SynthBasic1_HOA_"+$hoa_order, "mul", 0.0001, "freq", (1/($inc+1)*600)+150, "globTBus", $hoa_bus ], fade_in = 1.5)
	$inc += 1
}

@proc_def remove_mass()
{
	$tracks("track_vbap"+$tracks_2d[0]).free(1.5)
	$tracks_2d.remove(0)
	$masses.remove(0)
	// $tracks("gaz_molecules").mod_remove_single("SynthBasic1_HOA_"+$hoa_order, 0, 1.5)
	
	// $tracks_2d[0].free(1.5)
	// $tracks_2d.remove(0)
	forall $i in 3 // x, y, z
	{
		$out_pos_final.remove(0)
	}

}
// Physicals
// limites dans une sphère
$limit_sphere := obj::Sphere3D(0, 0, 0, 1, 3, 0, 0, -0.6, 2, 0, 0) 
// Ambient3D genère des variations de positions aléatoires
$ambient := obj::Ambient3D(randomFX = 0.5, randomFY = 0.5, randomFZ = 0.5) //random mov

// $tracks("track_vbap0").set("SynthBasic", ["mul", 1])
// $tracks("track_vbap0").set("Vbap_cart_8", ["x", ])
// $tracks("track_vbap0").free(1)

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0
		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			$mss.inter_sphere($limit_sphere)
			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			$cartopol_vbap2d := @cartopol3D($mss.$position_out[0], $mss.$position_out[1], $mss.$position_out[2])
			// $tracks("gaz_molecules").set_single("SynthBasic1_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.1, 1).clip_compiled(0, 0.1), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", ($mss.$position_out[2]+$HOA_global_z)]) 
			$tracks("track_vbap"+$tracks_2d[$i]).set("SynthBasic", ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.3, 1).clip_compiled(0, 0.3), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000)]) 
			$tracks("track_vbap"+$tracks_2d[$i]).set("Vbap_24", ["rad", $cartopol_vbap2d[0], "azi", $cartopol_vbap2d[1], "ele", $cartopol_vbap2d[2]])
			// print i $i
			$i += 1
		}		
		of_molecules $out_pos_final // OSC vers visualisation
	}
}

abort gaz_molecules_3D

NOTE 1 60 HOA_rec

$groups("group_vbap1").record("insectos_vbap8ch")
$Servers("server1").g_dumpTree(0, 1)

NOTE 60 1 stop_rec_hoa

$groups("group_vbap1").stop_record("insectos_vbap8ch")

::add_mass()

::remove_mass()

NOTE 1 60 insectes_3D_AmbiPan_studio1

// Studio1 = 24 speakers

obj::mix_group("group_ambiPan", "server1", num_channels = 24) // 
$mass_mass := 300. // la masse de chaque particule
$limit := 1 // pour initialisation
$inc := 0

// 3D tab
$masses := []
$out_pos_final := []
$cartopol_vbap2d := []
$tracks_2d := []

@proc_def add_mass()
{
	$coords := [$limit.rand2(), $limit.rand2(), $limit.rand2()]*0.5 // random init coords XYZ
	$masses.push_back(obj::Mass3D($mass_mass, $coords))
	obj::crea_track("track_ambipan"+$inc, "group_ambiPan", amp = 0, fade_in = 1.5, [["SynthBasic", "mul", 0.0001, "freq", (1/($inc+1)*600)+150], ["AmbiPannerStudio1"]])
	$tracks_2d.push_back($inc)
	// $tracks("gaz_molecules").mod_add(["SynthBasic1_HOA_"+$hoa_order, "mul", 0.0001, "freq", (1/($inc+1)*600)+150, "globTBus", $hoa_bus ], fade_in = 1.5)
	$inc += 1
}

@proc_def remove_mass()
{
	$tracks("track_ambipan"+$tracks_2d[0]).free(1.5)
	$tracks_2d.remove(0)
	$masses.remove(0)
	// $tracks("gaz_molecules").mod_remove_single("SynthBasic1_HOA_"+$hoa_order, 0, 1.5)
	
	// $tracks_2d[0].free(1.5)
	// $tracks_2d.remove(0)
	forall $i in 3 // x, y, z
	{
		$out_pos_final.remove(0)
	}

}
// Physicals
// limites dans une sphère
$limit_sphere := obj::Sphere3D(0, 0, 0, 1, 3, 0, 0, -0.6, 2, 0, 0) 
// Ambient3D genère des variations de positions aléatoires
$ambient := obj::Ambient3D(randomFX = 0.5, randomFY = 0.5, randomFZ = 0.5) //random mov

// $tracks("track_ambipan0").set("SynthBasic", ["mul", 1])
// $tracks("track_ambipan0").set("Vbap_cart_8", ["x", ])
// $tracks("track_ambipan0").free(1)

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0
		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			$mss.inter_sphere($limit_sphere)
			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			$cartopol_vbap2d := @cartopol3D($mss.$position_out[0], $mss.$position_out[1], $mss.$position_out[2])
			// $tracks("gaz_molecules").set_single("SynthBasic1_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.1, 1).clip_compiled(0, 0.1), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", ($mss.$position_out[2]+$HOA_global_z)]) 
			$tracks("track_ambipan"+$tracks_2d[$i]).set("SynthBasic", ["mul", $mss.$velocity_out[0].scale_compiled(-0.1, 0.1, 0, 0.3, 1).clip_compiled(0, 0.3), "freq", $mss.$velocity_out[1].scale_compiled(-0.1, 0.1, 50, 400, 1).clip_compiled(50, 400), "fc", $mss.$velocity_out[2].scale_compiled(-0.1, 0.1, 30, 6000, 1).clip_compiled(30, 6000)]) 
			$tracks("track_ambipan"+$tracks_2d[$i]).set("AmbiPannerStudio1", ["rad", $cartopol_vbap2d[0], "azi", $cartopol_vbap2d[1], "ele", $cartopol_vbap2d[2]])
			// print i $i
			$i += 1
		}		
		of_molecules $out_pos_final // OSC vers visualisation
	}
}

abort gaz_molecules_3D

NOTE 1 60 HOA_rec

$groups("group_ambiPan").record("insectos_vbap8ch")
$Servers("server1").g_dumpTree(0, 1)

NOTE 60 1 stop_rec_hoa

$groups("group_ambiPan").stop_record("insectos_vbap8ch")

::add_mass()

::remove_mass()

NOTE 1 60 HOA_order1

$groups("group_hoa1").free()
$groups("group_hoa2").free()
$groups("group_hoa3").free()
$groups("group_hoa4").free()
$groups("group_hoa5").free()
$groups("group_hoa6").free()

0.5 obj::mix_group_HOA("group_hoa1", "server1", "iem_binaural", 1)
obj::mix_group_HOA("group_hoa2", "server2", "iem_binaural", 1)
obj::mix_group_HOA("group_hoa3", "server3", "iem_binaural", 1)
obj::mix_group_HOA("group_hoa4", "server4", "iem_binaural", 1)
obj::mix_group_HOA("group_hoa5", "server5", "iem_binaural", 1)
obj::mix_group_HOA("group_hoa6", "server6", "iem_binaural", 1)

NOTE 60 1 granulation1

obj::crea_track_HOA("gran_track1", "group_hoa2", amp = -6, encoder = false) // track for receive encoded HOA (granulation, etc)
$tracks("gran_track1").master_vst("FdnReverb")
$tracks("gran_track1").gui("FdnReverb")

// @proc_def 		  HOA_grain_xyz_rand_fix_track($buf, $envbuf, $rate_min, $rate_max, $pos_min, $pos_max, $ryth_min, $ryth_max, $env_dur_min, $env_dur_max, $x_min, $x_max, $y_min, $y_max, $z_min, $z_max, $amp, $track_no_decoder, $grain_group)
$test_gran_proc1 := obj::HOA_grain_xyz_rand_fix_track("Raggi-p3-concat.aif", "pointe", 0.9, 1.1, 0, 1, 0.002, 0.02, 0.05, 0.1, 0.5, 0.6, 0.5, 0.6, 0, 0.6, -12, "gran_track1", 1)
$test_gran_proc1.buf("Raggi-p3-concat.aif")
$test_gran_proc1.amp(-20)
$test_gran_proc1.xyz_interpol([[0.5, 0.6, 0.5, 0.6, 0.4, 0.6], 5, "linear", [-0.8, -0.8, 0.7, 0.7, 0., 1], 4, "exp_in", [-0.5, -0.6, -0.5, -0.6, 0.3, 0.3], 3, [0.6, 0.6, -0.6, -0.6, 0.5, 0.5], 4, "circ_in_out", [0.5, 0.6, 0.5, 0.6, 0.4, 0.8]], 10)
$nim_grain := NIM { 0 10, 9 120 "sine", 15 30 "linear"}
Curve @grain 0.01, @action {$test_gran_proc1.tempo_grain($gr_temp) } { $gr_temp : $nim_grain}

$test_gran_proc1.tempo_grain(50)
// $test_gran_proc1.tempo_loop(60)

// $test_gran_proc2.xyz_interpol_stop() 

$test_gran_proc2 := obj::HOA_grain_xyz_rand_fix_track("hang2-3-Eq009.aif", "perc", 0.9, 1.1, 0, 1, 0.002, 0.02, 0.05, 0.1, -0.5, -0.6, 0.5, 0.6, 0, 0.6, 6, "gran_track1", 2)
$test_gran_proc2.xyz_interpol([[-0.8, -0.8, 0.7, 0.7, 0., 1], 5, "linear", [0.5, 0.6, 0.5, 0.6, 0.4, 0.8], 4, "exp_in", [-0.5, -0.6, -0.5, -0.6, 0.3, 0.3], 4, "circ_in_out", [0.5, 0.6, -0.5, -0.6, 0.3, 0.3], 5, [-0.8, -0.8, 0.7, 0.7, 0., 1]], 10)
$test_gran_proc2.amp(6)
$test_gran_proc2.env_dur_min(0.1)
$test_gran_proc2.env_dur_max(0.2)
$test_gran_proc2.buf("hang2-3-Eq009.aif")

$test_gran_proc1.free(3)
$test_gran_proc2.free(3)

NOTE 60 1 granulation2

obj::crea_track_HOA("gran_track2", "group_hoa3", amp = -6, encoder = false) // track for receive encoded HOA (granulation, etc)
$tracks("gran_track2").master_vst("FdnReverb")
$tracks("gran_track2").gui("FdnReverb")
						    // HOA_grain_xyz_rand_pos_mod2_track($buf, $envbuf, $rate_min, $rate_max, $pos_min, $pos_max, $ryth_min, $ryth_max, $env_dur_min, $env_dur_max, $x_min, $x_max, $y_min, $y_max, $z_min, $z_max, $rand_lfo_x_min, $rand_lfo_x_max, $rand_lfo_y_min, $rand_lfo_y_max, $rand_lfo_z_min, $rand_lfo_z_max, $pos_lfo_min, $pos_lfo_max, $amp, $track_HOA_NE, $grain_group) 
	$test_gran_obj1 := obj::HOA_grain_xyz_rand_pos_mod2_track("conformal1-1_4.aif", "rond", 1, 1.01, 0.01, 0.5, 0.02, 0.1, 0.1, 0.2, -0.05, 0.05, -0.05, 0.05, 0, 0.6, -1., 1., -1., 1., 0, 1.5, 0., 1., -23, "gran_track2", 3)
	$test_gran_obj1.ryth_min(0.01)
	$test_gran_obj1.ryth_max(0.03)

	// $test_gran_obj1.buf("harm-trem-A5-c3-2.aif")
	// $test_gran_obj1.buf("Crash-inv-out6.aif")
	// $test_gran_obj1.buf("Tom-18p-1coup.aif")
	// $test_gran_obj1.buf("Japanese_Block1.aif")
	// $test_gran_obj1.buf("thundersheet-large+bow.aif")
	// $test_gran_obj1.buf("iso_rimshot.aif")
	// $test_gran_obj1.buf("Para-gran2-materia.aif")	
	$test_gran_obj1.envbuf("rond")
	$test_gran_obj1.envbuf("perc")
	$test_gran_obj1.buf("thundersheet-large+bow.aif", 3)
	$test_gran_obj1.buf("conformal1-1_4.aif", 10)
	$test_gran_obj1.buf_prob(0.5)	
	$test_gran_obj1.env_dur_min(0.01)
	$test_gran_obj1.env_dur_max(0.1)	
	$test_gran_obj1.amp(0)

	// $test_gran_obj1.tpo(0)

	$test_gran_obj2 := obj::HOA_grain_xyz_rand_pos_mod2_track("comedien-2.aif", "rond", 0.9, 1.1, 0, 0.7, 0.02, 0.1, 0.2, 0.15, -0.05, 0.05, -0.05, 0.05, 0, 0.6, -1., 1., -1., 1., 0, 1.5, 0., 1., 0, "gran_track2", 4)
	$test_gran_obj2.ryth_min(0.01)
	$test_gran_obj2.ryth_max(0.05)
	$test_gran_obj2.pos_min(0.)
	$test_gran_obj2.pos_max(0.9)	
	$test_gran_obj2.envbuf("m2")
	$test_gran_obj2.envbuf("perc")
	$test_gran_obj2.envbuf("rond")
	$test_gran_obj2.env_dur_min(0.1)
	$test_gran_obj2.env_dur_max(0.5)
	$test_gran_obj2.amp(0)
	// $test_gran_obj2.buf("Acc-rit-nois-mes-105-agu.aif")
	// $test_gran_obj2.buf("tamtam+bow1.aif")
	// $test_gran_obj2.buf("cymbals-crash+bow1.aif")
	// $test_gran_obj2.buf("comedien-2.aif")	
	// $test_gran_obj2.buf("Raggi-p3-concat.aif")
	// $test_gran_obj2.amp(5)
	$test_gran_obj1.free(3)	
	$test_gran_obj2.free(3)
	$tracks("gran_track1").mod_remove("FdnReverb")
	$tracks("gran_track2").mod_remove("FdnReverb")

NOTE 60 1 SCMIR

$scmir1 := obj::scmir_analyze_knn("Raggi-p3-concat.aif", [["Tartini"], ["Loudness"], ["SpecCentroid"], ["SpecFlatness"], ["SensoryDissonance"],["MFCC",4]], "onset")

// $scmir1 := obj::scmir_analyze_knn("freeze1+env-decay-percIn-1.aiff", [["Tartini"], ["Loudness"], ["SpecCentroid"], ["SpecFlatness"], ["SensoryDissonance"],["MFCC",4]], "onset")
// $scmir1 := obj::scmir_analyze_knn("freeze1+env-decay-percIn-1.aiff", [["Tartini"], ["Loudness"], ["SpecCentroid"], ["SpecFlatness"], ["SensoryDissonance"],["MFCC",4]], "chop", chop_size = 1)

NOTE 60 1 add_analyze

// $scmir1.add_analyze("Raggi-p3-concat.aif", "onset") // add analize, use the same features analize of main object but can use others segementations
$scmir1.add_analyze("percu-II_roulement_CB-02_court.aif", "chop", chop_size = 1) // add analize, use the same features analize of main object but can use others segementations
$scmir1.add_analyze("cymbals-crash+bow1.aif", "chop", chop_size = 0.5)
$scmir1.add_analyze("armonicos-7-tube+disto+Conformal1-2.aif", "chop", chop_size = 1)
$scmir1.add_analyze("harm-trem-A5-c3-3.aif", "chop", chop_size = 0.2)
$scmir1.add_analyze("freeze1+env-decay-percIn-1.aiff", "onset", onset_thresh = 0.5)


NOTE 60 1 SCMIR_send2oF

// $scmir1.print_analyse()

// $scmir1.map2knn("Tartini", "SpecCentroid", "SpecFlatness", "Loudness", "Tartini") //$x, $y, $z, $radius, $color
$scmir1.map2knn("SpecCentroid", "Tartini", "SpecFlatness", "Loudness", "Tartini", map_pos_y = [0, 1, 1, -1]) //$x, $y, $z, $radius, $color

NOTE 60 1 SCMIR_play

obj::crea_track_HOA("concat_track1", "group_hoa1", fade_in = 0.2, amp = -10, encoder = false)
obj::crea_track_HOA("concat_track2", "group_hoa2", fade_in = 0.2, amp = -10, encoder = false)
obj::crea_track_HOA("concat_track3", "group_hoa3", fade_in = 0.2, amp = -10, encoder = false)
obj::crea_track_HOA("concat_track4", "group_hoa4", fade_in = 0.2, amp = -10, encoder = false)
obj::crea_track_HOA("concat_track5", "group_hoa5", fade_in = 0.2, amp = -10, encoder = false)
obj::crea_track_HOA("concat_track6", "group_hoa6", fade_in = 0.2, amp = -10, encoder = false)

forall $fx in 6
{
	$tracks("concat_track"+($fx+1)).master_vst("FdnReverb")
}
$tracks("concat_track1").gui("FdnReverb")


$scmir1.play_concat_multi1("rond", ["concat_track1", "concat_track2", "concat_track3", "concat_track4", "concat_track5", "concat_track6"])
$scmir1.play_concat_multi2("perc", ["concat_track1", "concat_track2", "concat_track3", "concat_track4", "concat_track5", "concat_track6"])

of_concat3D "clear"

$scmir1.print_analyze()

print (""+$SF_path("cymbals-crash+bow1.aif"))

print (""+$SF_map("server1")("Raggi-p3-concat.aif"))
print (""+$SF_map("server1")("papillon-souffle_fort.aif"))


NOTE 60 1 Rotation_seq0

obj::crea_track_HOA("rota_seq1", "group_hoa1", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)
obj::crea_track_HOA("rota_seq2", "group_hoa2", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)
obj::crea_track_HOA("rota_seq3", "group_hoa3", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)
obj::crea_track_HOA("rota_seq4", "group_hoa4", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)
obj::crea_track_HOA("rota_seq5", "group_hoa5", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)
obj::crea_track_HOA("rota_seq6", "group_hoa6", amp = 3, encoder = false) // track for receive encoded HOA (granulation, etc)

obj::crea_track_HOA("clicks1", "group_hoa2", fade_in = 1, amp = 30, doppler = 0, ["HiNoise_click_ext"])
obj::crea_track_HOA("clicks2", "group_hoa2", fade_in = 1, amp = -6, doppler = 0, ["Clicks_ext"])
obj::crea_track_HOA("snd1", "group_hoa2", fade_in = 1, amp = -16, doppler = 0, ["Snd1_click_ext"])
obj::crea_track_HOA("snd2", "group_hoa2", fade_in = 1, amp = -16, doppler = 0, ["Bass_click_ext"])
obj::crea_track_HOA("snd3", "group_hoa2", fade_in = 1, amp = -16, doppler = 0, ["Rz_click_ext"])
obj::crea_track_HOA("snd4", "group_hoa2", fade_in = 1, amp = -16, doppler = 0, ["Rz_click_ext"])

obj::crea_track_HOA("WaveShaper1_rot0", "group_hoa1", amp = 2, fade_in = 0, doppler = 0, in_channels = "stereo")
obj::crea_track_HOA("WaveShaper2_rot0", "group_hoa1", amp = 2, fade_in = 0, doppler = 0, in_channels = "stereo")
$tracks("WaveShaper1_rot0").ambi_ste_xyz([-0.5, 0.5, 0, 0.5, 0.5, 0])
$tracks("WaveShaper2_rot0").ambi_ste_xyz([-0.5, -0.5, 0, 0.5, -0.5, 0])

$wt_freqs1_rot0 := [8025., 8750., 8650., 8675., 10475.]
$wt_freqs2_rot0 := [10450., 10200., 10725.]
$wt_amps1_rot0 := [-30, -24, -25, -24, -28]
$wt_amps2_rot0 := [-28, -28, -24]

forall $note_idx in @size($wt_freqs1_rot0)
{
	$tracks("WaveShaper1_rot0").mod_add(["Shaper2_no_rel", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $wt_freqs1_rot0[$note_idx].midic2hz(), "amp", $wt_amps1_rot0[$note_idx], "curvemax", 0, "in_ramp", 0])
}

forall $note_idx in @size($wt_freqs2_rot0)
{
	$tracks("WaveShaper2_rot0").mod_add(["Shaper2_no_rel", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $wt_freqs2_rot0[$note_idx].midic2hz(), "amp", $wt_amps2_rot0[$note_idx], "curvemax", 0, "in_ramp", 0])
}

$tracks("WaveShaper1_rot0").amp([2, 10, -20])
$tracks("WaveShaper2_rot0").amp([2, 10, -20])

$tracks("rota_seq1").amp(3)
$tracks("rota_seq2").amp(3)
$tracks("rota_seq3").amp(3)

$tracks("clicks1").amp(0)
$tracks("clicks2").amp(0)
$tracks("snd1").amp(-18)
$tracks("snd2").amp(-12)
$tracks("snd3").amp(-16)

$tracks("clicks1").free(1)
$tracks("clicks2").free(1)
$tracks("snd1").free(1)
$tracks("snd2").free(1)
$tracks("snd3").free(1)
$tracks("snd4").free(1)

print  (""+$tracks("rota_seq1").$hoa_bus)

group rota_seq0
{
		$gran_rand_lfo_rot1 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.05, 0.13, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq1", 1)
	0.3 $gran_rand_lfo_rot2 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.04, 0.12, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq2", 2)
	0.2 $gran_rand_lfo_rot3 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.03, 0.1, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq3", 3)
	//  $gran_rand_lfo_rot4 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.02, 0.095, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq4", 4)
	//  $gran_rand_lfo_rot5 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.015, 0.085, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq5", 5)
	//  $gran_rand_lfo_rot6 := obj::HOA_grain_rot_rand_lfo2("ballets_1-out012.aif", "perc", 0.8, 1.2, 0.01, 0.08, 0.2, 0.3, 0.01, 0.2, 1, 3, 0.6, 0, 10, 360, 10, 60, "linear", 0, -15, "rota_seq6", 6)
}
	
	// probar HOA_grain_rot_rand_lfo2_mod
// @proc_def ::ryth_vect_prob_mod_sin($server_name, $modules, 																										$ryth_tab, 					$ryth_prob, 	$prob, $r_low, $r_hi, $t, $tpo_init)
// $gran_rand_lfo_rot1.tpo(10)
abort $gran_rand_lfo_rot1
abort $gran_rand_lfo_rot2
abort $gran_rand_lfo_rot3
// print toto

group ordre_rot0
{

	$tracks("clicks2").ryth_vect_prob_mod_sin([["Clicks_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 30, 80, 0.2, 60)
	// $tracks("clicks2").ryth_stop()

	$tracks("snd1").ryth_vect_prob_mod_sin([["Snd1_click_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 10, 30, 0.3, 60)
	// $tracks("snd1").ryth_stop()

	$tracks("snd2").ryth_vect_prob_mod_sin([["Bass_click_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 10, 20, 0.2, 60)
	// $tracks("snd2").ryth_stop()
	// $tracks("snd3").ryth_stop()
	$rota0_1_change_rate := 1

	// 3 
	$tracks("snd3").ryth_vect_prob_mod_sin([["Rz_click_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 20, 80, 0.2, 60)
	// $tracks("snd3").set("Rz_click_ext", ["freq", 2000])
	$tracks("snd3").rand_lfo("Rz_click_ext", "freq", 1950, 2050, 2000, "linear", 180)

	$tracks("snd4").ryth_vect_prob_mod_sin([["Rz_click_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 20, 80, 0.2, 60)
	// $tracks("snd4").set("Rz_click_ext", ["freq", 2000])
	$tracks("snd4").rand_lfo("Rz_click_ext", "freq", 1750, 1850, 1800, "linear", 180)

	3 $tracks("clicks1").ryth_vect_prob_mod_sin([["HiNoise_click_ext", "t_trig", 1], ["HOA_Encode", [[1, 0, 0], [0, 1, 1], [-1, 0, 0], [0, -1, 0]], [1, 2, 4, 4]]], [1/16, 1/8, 1/24, 1/12, 1/8], [1, 2, 2, 3, 1], 1, 30, 70, 0.001, 60)
	// $tracks("clicks1").ryth_stop()


}



whenever rota0 ($rota0_change_rate == $rota0_change_rate) // factorize tempo 
{
	$tracks("clicks1").change_proc_mod_sin_r_low_tpo(30*$rota0_change_rate) 
	$tracks("clicks1").change_proc_mod_sin_r_hi_tpo(70*$rota0_change_rate)
	$tracks("clicks2").change_proc_mod_sin_r_low_tpo(30*$rota0_change_rate) 
	$tracks("clicks2").change_proc_mod_sin_r_hi_tpo(80*$rota0_change_rate) 

	$tracks("snd3").change_proc_mod_sin_r_low_tpo(20*$rota0_change_rate)
	$tracks("snd3").change_proc_mod_sin_r_hi_tpo(80*$rota0_change_rate)
	$tracks("snd4").change_proc_mod_sin_r_low_tpo(20*$rota0_change_rate)
	$tracks("snd4").change_proc_mod_sin_r_hi_tpo(80*$rota0_change_rate)	
}

$rota0_1_change_rate := 0

whenever rota0_1 ($rota0_1_change_rate == $rota0_1_change_rate) // factorize tempo 
{
	// $tracks("clicks1").change_proc_mod_sin_r_low_tpo(30*$rota0_change_rate) 
	// $tracks("clicks1").change_proc_mod_sin_r_hi_tpo(70*$rota0_change_rate)

	// $tracks("clicks2").change_proc_mod_sin_r_low_tpo(30*$rota0_change_rate) 
	// $tracks("clicks2").change_proc_mod_sin_r_hi_tpo(80*$rota0_change_rate) 

	$tracks("snd1").change_proc_mod_sin_r_low_tpo(10*$rota0_1_change_rate) // ver como accelerar menos que los otros con un solo control
	$tracks("snd1").change_proc_mod_sin_r_hi_tpo(30*$rota0_1_change_rate)
	
	$tracks("snd2").change_proc_mod_sin_r_low_tpo(10*$rota0_1_change_rate)
	$tracks("snd2").change_proc_mod_sin_r_hi_tpo(20*$rota0_1_change_rate)
	
	// $tracks("snd3").change_proc_mod_sin_r_low_tpo(20*$rota0_change_rate)
	// $tracks("snd3").change_proc_mod_sin_r_hi_tpo(80*$rota0_change_rate)
}

$rota0_2_change_dur := 0.1

whenever rota0_2_dur ($rota0_2_change_dur == $rota0_2_change_dur) // factorize tempo 
{
	$tracks("snd3").set("Rz_click_ext", ["dur", $rota0_2_change_dur])
	$tracks("snd4").set("Rz_click_ext", ["dur", $rota0_2_change_dur])
}



10 whenever rota0_wt_lev ($rota0_wt_lev == $rota0_wt_lev)
{
	print $rota0_wt_lev
	$tracks("WaveShaper1_rot0").amp($rota0_wt_lev)
	$tracks("WaveShaper2_rot0").amp($rota0_wt_lev)
}

$rota0_wt_lev := -20

NOTE 60 1 wavetable_synth

// first create some wavetables with differents shapes 
::create_wavetables("server1", "wavetables_1", 10, 1024)	 // server map_wavetable_map num_WT frames
// verify if the wavetables where successfully created and load into server
print (""+$wavetable)
print (""+$wavetable("server1"))
print (""+$wavetable("server1")("wavetables_1"))

::plotnim($wavetables("wavetables_1")(9)) // plot in sclang need OSC-receiver in SC interface


obj::mix_group("group1", "server1", out_offset = 0)	

obj::crea_track("track1", "group1", fade_in = 5, amp = -10, [["Osc_wt", "buf", $wavetable("server1")("wavetables_1")[0], "freq", 111, "amp", 1]])
	
$tracks("track1").mod_add(["Osc_wt_mono", "buf",$wavetable("server1")("wavetables_1")[0], "freq", 40, "amp", 0.3])
$tracks("track1").set("Osc_wt_mono", ["free", 0, "out_ramp", 3])
$groups("group1").set("Osc_wt_mono", ["free", 0, "out_ramp", 3])
$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+9, "freq", 222, "amp", 0.3, "sus", 1])
$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+8, "freq", 32, "amp", 0.6, "sus", 5])
$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+8, "freq", 1000, "amp", 0.6, "sus", 5])

$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+9, "freq", 100, "amp", 1.6, "atk", 0, "sus", 0, "rel", 0.03, "c1", -7])
$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+2, "freq", 1000, "detune", 100, "amp", 1.6, "atk", 0, "sus", 1/3, "rel", 0.03, "c1", -12])

// Synth(\osc, [\freq, 1000, \buf, 7, \detune, 100, \atk, 0, \sus, 1/3, \rel, 0.03, \c1, -12]) //,\rout, ~rbus]

// $tracks("track1").mod_add(["VOsc", "buf", 9, "freq", 32, "amp", 0.7, "sus", 10])
// $tracks("track1").line_param("VOsc", "offset", 0, 8, 5)

$tracks("track1").line_param("Osc_wt", "freq", 30, 60, 5) 
$tracks("track1").free(5)
$groups("group1").free(1)

$tracks("track1").mod_add(["Osc_wt", "buf",$wavetable("server1")("wavetables_1")[0]+2, "freq", 1000, "detune", 100, "amp", 1.6, "atk", 0, "sus", 1/3, "rel", 0.03, "c1", -12])

NOTE 60 1 wavetable_synth_seq

$wavetables_1_start_buf := $wavetable("server1")("wavetables_1")[0]
$seq_temp1 := 120
loop seq_synth1 1/6 @tempo $seq_temp1
{
	$tracks("track1").mod_add(["Osc_wt", "buf", $wavetables_1_start_buf+@rand_range_int(7, 9), "freq", 100, "detune", 100, "amp", 1.6, "atk", 0, "sus", 0, "rel", 0.01, "c1", -10])
}

loop seq_synth1 1/6 @tempo $seq_temp1
{
	$tracks("track1").mod_add(["Osc_wt", "buf", $wavetables_1_start_buf+@rand_range_int(7, 9), "freq", 1000, "detune", 100, "amp", 1.6, "atk", 0, "sus", 0, "rel", 0.05, "c1", -10])
}

abort seq_synth1



$seq_temp1 := 122
$nim_tempo := NIM { 0 80, 15 200 "sine", 15 80 "linear"}
Curve @grain 0.01 { $seq_temp1 : $nim_tempo}

$seq_count := 0
$seq_modulo := 6
$perc_line :=  NIM{ 0 1, 1 0 "exp_out"}
$rand_exp := @rnd_exponential(1.0)
loop seq_synth2 1/6 @tempo $seq_temp1
{
	@local $buf_sel := 0, $rel := 0.01

	if($seq_count==0)
	{
		$buf_sel := $wavetables_1_start_buf+@rand_range_int(7, 9)
		$rel := @scale($rand_exp(), 0, $pi*2, 0.01, 0.1, 1)
		$seq_modulo := @rand_range_int(3, 25)
		$seq_temp1 := @rand_range(80, 166)
		// print buffer $buf_sel
		print rel $rel

	}
	// print $seq_count
	// print amp ($perc_line($seq_count*1/6))
	$tracks("track1").mod_add(["Osc_wt", "buf", $buf_sel, "freq", 100, "detune", 100, "amp", @linlin($perc_line($seq_count*1/6), 0, 1, 0.2, 0.6), "atk", 0, "sus", 0, "rel", $rel, "c1", -10])
	$tracks("track1").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), 0])

	$seq_count := ($seq_count + 1) % $seq_modulo
}

abort seq_synth2


// HOA
::create_wavetables("server1", "wavetables_1", 10, 1024)	 // server map_wavetable_map num_WT frames

obj::crea_track_HOA("Osc_seq1", "group_hoa1", encoder = false) // track for receive encoded HOA (granulation, etc)
$tracks("Osc_seq1").amp([0, 10, 10])
$tracks("Osc_seq1").amp([-10, 10, -120])

$hoa_bus := $tracks("Osc_seq1").$bus // retrieve HOA bus
$order := $tracks("Osc_seq1").$order // retrieve HOA order
$lpf_freq := 70

$perc_line :=  NIM{ 0 1, 1 0 "exp_out"}

$wavetables_1_start_buf := $wavetable("server1")("wavetables_1")[0]
$seq_temp_in := 122
$seq_temp_out := 122

$seq_count := 0
$seq_modulo := 6

$rand_exp := @rnd_exponential(1.0)
$curve := 0
loop seq_synth2 1/6 @tempo $seq_temp1
{
	@local $buf_sel := 0, $rel := 0.01

	if($seq_count==0)
	{
		$buf_sel := $wavetables_1_start_buf+@rand_range_int(7, 9)
		$rel := @scale($rand_exp(), 0, $pi*2, 0.006, 0.02, 1)
		// print $rel
		$seq_modulo := @rand_range_int(3, 25)
		$seq_temp_in := @rand_range(280, 766) // @rand_range(80, 166)
		$seq_temp_out := @rand_range(280, 766) // @rand_range(80, 166)
		$nim_tempo := NIM { 0 $seq_temp_in, (1/6*$seq_modulo) $seq_temp_out "sine"}
		abort $curve
		$curve := {
			Curve @grain 0.01 { $seq_temp1 : $nim_tempo}
		}
		// print nim_tempo (""+$nim_tempo)
		// print rel $rel

	}
	// print $seq_count
	// print amp ($perc_line($seq_count*1/6))
	$tracks("Osc_seq1").mod_add([["Osc_wt_HOA"+$order, "buf", $buf_sel, "freq", 100, "detune", 100, "amp", @linlin($perc_line($seq_count*1/6), 0, 1, 0.3, 0.7), "atk", 0, "sus", 0, "rel", $rel, "c1", -10, "doneAction", 2, "globTBus", $hoa_bus, "x", @rand_range(-1, 1), "y", @rand_range(-1, 1), "z", @rand_range(-1, 1), "lpf_freq", $lpf_freq]])
	$seq_count := ($seq_count + 1) % $seq_modulo
}

abort seq_synth2

::plotnim($perc_line)



// HOA
::create_wavetables("server1", "wavetables_1", 10, 1024)	 // server map_wavetable_map num_WT frames

obj::crea_track_HOA("Osc_seq1", "group_hoa1", encoder = false) // track for receive encoded HOA (granulation, etc)
$tracks("Osc_seq1").amp([0, 10, 10])
$tracks("Osc_seq1").amp([-10, 10, -120])
$tracks("Osc_seq1").amp(0)

$hoa_bus := $tracks("Osc_seq1").$bus // retrieve HOA bus
$order := $tracks("Osc_seq1").$order // retrieve HOA order
$lpf_freq := 20

$perc_line :=  NIM{ 0 1, 1 0 "exp_out"}

$wavetables_1_start_buf := $wavetable("server1")("wavetables_1")[0]
$seq_temp_in := 122
$seq_temp_out := 122

$seq_count := 0
$seq_modulo := 6

$rand_exp := @rnd_exponential(1.0)
$curve := 0
loop seq_synth3 1/6 @tempo $seq_temp1
{
	@local $buf_sel := 0, $rel := 0.01

	if($seq_count==0)
	{
		$buf_sel := $wavetables_1_start_buf // +@rand_range_int(0, 1)
		// $rel := @scale($rand_exp(), 0, $pi*2, 0.006, 0.02, 1)
		// print $rel
		$rel := 0.3
		$seq_modulo := @rand_range_int(3, 25)
		$seq_temp_in := @rand_range(60, 120) // @rand_range(80, 166)
		$seq_temp_out := @rand_range(60, 120) // @rand_range(80, 166)
		$nim_tempo := NIM { 0 $seq_temp_in, (1/6*$seq_modulo) $seq_temp_out "sine"}
		abort $curve
		$curve := {
			Curve @grain 0.01 { $seq_temp1 : $nim_tempo}
		}
		// print nim_tempo (""+$nim_tempo)
		// print rel $rel

	}
	// print $seq_count
	// print amp ($perc_line($seq_count*1/6))
	// amp @linlin($perc_line($seq_count*1/6), 0, 1, 0.3, 0.7)
	$tracks("Osc_seq1").mod_add([["Osc_wt_HOA"+$order, "buf", $buf_sel, "freq", 40, "detune", 0.1, "amp", -20, "atk", 0.1, "sus", 0.5, "rel", 0.1, "c1", -10, "doneAction", 2, "globTBus", $hoa_bus, "x", @rand_range(-1, 1), "y", @rand_range(-1, 1), "z", @rand_range(-1, 1), "lpf_freq", $lpf_freq]])
	$seq_count := ($seq_count + 1) % $seq_modulo
}

abort seq_synth3

print $wavetables_1_start_buf

NOTE 60 1 wavetable_synth_VOsc

$wavetables_1_start_buf := $wavetable("server1")("wavetables_1")[0]
$wavetables_1_start_buf_num := $wavetable("server1")("wavetables_1")[1]

obj::mix_group("group2", "server1")

obj::crea_track("track2", "group2", fade_in = 5, amp = -10, [["VOsc_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 111, "amp", 1]])

$tracks("track2").mod_add(["VOsc_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 30, "amp", 0.8, "sus", 20])
$tracks("track2").mod_add(["VOsc_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 600, "amp", 0.8, "sus", 20])
$tracks("track2").mod_add(["VOsc_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 2000, "amp", 0.8, "sus", 20])
$tracks("track2").mod_add(["VOsc_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 3000, "amp", 0.8, "sus", 20])


NOTE 60 1 wavetable_synth_VOsc3

obj::mix_group("group3", "server1")

obj::crea_track("track4", "group3", fade_in = 5, amp = -10, [["VOsc3_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 111, "amp", 1]])

$tracks("track4").mod_add(["VOsc3_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 300, "amp", 0.8, "sus", 20])

$tracks("track4").mod_add(["VOsc3_wt", "buf", $wavetables_1_start_buf, "numBufs", $wavetables_1_start_buf_num, "freq", 33, "amp", 0.8, "sus", 20])


NOTE 60 1 wavetable_synth_VOsc3_sin1_Gen

group fill_sine_wavetables1 // wt_sin1_1, wt_sin1_2, ...
{
	@local $i := 0, $n, $a

	$waveGen_wt_sin_num := 8 // global variable

	forall $x in $waveGen_wt_sin_num
	{
		$n := @pow(($i+1), 2)

		$a := [ @pow(($n-$y)/$n, 2) | $y in $n ] // create table with amplitudes
		print (""+$a)
		::wave_gen("server1", "sine1", "wt_sin1_"+$i, $a) 
		$i += 1

	}	
}

print buffer_id ($WaveGen_buf("wt_sin1_1"))

$waveGen_wt_sin_start_buf := $WaveGen_buf("wt_sin1_1")

obj::mix_group("group3_1", "server1")
obj::crea_track("track4", "group3_1", fade_in = 5, amp = -10)

$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 300, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 40, "amp", 0.8, "sus", 20])

// "balayage harmoniques"

group fill_sine_wavetables2 // wt_sin2_1, wt_sin2_2, ...
{
	@local $i := 0, $a

	$waveGen_wt_sin_num := 8 // global variable

	forall $x in $waveGen_wt_sin_num
	{
		$a := [ 0 | $y in $x ].concat([0.5, 1, 0.5]) // create "balayage harmoniques"
		print (""+$a)
		::wave_gen("server1", "sine1", "wt_sin2_"+$i, $a) 
		$i += 1

	}	
}

$waveGen_wt2_sin_start_buf := $WaveGen_buf("wt_sin2_1")

$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt2_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 100, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt2_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 40, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt2_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 50, "amp", 0.8, "sus", 20])

group fill_sine_wavetables3 // wt_sin3_1, wt_sin3_2, ...
{
	@local $i := 0, $n, $a

	$waveGen_wt_sin_num := 8 // global variable

	forall $x in $waveGen_wt_sin_num
	{
		$n := ($i+1)*$waveGen_wt_sin_num

		$a := @rand_int_vect($n, 2) // create random amplitudes (0 or 1)
		print (""+$a)
		::wave_gen("server1", "sine1", "wt_sin3_"+$i, $a) 
		$i += 1

	}	
}

$waveGen_wt3_sin_start_buf := $WaveGen_buf("wt_sin3_1")

$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt3_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 100, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt3_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 40, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt3_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 50, "amp", 0.8, "sus", 20])


group fill_sine_wavetables4 // wt_sin1_1, wt_sin1_2, ...
{
	@local $i := 0, $n, $a

	$waveGen_wt_sin_num := 8 // global variable

	forall $x in $waveGen_wt_sin_num
	{
		$n := @pow(($i+1), 2)

		$a := @rand_vect($n, -1, 1) // create rand table between 0-1
		print (""+$a)
		::wave_gen("server1", "sine1", "wt_sin4_"+$i, $a) 
		$i += 1

	}	
}

$waveGen_wt4_sin_start_buf := $WaveGen_buf("wt_sin3_1")

$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt4_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 100, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt4_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 40, "amp", 0.8, "sus", 20])
$tracks("track4").mod_add(["VOsc3_wt", "buf", $waveGen_wt4_sin_start_buf, "numBufs", $waveGen_wt_sin_num-1, "freq", 50, "amp", 0.8, "sus", 20])




NOTE 60 1 waveshaping_synth

// create a waveshaping buffer
$tab_sin := [ @sin(@scale($x, 0, 1025, (-1*$pi/2), ($pi/2), 1)) | $x in (1025) ] // create tab	
$tab_sin_2 := []
forall $x in $tab_sin
{
	@local $x_new
	$x_new := (@cos(@scale($x, -1, 1, 0, $pi*50, 1)*0.08) / 4) + 0.3
	$tab_sin_2.push_back($x*$x_new)
}
$tab_sin_2 := @normalize($tab_sin_2, -1, 1) // normalize signal between -1 and 1

// print (""+$tab_sin_2)
// send result to sc server buffer
::asWavetableNoWrapTab("server1", "wt_shaper1", $tab_sin_2) // "wt_shaper1" name in dictionary to store the buffer ID

print buffer_id ($WavetableNoWrapTab("wt_shaper1"))

obj::mix_group("group4", "server1")
obj::mix_group("group4_ste", "server1", 2) // stereo track

obj::crea_track("track5", "group4", fade_in = 5, amp = -10, [["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 111, "amp", 1]])
obj::crea_track("track5_ste", "group4_ste", fade_in = 5, amp = -10, [["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 111, "amp", 1]])
$tracks("track5_ste").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 40, "amp", -3, "sus", 10, "curvemax", 0])

$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 40, "amp", -3, "sus", 60, "curvemax", 0])
$tracks("track5").mod_add(["TAddic_15_8"])
$tracks("track5").free(1)
$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 40, "amp", -3, "sus", 66, "curvemax", 0])
$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 50, "amp", -3, "sus", 10, "curvemax", 0])
$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", 150, "amp", 1, "sus", 10])

loop drone0 7
{	
	$number_notes := 20
	$rand_note := [ @rand_range_int(5, 120) + (@rand_int(4) * 0.25) | $x in ($number_notes)] * 100 // * 100 -> midicents
	print $rand_note
	forall $note in $rand_note
	{
		$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $note.midic2hz(), "amp", @rand_range_int(-20, -10), "sus", 1, "curvemax", 0])
	}
}

loop drone0 7
{	
	$number_notes := 9
	$rand_note := [ @rand_range_int(28, 100) + (@rand_int(4) * 0.25) | $x in ($number_notes)] * 100 // * 100 -> midicents
	$rand_note.push_front(1600)
	print $rand_note
	forall $note in $rand_note
	{
		$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $note.midic2hz(), "amp", @rand_range_int(-20, -10), "sus", 1, "curvemax", 0])
	}
}

loop drone0 40
{	
	$number_notes := 20
	$rand_note := [ @rand_range_int(5, 20) + (@rand_int(4) * 0.25) | $x in ($number_notes)] * 100 // * 100 -> midicents
	print $rand_note
	forall $note in $rand_note
	{
		$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $note.midic2hz(), "amp", @rand_range_int(-20, -10), "sus", 20, "curvemax", 0])
	}
}

// print: 5425. 6575. 5600. 5575. 4450. 6875. 3975. 5975. 1625. 500. 925. 5825. 2500. 3500. 725. 2250. 3975. 1800. 4400. 4450.
// print: 2725. 5375. 2925. 1425. 3250. 2825. 6275. 6725. 4900. 5725. 2275. 4850. 3425. 2550. 4200. 4225. 6750. 1475. 3025. 5400.

$rand_note := [5425., 6575., 5600., 5575., 4450., 6875., 3975., 5975., 1625., 500., 925., 5825., 2500., 3500., 725., 2250., 3975., 1800., 4400., 4450.]
forall $note in $rand_note
{
	$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $note.midic2hz(), "amp", @rand_range_int(-20, -10), "sus", 20, "curvemax", 0])
}

abort drone0

loop drone1 9
{
	$rand_note := [ @rand_range(20, 40) | $x in (6)] * 100 // * 100 -> midicents
	forall $note in $rand_note
	{
		$tracks("track5").mod_add(["Shaper2", "buf", $WavetableNoWrapTab("wt_shaper1"), "freq", $note.midic2hz(), "amp", @rand_range_int(-20, -10), "sus", 10, "curvemax", 0])
	}
}

abort drone1

print (! false )

NOTE 60 1 waveshaping_HOA

// HOA
// create a waveshaping buffer
$tab_sin := [ @sin(@scale($x, 0, 1025, (-1*$pi/2), ($pi/2), 1)) | $x in (1025) ] // create tab	
$tab_sin_2 := []
forall $x in $tab_sin
{
	@local $x_new
	$x_new := (@cos(@scale($x, -1, 1, 0, $pi*50, 1)*0.08) / 4) + 0.3
	$tab_sin_2.push_back($x*$x_new)
}
$tab_sin_2 := @normalize($tab_sin_2, -1, 1) // normalize signal between -1 and 1

// print (""+$tab_sin_2)
// send result to sc server buffer
::asWavetableNoWrapTab("server1", "wt_shaper1", $tab_sin_2) // "wt_shaper1" name in dictionary to store the buffer ID

print buffer_id ($WavetableNoWrapTab("wt_shaper1"))

obj::crea_track_HOA("Shaper_seq1", "group_hoa1", encoder = false) // track for receive encoded HOA (granulation, etc)
$tracks("Shaper_seq1").amp([0, 10, 10])
$tracks("Shaper_seq1").amp([-10, 10, -120])
$tracks("Shaper_seq1").amp(-10)
$tracks("Shaper_seq1").free(1)


$hoa_bus := $tracks("Shaper_seq1").$bus // retrieve HOA bus
$order := $tracks("Shaper_seq1").$order // retrieve HOA order
$lpf_freq := 5

$seq_temp1 := 122
$perc_line :=  NIM{ 0 1, 1 0 "exp_out"}

$buf_sel := $WavetableNoWrapTab("wt_shaper1")
$seq_temp_in := 122
$seq_temp_out := 122

$seq_count := 0
$seq_modulo := 6

$rand_exp := @rnd_exponential(1.0)
$curve := 0
loop seq_synth4 1/6 @tempo $seq_temp1
{
	@local $rel := 0.01, $freq1 := 40

	if($seq_count==0)
	{
		// $buf_sel := $wavetables_1_start_buf // +@rand_range_int(0, 1)
		// $rel := @scale($rand_exp(), 0, $pi*2, 0.006, 0.02, 1)
		// print $rel
		$rel := 0.3
		$seq_modulo := @rand_range_int(3, 25)
		$seq_temp_in := @rand_range(150, 200) // @rand_range(80, 166)
		$seq_temp_out := @rand_range(150, 200) // @rand_range(80, 166)
		$nim_tempo := NIM { 0 $seq_temp_in, (1/6*$seq_modulo) $seq_temp_out "sine"}
		abort $curve
		$curve := {
			Curve @grain 0.01 { $seq_temp1 : $nim_tempo}
		}
		// print nim_tempo (""+$nim_tempo)
		// print rel $rel

	}
	$freq1 := @choose([@rand_range(38, 42)+20, @rand_range(38, 42)+10, @rand_range(38, 42)])
	// print $seq_count
	// print amp ($perc_line($seq_count*1/6))
	// amp @linlin($perc_line($seq_count*1/6), 0, 1, 0.3, 0.7)
	$tracks("Shaper_seq1").mod_add([["Shaper2_HOA"+$order, "buf", $buf_sel, "freq", $freq1, "amp", -30, "atk", 0.1, "sus", 1/6, "rel", 0.1, "c1", -10, "doneAction", 2, "globTBus", $hoa_bus, "x", @rand_range(-1, 1), "y", @rand_range(-1, 1), "z", @rand_range(-1, 1), "lpf_freq", $lpf_freq, "curvemax", 0]])
	$seq_count := ($seq_count + 1) % $seq_modulo
}


abort seq_synth4


$hoa_bus := $tracks("Shaper_seq1").$bus // retrieve HOA bus
$order := $tracks("Shaper_seq1").$order // retrieve HOA order
$lpf_freq := 5

$period_rythm := 1/6
$buf_sel := $WavetableNoWrapTab("wt_shaper1")

$seq_count := 0
$seq_modulo := 6
$seq_temp2 := 600
$freq_base := 100
$rel := 0.3
$amp := -40

loop seq_synth4 $period_rythm @tempo $seq_temp2
{
	@local $freq1

	if($seq_count==0)
	{
		// $buf_sel := $wavetables_1_start_buf // +@rand_range_int(0, 1)
		// $rel := @scale($rand_exp(), 0, $pi*2, 0.006, 0.02, 1)
		// print $rel
		$period_rythm := @rand_range(1/2, 1/8)
		$seq_modulo := @rand_range_int(1, 10)
	}
	$freq1 := @choose([$freq_base, @rand_range(-1, 1)+$freq_base, @rand_range(-3, 3)+$freq_base])

	$tracks("Shaper_seq1").mod_add([["Shaper2_HOA"+$order, "buf", $buf_sel, "freq", $freq1, "amp", $amp, "atk", 0.001, "sus", 0, "rel", $rel, "c1", -10, "doneAction", 2, "globTBus", $hoa_bus, "x", @choose([-1, 1]) ,"y", 0, "lpf_freq", $lpf_freq, "curvemax", 0]])
	$seq_count := ($seq_count + 1) % $seq_modulo

}


abort seq_synth4



NOTE 60 1 waveshaping_synth_cheby_Gen

// send "cheby" buffer generator to the server

//wave_gen($server_name, $sig_generator, $wavetable_name, $amps)
::wave_gen("server1", "cheby", "wt_cheby1", [0.5]) 

print buffer_id ($WaveGen_buf("wt_cheby1"))

obj::mix_group("group4", "server1")
obj::crea_track("track5", "group4", fade_in = 5, amp = -10, [["Shaper2", "buf", $WaveGen_buf("wt_cheby1"), "freq", 111, "amp", 1]])
$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby1"), "freq", 30, "amp", 1, "sus", 10, "curvemax", 0])

::wave_gen("server1", "cheby", "wt_cheby2", [0, 1, 0, 0, 0, 1]) 

$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby2"), "freq", 30, "amp", 0, "sus", 10])
$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby2"), "freq", 40, "amp", 0, "sus", 10])

::wave_gen("server1", "cheby", "wt_cheby3", [0.32,0,0.05,1,0,0.75,0]) 
::wave_gen("server1", "cheby", "wt_cheby4", [0.75,0,0.32,0,0.1,0]) 
::wave_gen("server1", "cheby", "wt_cheby5", [1,0.2,0.5,0,0,0.1,0.3,0.7,0.5]) 


::wave_gen("server1", "cheby", "wt_cheby_rand3", @rand_vect(10, 0, 1)) 

$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand3"), "freq", 100, "amp", 0, "sus", 10])

::wave_gen("server1", "cheby", "wt_cheby_rand4", @rand_int_vect(20, 2)) 

$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand4"), "freq", 40, "amp", 0, "sus", 10])
$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand4"), "freq", 30, "amp", 0, "sus", 10])

::wave_gen("server1", "cheby", "wt_cheby_rand5", @rand_int_vect(30, 2)) 

$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand5"), "freq", 30, "amp", -3, "sus", 10, "curvemax", 0])
$tracks("track5").mod_add(["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand5"), "freq", 33, "amp", -3, "sus", 10, "curvemax", 0])

obj::crea_track("track6", "group4", fade_in = 5, amp = -10)

$tracks("track5").mod_add([["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand5"), "freq", 36, "amp", -3, "sus", 20, "curvemax", 0], ["TGranIn", "trigRate", 15, "trigRateDev", 100, "dur", 0.2, "durDev", 0.0, "pan", 0.0, "envbuf", $envs("server1")("perc")]])
$tracks("track5").mod_add([["Shaper2", "buf", $WaveGen_buf("wt_cheby_rand5"), "freq", 43, "amp", -3, "sus", 20, "curvemax", 0], ["TGranIn", "trigRate", 15, "trigRateDev", 100, "dur", 0.2, "durDev", 0.0, "pan", 0.0, "envbuf", $envs("server1")("perc")]])


$tracks("track5").free(1)

NOTE 60 1 mono2hoa_pan


::create_wavetables("server1", "wavetables_1", 10, 1024)	 // server map_wavetable_map num_WT frames
// verify if the wavetables where successfully created and load into server
print (""+$wavetable)
print (""+$wavetable("server1"))
print (""+$wavetable("server1")("wavetables_1"))

::plotnim($wavetables("wavetables_1")(9)) // plot in sclang need OSC-receiver in SC interface


obj::crea_track_HOA("group_hoa", "group_hoa1") // track for receive encoded HOA (granulation, etc)
$tracks("group_hoa").amp(-10)
$tracks("group_hoa").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), 0])
$tracks("group_hoa").free(0.1)
// mix_group($group_name, $server_name, $num_channels = 8, $out_offset = 0, $pan = false, $destination0 = <undef>, $destination1 = <undef>)

obj::mix_group("group_pan_to", "server1", 1, 20, pan = true,  destination = "group_hoa") // pan HOA -> mono

// crea_track($track_name, $mix_group, $synth_collection = [], $fade_in = 1, $amp = 0, $num_inputs = 1) // recuperar el nombre de la variable

obj::crea_track("track1", "group_pan_to", fade_in = 1, amp = -10, [["Osc_wt", "buf", $wavetable("server1")("wavetables_1")[0], "freq", 111, "amp", 1]])

print (""+$tracks("group_hoa").$bus) //.insert("main_bus", $bus)
print (""+$tracks("group_hoa").$bus) //.insert("main_bus", $bus)

	
$tracks("track1").mod_add(["Osc_wt_mono", "buf",$wavetable("server1")("wavetables_1")[0], "freq", 40, "amp", -10, "sus", 20])
$tracks("track1").set("Osc_wt_mono", ["free", 0, "out_ramp", 3])
$groups("group1").set("Osc_wt_mono", ["free", 0, "out_ramp", 3])

$tracks("track1").amp(-6)
$groups("group_pan_to").pan(1)
$groups("group_pan_to").pan([-1, 5, -1, 10, 1, 5, 1])
$groups("group_pan_to").free(0.1)

NOTE 60 1 stereo2hoa_pan

// 1 create an HOA track into an HOA Group in this case "group_hoa1"
obj::crea_track_HOA("Warbulence1", "group_hoa1", amp = 0, fade_in = 4, doppler = 0, in_channels = "stereo")
$tracks("Warbulence1").ambi_ste_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), 0, @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), 0])
$tracks("Warbulence1").amp(6)
$tracks("Warbulence1").ambi_x(-1)
$tracks("Warbulence1").ambi_x([1, 10, -1, 5, 3])
$tracks("Warbulence1").ambi_y([-1, 10, 1, 5, -3])
$tracks("Warbulence1").ambi_x([1, 10, -1, 5, 3], 1)
$tracks("Warbulence1").ambi_y([-1, 10, 1, 5, -3], 1)
$tracks("Warbulence1").ambi_x(5, 1)
$tracks("Warbulence1").free(1)

//2 create a mix_group with pan = true and second destination output in this case destination = "Warbulence1"
obj::mix_group("group_pan_to_stereo", "localhost", 2, 20, pan = true,  destination = "Warbulence1") // pan HOA -> Stereo
obj::crea_track("track_pan1", "group_pan_to_stereo", fade_in = 1, amp = -10, [["Warbulence", "in_ramp", 10, "freq", 200]])
$tracks("track_pan1").amp(0)
$tracks("track_pan1").free(0)
$groups("group_pan_to_stereo").pan([-1, 5, -1, 10, 1, 5, 1])
$groups("group_pan_to_stereo").free(0.1)

NOTE 60 1 distortions

// CrossoverDistortion, Decimator, SmoothDecimator, SineShaper

NOTE 60 1 test_audio_input

obj::mix_group("audio_in", "localhost")

obj::crea_track8s("track_audio_in", 0, 1, 0, [["AudioInput", "input", 0, "amp", 0], ["TVDBDel", "del", 0.89399999380112, "wind_steep", 0.00050000002374873, "fbk", 0.28099998831749, "amp", 0.0]], "audio_in")

NOTE 60 1 groups_tracks_migration

// Migration d'un track ou group vers autres serveurs

obj::mix_group("group1_1", "localhost")
obj::mix_group("group2_1", "localhost")
obj::mix_group("group3_1", "localhost")

obj::crea_track8s("sc_track1_1", "group1_1", fade_in = 5, amp = -40, [["TestSynth3", "freq", 111, "amp", 1]])
obj::crea_track8s("sc_track1_2", "group1_1", fade_in = 5, amp = -40, [["TestSynth3", "freq", 111, "amp", 1]])
obj::crea_track8s("sc_track1_3", "group1_1", fade_in = 5, amp = -40, [["TestSynth3", "freq", 111, "amp", 1]])
_ := $tracks("sc_track1_3").mod_add(["TRingMod1", "modfreq", 164.4, "ampmod", 0, "lpfilt", 3822.5, "hpfilt", 50, "amp", -2.6])

obj::crea_track8s("sc_track2_1", 0, 1, 0, [["BassSynth1", "freq", 35.9, "fmrange", 1.5, "fmfreq", 7.85, "lpf", 214., "hpf", 51.2, "rq", 0.35, "amp", -10], ["TPan8", "pos", 0., "width", 2, "lag", 0, "amp", 0]], "group2_1")
_ := $tracks("sc_track2_1").mod_add(["TRingMod1", "modfreq", 164.4, "ampmod", 0, "lpfilt", 3822.5, "hpfilt", 50, "amp", -2.6], "after" , "TPan8")
_ := $tracks("sc_track2_1").mod_add(["TFlanger", "flangefreq", 1.822], "after", "TRingMod1")

obj::crea_track8s("sc_track3_1", 0, 1, 0, [["AudioInput", "input", 0, "amp", 0], ["TVDBDel", "del", 0.89399999380112, "wind_steep", 0.00050000002374873, "fbk", 0.28099998831749, "amp", 0.0]], "group3_1")


_ := @savevalue("/Users/fernandez/Documents/Doctorado/sc_struct3.asco.txt", $sc_struct) //.listify)

print (""+$sc_struct)
// migration to another group (in the same or another server)
// puedes servir dentro de un mismo group pour ejemplo para cambiar los FX pasando de un track a otro

_ := $tracks("sc_track1").migrate("group2_1")

// migration to another server of the entire group
_ := $groups("group1_s3").migrate("server2")


print toto
$sc_struct2 := @loadvalue("/Users/josephfernandez/Documents/Doctorado/sc_struct_build2.asco.txt")
@sc_build_map($sc_struct2, "default_group", "localhost")


$sc_struct3 := @loadvalue("/Users/fernandez/Documents/Doctorado/sc_struct3.asco.txt")
@sc_build_map2server($sc_struct, "group2_1", "server2")
@sc_build_map2server($sc_struct3, "group3", "server2")
@sc_build_map2server($sc_struct3, "group2", "localhost")

@sc_build_map($sc_struct2, "default_group", "localhost")

@sc_build_map($sc_struct2, "group2", "localhost")


@sc_build_map($sc_struct2, "group2", "server2")


@sc_struct_build($sc_struct2, "default_group", "localhost")
@sc_struct_build($sc_struct2, "group1", "localhost")	



$sc_struct2 := @loadvalue("/Users/fernandez/Documents/Doctorado/sc_struct.asco.txt")

print (""+$sc_struct2)	

@sc_struct_build_id($sc_struct2, 1, "localhost")



print (@is_defined(map{ ("zero", 30), ("null", 1), ("void", 2) }, "zero"))


NOTE 60 1 JSON_preset

obj::mix_group("group4", "localhost")

$file := "/Users/fernandez/Library/Application\ Support/SuperCollider/TSupport/fxPresets/TAddic_15_8.json"
$json_file := @json_read($file)

print ($json_file("TAddic_15_8")("cp_1").post())

obj::crea_track8s("sc_track1", 0, 5, 0, [["TestSynth3", "preset", "titi"], ["TAdCVerb", "revTime", 0.1]], "group4")

// _ := $tracks("sc_track1").off_track(1)

/// JSON_preset_change

$tracks("sc_track1").preset("TestSynth3", "preset2")
$tracks("sc_track1").preset("TestSynth3", "preset3")

/// JSON_preset_interpolation

$tracks("sc_track1").preset_interpol("TestSynth3", "test2", "titi", 4, "exp")
$tracks("sc_track1").preset_interpol("TestSynth3", "tete", "test2", 3.3, "exp_in")

/// JSON_preset_interpolation-TAB

group preset_interpol @tempo := 10
{
	$tracks("sc_track1").preset_interpol_tab("TestSynth3", ["titi", 1, "test2", 2, "exp", "tete", 1.4, "cubic", "test2", 2, "preset1", 1, "quart", "preset2", 2.6, "quint", "preset3"])
}

$groups("group4").free(1)


NOTE 60 1 JSON_preset_list_interpolation

obj::mix_group("group1", "localhost")
obj::crea_track("track_intro1", "group1", fade_in = 7, amp = -6, ["Warbulence_mod_dev_mono", "preset", "nota2"])

obj::crea_track("sc_track2", "group1", [["TAddic_15_8", "preset", "interp3"]])

$tracks("sc_track2").preset("TAddic_15_8", "freqs1")

$tracks("sc_track2").preset_single("TAddic_15_8", 0, "freqs1")

$tracks("sc_track2").preset_single("TAddic_15_8", 0, "interp3")
$tracks("sc_track2").gui()

$tracks("sc_track2").preset_interpol("TAddic_15_8", "freqs1", "interp3", 3, "linear")


$tracks("sc_track2").pause(1)
$tracks("sc_track2").resume(1)

$groups("group1").free(1)


// NOTE 60 1 JSON_preset_vector_interpolation_boules2

// obj::mix_group_HOA("group_hoa1", "localhost", "octo", 3)

// obj::crea_track_HOA("sc_track1", 0, 5, -6, [["TAddic_15_8", "preset", "interp3"], ["TAdCVerb8", "revTime", 0.5]], "group_hoa1")

// //	@proc_def preset_interpol_vector($module, $preset_list) // interpol par boule

// $tracks("sc_track1").preset_interpol_vector("TAddic_15_8", ["freqs1", "freqs2", "test1", "test2"])

// // _ := $sc_track1.off_track(1)

NOTE 60 1 XML_Vezer-Editeur_Curves

// Vezer Folder
$vezer_folder := "/Users/fernandez/Documents/Doctorado/Antescollider/xml-vezer/"
$xml_file := @xml_read($vezer_folder+"/2-tracks-xml-p1-1.xml")
$xml_file1 := @xml_read($vezer_folder+"1-track.xml")
$xml_file5 := @xml_read($vezer_folder+"5-tracks-xml.xml")
$xml_file6 := @xml_read($vezer_folder+"titi.xml")

$curve_vezer := ::vezerxml2nim($xml_file1, "curve1")
::plotnim($vezer_curves("curve1"))

::vezerxml2nim($xml_file, "curve2")
::plotnim($vezer_curves("curve2"))

::vezerxml2nim($xml_file5, "curve5")
::plotnim($vezer_curves("curve5"))

::vezerxml2nim($xml_file6, "curve6")
::plotnim($vezer_curves("curve6"))
::play_vezer_nim("print", "curve6")

// ::play_vezer_nim("muticurve", "curve1")
// ::play_vezer_nim("muticurve", "curve2")
::play_vezer_nim("print", "curve5")


::nim2buffer($vezer_curves("curve1"))
0.1 ::nim2buffer($vezer_curves("curve5"))



NOTE 60 1 load_samples_localhost

::load_samples_folder() // load folder content into $SF_folder MAP
::load_samples("localhost") // load all samples from the "/Users/fernandez/Library/Application\ Support/SuperCollider/sounds/" folder
::load_samples("server2")
::load_samples("server3")

print (""+$SF_folder("Taygeta_guiro_1"))

print (""+$SF_map("localhost")("1-lesombres.aif"))
// ::load_samples("server3")

// $SF_dir_CP_hang := $SF_dir("CP-hang").range()

// $SF_dir_grat_moneda3 := $SF_dir("grat-moneda3").range()

// print $SF_dir_CP_hang




NOTE 60 1 play_buffer_CP-hang

// obj::mix_group("group5", "localhost")
// obj::mix_group("group5_s2", "server2")

// obj::crea_track8s("sc_group_play_samp", 0, 1, 0, [], "group5")
// obj::crea_track8s("sc_group_play_samp2", 0, 1, 0, [], "group5_s2")

// obj::mix_group_HOA("group_hoa1", "localhost", "sat", 4)
// obj::mix_group_HOA("group_hoa2", "server2", "sat", 4)
// obj::mix_group_HOA("group_hoa3", "server3", "sat", 4)
// obj::mix_group_HOA("group_hoa4", "server4", "sat", 4)
// obj::mix_group_HOA("group_hoa5", "server5", "sat", 4)
// obj::mix_group_HOA("group_hoa6", "server6", "sat", 4)


obj::mix_group_HOA("group_hoa1", "localhost", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer
obj::mix_group_HOA("group_hoa2", "server2", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer
obj::mix_group_HOA("group_hoa3", "server3", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer
obj::mix_group_HOA("group_hoa4", "server4", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer
obj::mix_group_HOA("group_hoa5", "server5", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer
obj::mix_group_HOA("group_hoa6", "server6", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer


obj::crea_track_HOA("sample1", "group_hoa1", fade_in = 5, amp = 0, doppler = 0)
obj::crea_track_HOA("sample2", "group_hoa1", fade_in = 5, amp = 0, doppler = 0)


// // $sc_group_play_samp := obj::crea_track_Ambi(0, 1, 0, [], "group_ambi1")

// $tracks("sc_group_play_samp").mod_add(["play_buf2", "buf", $SF_map("localhost")("1-lesombres.aif"), "amp", 0], "top")
// $tracks("sc_group_play_samp2").mod_add(["play_buf2", "buf", $SF_map("server2")("1-lesombres.aif"), "amp", 0], "top")
// $tracks("sample1").mod_add(["play_buf2", "buf", 20, "amp", 0])
// ($sample, $ampli, $loop)
$tracks("sample1").play_sample("1-lesombres.aif", 0, 0)
$tracks("sample1").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])


$tracks("sample1").play_sample($SF_folder("grattage_unghie_p0").choose(), 0)
$tracks("sample1").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])


// $tracks("sample1").play_sample_stop($SF_folder("grattage_unghie_p0"))
// $tracks("sample1").free(1)

loop sf_loop1 @rand_range(0.01, 0.08)
{
	$tracks("sample1").play_sample($SF_folder("grattage_unghie_p0").choose(), 0)
}

loop sf_loop1_s2 @rand_range(0.01, 0.08)
{
	$tracks("sample2").play_sample($SF_folder("CP_ballets").choose(), 0)
	$tracks("sample2").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])

}

loop sf_loop2 @rand_range(0.001, 0.0005)
{
	$tracks("sample1").play_sample($SF_folder("grattage-moneda-seg").choose(), 0)
}

loop sf_loop3 @rand_range(0.1, 0.5)
{
	// $tracks("sc_group_play_samp").play_sample($SF_folder("bateria-perc").choose(), -10, @rand_int(24))
	$tracks("sample2").play_sample($SF_folder("bateria-perc").choose(), -10)
	$tracks("sample2").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])
}

abort sf_loop1
abort sf_loop1_s2
abort sf_loop2
abort sf_loop3

NOTE 60 1 play_buffer_CP-hang

obj::crea_track_HOA("play_multichannel", "group_hoa1", amp = 0, fade_in = 1, doppler = 0, in_channels = "24ch")

$tracks("play_multichannel").play_sample24("Fond-diffus24-ch1.aif", 2, 0)
$tracks("play_multichannel").play_sample("1-lesombres.aif", 0, 0)
print ($SF_map("localhost")("Fond-diffus24-ch1.aif"))
$tracks("play_multichannel").free(1)

NOTE 60 1 load_multichannels_IR_buff // IR multichannels buffers

$ir_multichannel1 := "/Users/fernandez/Documents/Doctorado/IRs_multichannels/IR_SN3D_16CH_OK/chapelle.wav"
$ir_multichannel2 := "/Users/fernandez/Documents/Doctorado/IRs_multichannels/IR_SN3D_16CH_OK/foret.wav"
$ir_multichannel3 := "/Users/fernandez/Documents/Doctorado/IRs_multichannels/IR_SN3D_16CH_OK/gare.wav"

	obj::read_multichanls_IR("chapelle", "localhost", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("chapelle", "server2", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("chapelle", "server3", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("chapelle", "server4", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("chapelle", "server5", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("chapelle", "server6", $ir_multichannel1, 2048)	

	1 obj::read_multichanls_IR("foret", "localhost", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("foret", "server2", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("foret", "server3", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("foret", "server4", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("foret", "server5", $ir_multichannel1, 2048)
	obj::read_multichanls_IR("foret", "server6", $ir_multichannel1, 2048)

	1 obj::read_multichanls_IR("gare", "localhost", $ir_multichannel3, 2048)
	obj::read_multichanls_IR("gare", "server2", $ir_multichannel3, 2048)
	obj::read_multichanls_IR("gare", "server3", $ir_multichannel3, 2048)
	obj::read_multichanls_IR("gare", "server4", $ir_multichannel3, 2048)
	obj::read_multichanls_IR("gare", "server5", $ir_multichannel3, 2048)
	obj::read_multichanls_IR("gare", "server6", $ir_multichannel3, 2048)		

// print ($ir_buf("gare"))

NOTE 60 1 load_synthetic_IR_buff

//@proc_def ::create_synthetic_IRs($ir_name, $server_name, $fftsize, $order)

::create_synthetic_IRs("syntIR1", "localhost", 2048, 3)
print ($ir_buf("syntIR1"))


NOTE 60 1 test_HOA_convolution_reverb1

// obj::mix_group_HOA("group_hoa1", "localhost", "Lebedev50", 3) // binaural decoding/convolution, first load hrir_buffer

print ($ir_map("localhost")("chapelle")[2])	

print ($ir_map("localhost")("syntIR1")[0])
print ($ir_buf("localhost")("chapelle"))

$groups("group_hoa1").HOA_ConvRev("chapelle", 10)
$groups("group_hoa2").HOA_ConvRev("chapelle", 10)
$groups("group_hoa3").HOA_ConvRev("chapelle", 10)
$groups("group_hoa4").HOA_ConvRev("chapelle", 10)
$groups("group_hoa5").HOA_ConvRev("chapelle", 10)
$groups("group_hoa6").HOA_ConvRev("chapelle", 10)

$groups("group_hoa1").HOA_ConvRev("foret", 10)
$groups("group_hoa2").HOA_ConvRev("gare", 10)
$groups("group_hoa3").HOA_ConvRev("foret", 10)
$groups("group_hoa4").HOA_ConvRev("gare", 10)
$groups("group_hoa5").HOA_ConvRev("foret", 10)
$groups("group_hoa6").HOA_ConvRev("gare", 10)

$groups("group_hoa1").set("HOA_Global_ConvRev_Dec3", ["amp", 20])

obj::crea_track_HOA("track_hoa1", "group_hoa1", fade_in = 1, amp = 0, doppler = 0, ["TDust", "amp", 0])
obj::crea_track_HOA("track_hoa2", "group_hoa2", fade_in = 1, amp = 0, doppler = 0, ["TDust", "freq", 10, "amp", 0])
obj::crea_track_HOA("track_hoa3", "group_hoa3", fade_in = 1, amp = 0, doppler = 0, ["TDust", "freq", 20, "amp", 0])
obj::crea_track_HOA("track_hoa4", "group_hoa4", fade_in = 1, amp = 0, doppler = 0, ["TDust", "amp", 0])
obj::crea_track_HOA("track_hoa5", "group_hoa5", fade_in = 1, amp = 0, doppler = 0, ["TDust", "freq", 10, "amp", 0])
obj::crea_track_HOA("track_hoa6", "group_hoa6", fade_in = 1, amp = 0, doppler = 0, ["TDust", "freq", 20, "amp", 0])

$tracks("track_hoa2").free(1)

$tracks("track_hoa1").set("TDust", ["amp", 10])
$groups("group_hoa1").HOA_ConvRev_amp(20)

$groups("group_hoa1").HOA_ConvRev_replace("foret", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1
$groups("group_hoa1").HOA_ConvRev_replace("gare", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1
$groups("group_hoa1").HOA_ConvRev_replace("chapelle", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1
$groups("group_hoa2").HOA_ConvRev_replace("foret", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1
$groups("group_hoa2").HOA_ConvRev_replace("gare", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1
$groups("group_hoa2").HOA_ConvRev_replace("chapelle", 10, 1) // $ir_bufname, $ampli = 0, $cross_fade = 1

$groups("group_hoa1").HOA_ConvRev_free(1)
$groups("group_hoa2").HOA_ConvRev_free(1)
$groups("group_hoa3").HOA_ConvRev_free(1)
$groups("group_hoa4").HOA_ConvRev_free(1)
$groups("group_hoa5").HOA_ConvRev_free(1)
$groups("group_hoa6").HOA_ConvRev_free(1)


$tracks("track_hoa1").free(1)
$tracks("track_hoa2").free(1)
$tracks("track_hoa3").free(1)


// $groups("group_hoa1").free(1)
// $groups("group_hoa2").free(1)
// $groups("group_hoa3").free(1)
// $groups("group_hoa4").free(1)
// $groups("group_hoa5").free(1)
// $groups("group_hoa6").free(1)

NOTE 60 1 test_HOA_2_orbits

$HOA_global_z := 0.01
$groups("group_hoa1").free(1)
$groups("group_hoa2").free(1)
$groups("group_hoa3").free(1)
$groups("group_hoa4").free(1)
$groups("group_hoa5").free(1)
$groups("group_hoa6").free(1)

// decodeur hexa
obj::mix_group_HOA("group_hoa1", "localhost", "hexa", 3)
obj::mix_group_HOA("group_hoa2", "server2", "hexa", 3)
obj::mix_group_HOA("group_hoa3", "server3", "hexa", 3)
obj::mix_group_HOA("group_hoa4", "server4", "hexa", 3)
obj::mix_group_HOA("group_hoa5", "server5", "hexa", 3)
obj::mix_group_HOA("group_hoa6", "server6", "hexa", 3)

print toto
// $groups("group_hoa1").free(1)
// OpenFrameworks visual
$gui_enabled := true
::gui_oF_all()

obj::crea_track_HOA("track_hoa1", "group_hoa1", [["Impulse_Pluck", "freq", 548.83099365234, "freq_imp", 10.770000457764, "del", 0.0060000000521541, "amp", -3]])
$tracks("track_hoa1").ambi_orbit(0, 0.06)			

obj::crea_track_HOA("track_hoa2", "group_hoa1", [["Impulse_Pluck", "freq", 600, "freq_imp", 20, "del", 0.000500000521541, "amp", -3]])
$tracks("track_hoa2").ambi_orbit(0, 0.04)

obj::crea_track_HOA("track_hoa2_1", "group_hoa1", [["Impulse_Pluck", "freq", 300, "freq_imp", 20, "del", 0.000500000521541, "amp", -3]])
$tracks("track_hoa2_1").ambi_orbit(0, 0.033)

obj::crea_track_HOA("track_hoa3", "group_hoa1", amp = 6, [["Impulse_Pluck", "freq", 400, "freq_imp", 30, "del", 0.000200000521541, "amp", 0]])
$tracks("track_hoa3").ambi_orbit(0, 0.01)

obj::crea_track_HOA("track_hoa4", "group_hoa1", [["TestSynth3", "freq", 123, "amp", -8]])
$tracks("track_hoa4").ambi_orbit(60, 0.01)

obj::crea_track_HOA("track_hoa5", "group_hoa1", [["TestSynth3", "freq", 234, "amp", -8]])
$tracks("track_hoa5").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa6", "group_hoa1", [["TestSynth3", "freq", 345, "amp", -8]])
$tracks("track_hoa6").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa7", "group_hoa1", [["TestSynth3", "freq", 456, "amp", -8]])
$tracks("track_hoa7").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa8", "group_hoa1", [["TestSynth3", "freq", 567, "amp", -8]])
$tracks("track_hoa8").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa9", "group_hoa1", [["TestSynth3", "freq", 678, "amp", -8]])
$tracks("track_hoa9").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa10", "group_hoa1", [["TestSynth3", "freq", 789, "amp", -8]])
$tracks("track_hoa10").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa11", "group_hoa1", [["TestSynth3", "freq", 890, "amp", -8]])
$tracks("track_hoa11").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa12", "group_hoa1", [["TestSynth3", "freq", 901, "amp", -8]])
$tracks("track_hoa12").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa13", "group_hoa1", [["TestSynth3", "freq", 1024, "amp", -8]])
$tracks("track_hoa13").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa14", "group_hoa1", [["TestSynth3", "freq", 1156, "amp", -7]])
$tracks("track_hoa14").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa15", "group_hoa1", [["TestSynth3", "freq", 1234, "amp", -6]])
$tracks("track_hoa15").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa16", "group_hoa1", [["TestSynth3", "freq", 1356, "amp", -5]])
$tracks("track_hoa16").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa17", "group_hoa1", [["TestSynth3", "freq", 1356, "amp", -5]])
$tracks("track_hoa17").ambi_orbit(180, 0.008)

$tracks("track_hoa4").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa5").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa6").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa7").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa8").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa9").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa10").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa11").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa12").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa13").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa14").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa15").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa16").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)

$tracks("track_hoa4").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa5").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa6").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa7").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa8").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa9").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa10").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa11").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa12").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa13").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa14").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa15").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa16").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)


obj::crea_track_HOA("track_hoa18", "group_hoa2", [["TestSynth3", "freq", 123, "amp", -8]])
$tracks("track_hoa18").ambi_orbit(60, 0.01)
obj::crea_track_HOA("track_hoa19", "group_hoa2", [["TestSynth3", "freq", 125, "amp", -8]])
$tracks("track_hoa19").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa20", "group_hoa2", [["TestSynth3", "freq", 127, "amp", -8]])
$tracks("track_hoa20").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa21", "group_hoa2", [["TestSynth3", "freq", 129, "amp", -8]])
$tracks("track_hoa21").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa22", "group_hoa2", [["TestSynth3", "freq", 131, "amp", -8]])
$tracks("track_hoa22").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa23", "group_hoa2", [["TestSynth3", "freq", 133, "amp", -8]])
$tracks("track_hoa23").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa24", "group_hoa2", [["TestSynth3", "freq", 135, "amp", -8]])
$tracks("track_hoa24").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa25", "group_hoa2", [["TestSynth3", "freq", 137, "amp", -8]])
$tracks("track_hoa25").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa26", "group_hoa2", [["TestSynth3", "freq", 139, "amp", -8]])
$tracks("track_hoa26").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa27", "group_hoa2", [["TestSynth3", "freq", 141, "amp", -8]])
$tracks("track_hoa27").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa28", "group_hoa2", [["TestSynth3", "freq", 143, "amp", -7]])
$tracks("track_hoa28").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa29", "group_hoa2", [["TestSynth3", "freq", 145, "amp", -6]])
$tracks("track_hoa29").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa30", "group_hoa2", [["TestSynth3", "freq", 147, "amp", -5]])
$tracks("track_hoa30").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa31", "group_hoa2", [["TestSynth3", "freq", 149, "amp", -5]])
$tracks("track_hoa31").ambi_orbit(180, 0.09)

obj::crea_track_HOA("track_hoa32", "group_hoa3", [["TestSynth3", "freq", 50, "amp", -8]])
$tracks("track_hoa32").ambi_orbit(60, 0.01)
obj::crea_track_HOA("track_hoa33", "group_hoa3", [["TestSynth3", "freq", 51, "amp", -8]])
$tracks("track_hoa33").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa34", "group_hoa3", [["TestSynth3", "freq", 52, "amp", -8]])
$tracks("track_hoa34").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa35", "group_hoa3", [["TestSynth3", "freq", 53, "amp", -8]])
$tracks("track_hoa35").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa36", "group_hoa3", [["TestSynth3", "freq", 54, "amp", -8]])
$tracks("track_hoa36").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa37", "group_hoa3", [["TestSynth3", "freq", 55, "amp", -8]])
$tracks("track_hoa37").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa38", "group_hoa3", [["TestSynth3", "freq", 56, "amp", -8]])
$tracks("track_hoa38").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa39", "group_hoa3", [["TestSynth3", "freq", 57, "amp", -8]])
$tracks("track_hoa39").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa40", "group_hoa3", [["TestSynth3", "freq", 58, "amp", -8]])
$tracks("track_hoa40").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa41", "group_hoa3", [["TestSynth3", "freq", 59, "amp", -8]])
$tracks("track_hoa41").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa42", "group_hoa3", [["TestSynth3", "freq", 60, "amp", -7]])
$tracks("track_hoa42").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa43", "group_hoa3", [["TestSynth3", "freq", 61, "amp", -6]])
$tracks("track_hoa43").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa44", "group_hoa3", [["TestSynth3", "freq", 62, "amp", -5]])
$tracks("track_hoa44").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa45", "group_hoa3", [["TestSynth3", "freq", 63, "amp", -5]])
$tracks("track_hoa45").ambi_orbit(180, 0.09)

obj::crea_track_HOA("track_hoa46", "group_hoa4", [["TestSynth3", "freq", 223, "amp", -8]])
$tracks("track_hoa46").ambi_orbit(60, 0.01)
obj::crea_track_HOA("track_hoa47", "group_hoa4", [["TestSynth3", "freq", 334, "amp", -8]])
$tracks("track_hoa47").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa48", "group_hoa4", [["TestSynth3", "freq", 445, "amp", -8]])
$tracks("track_hoa48").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa49", "group_hoa4", [["TestSynth3", "freq", 556, "amp", -8]])
$tracks("track_hoa49").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa50", "group_hoa4", [["TestSynth3", "freq", 667, "amp", -8]])
$tracks("track_hoa50").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa51", "group_hoa4", [["TestSynth3", "freq", 778, "amp", -8]])
$tracks("track_hoa51").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa52", "group_hoa4", [["TestSynth3", "freq", 889, "amp", -8]])
$tracks("track_hoa52").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa53", "group_hoa4", [["TestSynth3", "freq", 990, "amp", -8]])
$tracks("track_hoa53").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa54", "group_hoa4", [["TestSynth3", "freq", 1001, "amp", -8]])
$tracks("track_hoa54").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa55", "group_hoa4", [["TestSynth3", "freq", 1124, "amp", -8]])
$tracks("track_hoa55").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa56", "group_hoa4", [["TestSynth3", "freq", 1256, "amp", -7]])
$tracks("track_hoa56").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa57", "group_hoa4", [["TestSynth3", "freq", 1334, "amp", -6]])
$tracks("track_hoa57").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa58", "group_hoa4", [["TestSynth3", "freq", 1456, "amp", -5]])
$tracks("track_hoa58").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa59", "group_hoa4", [["TestSynth3", "freq", 1556, "amp", -5]])
$tracks("track_hoa59").ambi_orbit(180, 0.09)


obj::crea_track_HOA("track_hoa60", "group_hoa5", [["TestSynth3", "freq", 572, "amp", -8]])
$tracks("track_hoa60").ambi_orbit(60, 0.01)
obj::crea_track_HOA("track_hoa61", "group_hoa5", [["TestSynth3", "freq", 575, "amp", -8]])
$tracks("track_hoa61").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa62", "group_hoa5", [["TestSynth3", "freq", 577, "amp", -8]])
$tracks("track_hoa62").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa63", "group_hoa5", [["TestSynth3", "freq", 580, "amp", -8]])
$tracks("track_hoa63").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa64", "group_hoa5", [["TestSynth3", "freq", 588, "amp", -8]])
$tracks("track_hoa64").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa65", "group_hoa5", [["TestSynth3", "freq", 599, "amp", -8]])
$tracks("track_hoa65").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa66", "group_hoa5", [["TestSynth3", "freq", 600, "amp", -8]])
$tracks("track_hoa66").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa67", "group_hoa5", [["TestSynth3", "freq", 602, "amp", -8]])
$tracks("track_hoa67").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa68", "group_hoa5", [["TestSynth3", "freq", 605, "amp", -8]])
$tracks("track_hoa68").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa69", "group_hoa5", [["TestSynth3", "freq", 607, "amp", -8]])
$tracks("track_hoa69").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa70", "group_hoa5", [["TestSynth3", "freq", 610, "amp", -7]])
$tracks("track_hoa70").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa71", "group_hoa5", [["TestSynth3", "freq", 615, "amp", -6]])
$tracks("track_hoa71").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa72", "group_hoa5", [["TestSynth3", "freq", 618, "amp", -5]])
$tracks("track_hoa72").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa73", "group_hoa5", [["TestSynth3", "freq", 620, "amp", -5]])
$tracks("track_hoa73").ambi_orbit(180, 0.09)


obj::crea_track_HOA("track_hoa74", "group_hoa6", [["TestSynth3", "freq", 800, "amp", -8]])
$tracks("track_hoa74").ambi_orbit(60, 0.01)
obj::crea_track_HOA("track_hoa75", "group_hoa6", [["TestSynth3", "freq", 801, "amp", -8]])
$tracks("track_hoa75").ambi_orbit(90, 0.08)
obj::crea_track_HOA("track_hoa76", "group_hoa6", [["TestSynth3", "freq", 802, "amp", -8]])
$tracks("track_hoa76").ambi_orbit(120, 0.067)
obj::crea_track_HOA("track_hoa77", "group_hoa6", [["TestSynth3", "freq", 803, "amp", -8]])
$tracks("track_hoa77").ambi_orbit(160, 0.055)
obj::crea_track_HOA("track_hoa78", "group_hoa6", [["TestSynth3", "freq", 804, "amp", -8]])
$tracks("track_hoa78").ambi_orbit(180, 0.043)
obj::crea_track_HOA("track_hoa79", "group_hoa6", [["TestSynth3", "freq", 805, "amp", -8]])
$tracks("track_hoa79").ambi_orbit(180, 0.037)
obj::crea_track_HOA("track_hoa80", "group_hoa6", [["TestSynth3", "freq", 806, "amp", -8]])
$tracks("track_hoa80").ambi_orbit(180, 0.05)
obj::crea_track_HOA("track_hoa81", "group_hoa6", [["TestSynth3", "freq", 807, "amp", -8]])
$tracks("track_hoa81").ambi_orbit(180, 0.04)
obj::crea_track_HOA("track_hoa82", "group_hoa6", [["TestSynth3", "freq", 808, "amp", -8]])
$tracks("track_hoa82").ambi_orbit(180, 0.03)
obj::crea_track_HOA("track_hoa83", "group_hoa6", [["TestSynth3", "freq", 809, "amp", -8]])
$tracks("track_hoa83").ambi_orbit(180, 0.02)
obj::crea_track_HOA("track_hoa84", "group_hoa6", [["TestSynth3", "freq", 810, "amp", -7]])
$tracks("track_hoa84").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa85", "group_hoa6", [["TestSynth3", "freq", 811, "amp", -6]])
$tracks("track_hoa85").ambi_orbit(180, 0.01)
obj::crea_track_HOA("track_hoa86", "group_hoa6", [["TestSynth3", "freq", 812, "amp", -5]])
$tracks("track_hoa86").ambi_orbit(180, 0.09)
obj::crea_track_HOA("track_hoa87", "group_hoa6", [["TestSynth3", "freq", 813, "amp", -5]])
$tracks("track_hoa87").ambi_orbit(180, 0.09)



$tracks("track_hoa17").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa18").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa19").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa20").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa21").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa22").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa23").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa24").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa25").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa26").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa27").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa28").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa29").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa30").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa31").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa32").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa33").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa34").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa35").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa36").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa37").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa38").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa39").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa40").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa41").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa42").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa43").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa44").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa45").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa46").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa47").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa48").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa49").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa50").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa51").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa52").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa53").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa54").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa55").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)

$tracks("track_hoa56").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa57").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa58").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa59").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa60").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa61").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa62").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa63").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa64").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa65").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa66").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa67").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa68").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa69").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa70").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa71").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa72").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa73").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa74").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa75").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa76").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa77").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa78").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa79").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa80").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa81").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa82").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa83").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa84").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa85").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)
$tracks("track_hoa86").rand_lfo("TestSynth3", "fc", 200, 3000, 200, "linear", 60)

$tracks("track_hoa17").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa18").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa19").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa20").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa21").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa22").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa23").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa24").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa25").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa26").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa27").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa28").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa29").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa30").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa31").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa32").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa33").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa34").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa35").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa36").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa37").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa38").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa39").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa40").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa41").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa42").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa43").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa44").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa45").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa46").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa47").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa48").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa49").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa50").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa51").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa52").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa53").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa54").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)
$tracks("track_hoa55").rand_lfo("TestSynth3", "freq", 200, 3000, 200, "linear", 60)


forall $x in 82
{
	$tracks("track_hoa"+($x+5)).mod_replace("TestSynth3", "Impulse_BPF", 0.1)
	$tracks("track_hoa"+($x+5)).set("Impulse_BPF", ["freq", @rand_range(10, 40), "freq_filter", @rand_range(1000, 3000), "rq", @rand_range(0.1, 0.7), "amp", 3])
}

forall $x in 82
{
	$tracks("track_hoa"+($x+5)).pause(0.1)
}

forall $x in 82
{
	$tracks("track_hoa"+($x+5)).resume(0.1)
}

forall $x in 87
{
	$tracks("track_hoa"+($x+1)).free(2)
}

$tracks("track_hoa2_1").free(1)

// $groups("group_hoa1").free(0.1)
// $groups("group_hoa2").free(0.1)
// $groups("group_hoa3").free(0.1)
// $groups("group_hoa4").free(0.1)
// $groups("group_hoa5").free(0.1)
// $groups("group_hoa6").free(0.1)

NOTE 60 1 HOA_granulation

$groups("group_hoa1").group_ambi_translation([0., 0., 0])
$groups("group_hoa2").group_ambi_translation([0., 0., 0])
$groups("group_hoa3").group_ambi_translation([0., 0., 0])
$groups("group_hoa4").group_ambi_translation([0., 0., 0])
$groups("group_hoa5").group_ambi_translation([0., 0., 0])
$groups("group_hoa6").group_ambi_translation([0., 0., 0])

// 							@obj_def HOA_grain_rot_rand_lfo_rev($buf, $envbuf, $rate_min, $rate_max, $ryth_min, $ryth_max, $env_dur_min, $env_dur_max, $pos_min, $pos_max, $dir, $duree, $radio, $start_angle, $start_elev, $end_angle, $end_elev, $period, $type, $id, $amp, $mix_group_decoder, $grain_group, $rev_amp = -20, $spk_radius = 1.07) 

$gran_rand_lfo_rot5_rev := obj::HOA_grain_rot_rand_lfo_rev("harm-trem-C5-c4-2.aif", "perc", 1.305, 1.31, 0.03, 0.07, 0.001, 0.07, 0.1, 0.8, 1, 3, 0.7, 0, 10, 360, 10, 60, "linear", 0, 0, "group_hoa1", 1) // amp -16
$gran_rand_lfo_rot5_rev.amp(-10)
$gran_rand_lfo_rot5_rev.dir(-1)
$gran_rand_lfo_rot5_rev.radio(1.5)
$gran_rand_lfo_rot5_rev.ryth_min(0.001)
$gran_rand_lfo_rot5_rev.ryth_max(0.0052)
$gran_rand_lfo_rot5_rev.rate_min(1.4)
$gran_rand_lfo_rot5_rev.rate_max(1.405)
$gran_rand_lfo_rot5_rev.pos_min(0.01)
$gran_rand_lfo_rot5_rev.pos_max(0.9)
$gran_rand_lfo_rot5_rev.env_dur_min(0.05)
$gran_rand_lfo_rot5_rev.env_dur_max(0.1)

$gran_rand_lfo_rot6_rev := obj::HOA_grain_rot_rand_lfo_rev("armonicos-7-tube+disto+Conformal1-4.aif", "perc", 1.305, 1.31, 0.03, 0.07, 0.001, 0.07, 0.1, 0.8, 1, 3, 0.7, 0, 10, 360, 10, 60, "linear", 1, 15, "group_hoa2", 2)
$gran_rand_lfo_rot6_rev.amp(-10)

$gran_rand_lfo_rot7_rev := obj::HOA_grain_rot_rand_lfo_rev("armonicos-7-tube+disto+Conformal2-1.aif", "perc", 1.305, 1.31, 0.03, 0.07, 0.001, 0.07, 0.1, 0.8, 1, 3, 0.7, 0, 10, 360, 10, 60, "linear", 2, 3, "group_hoa3", 3)
// $gran_rand_lfo_rot7_rev.amp(3)
// abort $gran_rand_lfo_rot7_rev

$gran_rand_lfo_rot8_rev := obj::HOA_grain_rot_rand_lfo_rev("armonicos-7-tube+disto+Conformal2-5-balayage.aif", "perc", 1.305, 1.31, 0.03, 0.07, 0.001, 0.07, 0.1, 0.8, 1, 3, 0.7, 0, 10, 360, 10, 60, "linear", 3, 0, "group_hoa4", 4)
// $gran_rand_lfo_rot8_rev.amp(0)
// abort $gran_rand_lfo_rot8_rev

$gran_rand_pos1 := obj::HOA_grain_polar_vol_rand_pos("Laconicism-v-7_NEW.aif", "perc", 0.9, 1.1, 0.001, 0.05, 0.01, 0.1, 0.01, 0.6, -100, -80, 0, 360, 0., 1., 0, "group_hoa5", 1)
$groups("group_hoa5").group_ambi_translation_z_rand_lfo(-1, 1, 0, 120, "linear")
// abort $gran_rand_pos1

$gran_rand_pos2 := obj::HOA_grain_polar_vol_rand_pos("Laconicism-v-7_NEW.aif", "perc", 0.9, 1.1, 0.001, 0.05, 0.01, 0.1, 0.01, 0.6, -100, -80, 0, 360, 0., 1., 0, "group_hoa6", 2)
$groups("group_hoa6").group_ambi_translation_z_rand_lfo(-2, 2, 0, 120, "linear")
// abort $gran_rand_pos2


$gran_rand_pos3 := obj::HOA_grain_polar_vol_rand_pos("042_TAM-trama1.aif", "perc", 0.9, 1.1, 0.001, 0.05, 0.01, 0.1, 0.01, 0.6, -100, -80, 0, 360, 0., 1., -10, "group_hoa1", 3)
$groups("group_hoa3").group_ambi_translation_z_rand_lfo(-2, 2, 0, 120, "linear")
$gran_rand_pos3.buf("flexatone-small+bow.aif")
$gran_rand_pos3.amp(6)
$gran_rand_pos3.dir(-1)

abort $gran_rand_lfo_rot5_rev
abort $gran_rand_lfo_rot6_rev
abort $gran_rand_lfo_rot7_rev
abort $gran_rand_lfo_rot8_rev
abort $gran_rand_pos1
abort $gran_rand_pos2
abort $gran_rand_pos3
abort 

$groups("group_hoa1").group_ambi_translation_z_rand_lfo_abort()


NOTE 60 1 HOA_granulation2


obj::crea_track_HOA("hoa_gran2", "group_hoa1", encoder = false) // track without encoder 

$tracks("hoa_gran2").free(10)
$tracks("hoa_gran2").amp(-20)	

print (""+$SF_map("localhost")("Clave02.aif"))
print (""+$SF_map("localhost")("Cymbal.aif"))
print (""+$SF_map("localhost")("Japanese_Block1.aif"))


$tracks("hoa_gran2").mod_add(["Gran_1e_4", "soundBuf", $SF_map("localhost")("Japanese_Block1.aif"), "posLo", 0.2, "posHi", 0.5, "posRateE", -1, "posRateM", 0.8, "overlap", 12, "trigRate", 45, "rate", 1, "bpRQ", 0.25, "bpLo", 50, "bpHi", 5000, "bpHi", 5000])
 
$tracks("hoa_gran2").set("Gran_1e_4", ["x", [0.1, 0.2, 0.3, 0.4, 0.5, -0.1, -0.2, -0.3, -0.4, -0.5]])
$tracks("hoa_gran2").set("Gran_1e_4", ["y", [0.1, 0.2, 0.3, 0.4, 0.5, -0.1, -0.2, -0.3, -0.4, -0.5]])

$tracks("hoa_gran2").set("Gran_1e_4", ["x", @rand_vect(10, -1, 1)])
$tracks("hoa_gran2").set("Gran_1e_4", ["y", @rand_vect(10, -1, 1)])
$tracks("hoa_gran2").set("Gran_1e_4", ["z", [ 0 | $x in 10] ])


$tracks("hoa_gran2").set("Gran_1e_4", ["x", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])
$tracks("hoa_gran2").set("Gran_1e_4", ["amp", -10])
$tracks("hoa_gran2").set("Gran_1e_4", ["amp", 0])
$tracks("hoa_gran2").set("Gran_1e_4", ["posLo", 0.0])
$tracks("hoa_gran2").set("Gran_1e_4", ["posHi", 0.02])
$tracks("hoa_gran2").set("Gran_1e_4", ["posRateE", -1])
$tracks("hoa_gran2").set("Gran_1e_4", ["posRateM", 0.8])
$tracks("hoa_gran2").set("Gran_1e_4", ["overlap", 8])
$tracks("hoa_gran2").set("Gran_1e_4", ["trigRate", 45])
$tracks("hoa_gran2").set("Gran_1e_4", ["rate", 2])
$tracks("hoa_gran2").set("Gran_1e_4", ["bpRQ", 0.15])
$tracks("hoa_gran2").set("Gran_1e_4", ["bpLo", 900])
$tracks("hoa_gran2").set("Gran_1e_4", ["bpHi", 5000])
$tracks("hoa_gran2").set("Gran_1e_4", ["soundBuf", $SF_map("localhost")("Clave02.aif")])



NOTE 1 60 Planet_3D_HOA

	// AUDIO

	// STEREO
	// $planet3D_group := obj::mix_group("planet3D", "localhost") // audio group
	// $synths_Planet_3D := obj::crea_track8s(0, 0.5, 0, $synths, "planet3D") // audio track
	// STEREO

	// HOA
	// $planet3D_group_hoa := obj::mix_group_HOA("planet3D", "localhost", "binaural", 3)

	// $planet3D_group_hoa := obj::mix_group_HOA("planet3D", "localhost", "studio1", 3)
	// $planet3D_group_hoa := obj::mix_group_HOA("planet3D", "localhost", "Lebedev50", 5)

	// obj::mix_group_HOA("planet3D", "localhost", "octa", 3)
	// obj::mix_group_HOA("planet3D", "localhost", "hexa", 3)
	// obj::mix_group_HOA("planet3D", "localhost", "sat", 4)



group planet3D
{
	@local $grille_masses, $baseFreq, $scale_coords, $synths, $synths_Planet_3D, $masses, $inner_masses, $links, $out_pos, $out_vel, $offsets, $m_coords, $i := 0, $ii := 0, $iii := 0, $mass_posx := [], $mass_posy := [], $mass_posz := [], $hoa_bus


	$hoa_bus := $groups("planet3D").$hoa_bus
	print hoa_bus $hoa_bus

	////// creation de la grille 3D //////

	// taille de la grille
	$grille_masses := [7., 7.]

	// number of freqs/synth
	$n_freqs := @reduce(@*, $grille_masses)

	// frequence de base
	$baseFreq := 30
	// $scale_coords := 0.1
		// tableau comprehension genere une grille de coordonées à partir de $grille_masses
	$m_coords := [ [[$i, $j] | $i in $grille_masses[0]+2 ] | $j in $grille_masses[1]+2]

	// $m_coords := $m_coords * 0.5
	print (""+$m_coords)


		// tableau en compréhension creation des synth
	// Pan stereo
	// $synths := [ [ ["Form", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "pan", ($j+1)-($grille_masses[0]*0.5)/$grille_masses[0]] | $i in $grille_masses[0] ] | $j in $grille_masses[1] ] // contruction de la grille de links
	// HOA xyz
	$synths := [ [ ["Form_HOA_3", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $hoa_bus] | $i in $grille_masses[0] ] | $j in $grille_masses[1] ] // contruction de la grille de links


	obj::crea_track_HOA("synths_Planet_3D", "group_hoa1", fade_in = 1, amp = 0, $synths.flatten(1), encoder = false)


	// _ := $synths_Planet_3D.amp(6)
	// HOA
	// print hoa_bus_synth $planet3D_group_hoa.$hoa_bus
	// _ := $synths_Planet_3D.mod_add(["Lpf", "freq", 600])

	// tableaux masses, links
	$masses := []
	$inner_masses := []
	$links := []
	$out_pos := []
	$out_vel := []

	// $offsets := [$grille_masses + 2 - ($grille_masses + 2 * 0.5), 0].flatten()
	$offsets := [3, 2.5, 0.]



	// tableau comprehension genere une grille de links en 3D
	$links := [ [ obj::Link3D(0., 1., 0.1, 0.1) | $i in ($grille_masses[0]+1)+($grille_masses[0]+2) ] | $j in ($grille_masses[1]+2)] // contruction de la grille de links

	forall $x_co in $m_coords // construction de la grille de masses
	{
		_ := $masses.insert($i, [])

		forall $mass_co in $x_co
		{
			@local $mass
			// création de masses
			$mass := obj::Mass3D(10., [$mass_co[0], $mass_co[1], 0] - $offsets, -100000., 100000., -100000., 100000., -100000., 100000., 0.0, 0.0)

			if(($mass_co.member(0).not()) && (($mass_co[0]!= ($grille_masses[0]+1)) && ($mass_co[1] != ($grille_masses[1]+1)))) // recupere les masses de l'interieur
			{
				// print massasasas (""+$mass)
				_ := $inner_masses.push_back($mass) // masse de l'interieur pour les trigger après
			}
			// print grille (""+$mass_co)
			_ := $masses[$i].insert($ii, $mass) // tab de toutes les masses

			$ii += 1
		}
		$ii := 0
		$i += 1
	}

	group compute // calcule l'état du système à chaque boucle de la loop à 0.01
	{	
		@local $out, $index_connect, $index_connect2, $index_connect3, $index_out_pos

		loop 0.02 //0.01
		{
			$index_connect := 0
			$index_connect2 := 0
			$index_connect3 := 0
			$index_out_pos := 0

			forall $list_link in $links
			{
				forall $link_connect in $list_link // parcour la liste de links pour contruire les liens entre masses
				{
					if($index_connect2 < $grille_masses[0]+1) // connexions horizontales o-o-o
					{
						_ := $link_connect.connect($masses[$index_connect][$index_connect2], $masses[$index_connect][$index_connect2+1], true, true)
					}
					else
					{																	//	o
						if($index_connect < (@size($links) -1)) // connexions verticales 	|
						{																//	o
							_ := $link_connect.connect($masses[$index_connect][$index_connect3], $masses[$index_connect+1][$index_connect3], true, true)

							$index_connect3 += 1
						}
					}
					$index_connect2 := $index_connect2 + 1
				}
				$index_connect2 := 0 // reset line
				$index_connect3 := 0 // reset line
				$index_connect += 1
			}
			forall $trig_mass in $inner_masses // trigger
			{
				$out_pos[$index_out_pos] := $trig_mass.$position_out
				$out_vel[$index_out_pos] := $trig_mass.$velocity_out
				_ := $trig_mass.trig()
				// _ := $synths_Planet_3D.set_single("Form", $index_out_pos, ["mul", ($trig_mass.$force_out[3].clip(0, 1)), "bpf", ($trig_mass.$position_out[2].scale(-0.3, 0.3, 50, 800, 1.02)), "pan", ($trig_mass.$position_out[0].scale(0, 7, -1, 1, 1))])

				$tracks("synths_Planet_3D").set_single("Form_HOA_3", $index_out_pos, ["mul", ($trig_mass.$force_out[3].clip_compiled(0, 1)), "bpf", (@clip_compiled($trig_mass.$position_out[2].scale_compiled(-0.3, 0.3, 50, 800, 1.02), 50, 2500)), "x", $trig_mass.$position_out[0], "y", $trig_mass.$position_out[1], "z", $trig_mass.$position_out[2]])

				// $tracks("synths_Planet_3D").set_single("Form_HOA_3", 15, ["mul", ($trig_mass.$force_out[3].clip_compiled(0, 1)), "bpf", (@clip_compiled($trig_mass.$position_out[2].scale_compiled(-0.3, 0.3, 50, 800, 1.02), 50, 2500)), "x", $trig_mass.$position_out[0], "y", $trig_mass.$position_out[1], "z", $trig_mass.$position_out[2]])

				// video1 ($trig_mass.$position_out[15])

				$index_out_pos += 1
			}
			// print (""+$out_pos)
			 of_list3D ($out_pos.flatten()) // send to OF of_list

			 // video1 ($out_pos.flatten()) //($out_vel[15].flatten()) //($trig_mass.$position_out[15]) //($out_vel.flatten())
			 // video2 ($out_vel.flatten())
			 // print ($out_ve	l.flatten())

		}
	}

	///// OSC /////

	// recever OSC from openFrameworks
	// oscrecv 3D_planet_oFx 6666 * $from_of_gui

	group oscrecv_ofx
	{
		@local $mass_num := 0., $force_x := 0., $force_y := 0., $force_z := 0., $links_length, $base_freqs_of, $ax, $ay, $az, $axy

			whenever ($from_of_gui==$from_of_gui)
			{
				print key (""+$from_of_gui[0])
				print val (""+$from_of_gui[1])
				switch ($from_of_gui[0])
				{
			      	case "/parameters/3D_plane_forces/mass_num":
			      	$mass_num := $from_of_gui[1]

			      	case "/parameters/3D_plane_forces/force_x":
			      	$force_x := $from_of_gui[1]
			      	print force_x
			      	case "/parameters/3D_plane_forces/force_y":
			      	$force_y := $from_of_gui[1]
					case "/parameters/3D_plane_forces/force_z":
					$force_z := $from_of_gui[1]
					case "/parameters/3D_plane_forces/reset":
					forall $links_obj in $links.flatten()
					{
						_ := $links_obj.reset()
					}
					case "/parameters/3D_plane_forces/links_length":
					forall $links_obj in $links.flatten()
					{
						$links_obj.$length := ($from_of_gui[1])
						// print ($links_obj.$length)
					}
					case "/parameters/3D_plane_forces/links_rigidity":
					forall $links_obj in $links.flatten()
					{
						$links_obj.$rigidity := ($from_of_gui[1])
						// print ($links_obj.$rigidity)
					}
					case "/parameters/3D_plane_forces/links_vel":
					forall $links_obj in $links.flatten()
					{
						$links_obj.$vel_damp := ($from_of_gui[1])
						// print ($links_obj.$vel_damp)
					}
					case "/parameters/3D_plane_forces/mass": // control all mass
					forall $inner_mass_obj in $inner_masses.flatten()
					{
						$inner_mass_obj.$mass := ($from_of_gui[1])
					}
					case "/parameters/3D_plane_forces/posX": // all masses offset x

					forall $mass_obj in $masses.flatten()
					{

						let $mass_obj.$position_out[0] := $mass_obj.$posX_old_2+$from_of_gui[1] //($mass_obj.$posX_old_1+$from_of_gui[1])-$mass_obj.$xInit //$mass_posx[$ax]+
						// $mass_posx[$ax] := $mass_obj.$position_out[0]
						$mass_obj.$posX_old_1 := $mass_obj.$position_out[0]


					}
					case "/parameters/3D_plane_forces/posY": // all masses offset y

					forall $mass_obj in $masses.flatten()
					{

						let $mass_obj.$position_out[1] := $mass_obj.$posY_old_2+$from_of_gui[1] //($mass_obj.$posY_old_1+$from_of_gui[1])-$mass_obj.$posY_old_2 //($mass_obj.$posY_old_2+$from_of_gui[1])-$mass_obj.$posY_old_1 //$mass_posy[$ay]+ //($mass_obj.$position_out[0]+$from_of_gui[1])
						// $mass_posy[$ay] := $mass_obj.$position_out[1]
						$mass_obj.$posY_old_1 := $mass_obj.$position_out[1]


					}
					case "/parameters/3D_plane_forces/posZ": // all masses offset z
					forall $mass_obj in $masses.flatten()
					{

						let $mass_obj.$position_out[2] := $mass_obj.$zInit+$from_of_gui[1] //($mass_obj.$posZ_old_2+$from_of_gui[1])-$mass_obj.$posZ_old_1 //$mass_posz //$mass_obj.$posZ_old_1 //($mass_obj.$position_out[0]+$from_of_gui[1])
						// $mass_posz[$az] := $mass_obj.$position_out[2]
						$mass_obj.$posZ_old_1 := $mass_obj.$position_out[2]
						$mass_obj.$posZ_old_2 := $mass_obj.$position_out[2]

					}
					case "/parameters/3D_plane_forces/pos_fac": // all masses offset z

					forall $mass_obj in $masses.flatten()
					{



						let $mass_obj.$position_out[0] := $mass_obj.$posX_old_1*$from_of_gui[1] //($mass_posx[$axy]*$from_of_gui[1]) //+($mass_posx[$axy].inv) //+($from_of_gui[1]+$mass_obj.$xInit) //-$mass_posx[$axy]
						// let $mass_obj.$position_out[0] := $mass_obj.$posX_old_2*$from_of_gui[1]
						let $mass_obj.$position_out[1] := $mass_obj.$posY_old_1*$from_of_gui[1] //($mass_posy[$axy]*$from_of_gui[1]) //+($mass_posy[$axy].inv) //+($from_of_gui[1]+$mass_obj.$yInit) //-$mass_posy[$axy]
						// let $mass_obj.$position_out[1] := $mass_obj.$posY_old_2*$from_of_gui[1] //($mass_posy[$axy]*$from_of_gui[1]) //+($mass_posy[$axy].inv) //+($from_of_gui[1]+$mass_obj.$yInit) //-$mass_posy[$axy]

						$mass_obj.$posX_old_2 := $mass_obj.$position_out[0]
						$mass_obj.$posY_old_2 := $mass_obj.$position_out[1]


					}
					case "/parameters/3D_plane_forces/baseFreq":
					$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $grille_masses[0] ] | $j in $grille_masses[1]] // construction grille inner_mass freqs
					$base_freqs_of := $base_freqs_of.flatten(1)
					// print (""+$base_freqs_of)
					forall $inner_mass_index in $inner_masses.size()
					{
						// _ := $synths_Planet_3D.set_single("Form", $inner_mass_index, $base_freqs_of[$inner_mass_index])
						$tracks("synths_Planet_3D").set_single("Form_HOA_3", $inner_mass_index, $base_freqs_of[$inner_mass_index])
					}
				}
				_ := $inner_masses[$mass_num].force([$force_x, $force_y, $force_z])
			}
	}

}

NOTE 1 60 Planet_3D_OFF

abort planet3D
$groups("planet3D").free(0.5)
oscoff 3D_plane_oFx

abort oscrecv_ofx

/*
NOTE 60 1 PM_Solveur

// @set_osc_handling_double(false)

obj::mix_group("PM_Solveur", "localhost") // audio group					



//PM Solveur équations

@macro_def @L { 20 }



$L := @L
$N := $L * $L
$S := 2 * $N
@macro_def @S { (2 * @L * @L) }



// number of freqs/synth
$n_freqs := $N

// frequence de base
$baseFreq := 30


$synths := [ [ ["Form", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "pan", ($j+1)-($L*0.5)/$L] | $i in $L ] | $j in $L ] // contruction de la grille de links

// print synths (""+$synths.flatten(1))
obj::crea_track("PM_Solveur_track", "PM_Solveur", $synths.flatten(1))



$m_coords := [ [[$i, $j, 0] | $i in $L ] | $j in $L]
$m_coords := $m_coords.flatten()

// print (""+$m_coords)

@fun_def evolve($t, $y, $ydot)
{
    @local $p := 0
    
    Loop
    {
       @local $i := ($p / $L)
       @local $j := ($p % $L)

       @evolve_aux(($i == 0),
                   ($j == $L - 1),
                   ($i == $L - 1),
                   ($j == 0),
                   $y,
                   $ydot,
                   $p,
                   $i,
                   $j)
       
       $p += 1
    } during[$N #]

    return 0;
}


$D := 0.
$k := 1.0

whenever ($D == $D || $k == $k)
{
     print "$D = " $D
     print "$k = " $k
}

@fun_def evolve_aux($cn, $ce, $cs, $cw, $y, $ydot, $p, $ip, $jp)
{
     @local $pv := $p + $N

     @local $pn := ($ip - 1) * $L + $jp
     @local $pe := $ip * $L + ($jp + 1)
     @local $ps := ($ip + 1) * $L + $jp
     @local $pw := $ip * $L + ($jp - 1)

     @local $xn := ($cn ? $y[$p] : ($y[$p] - $y[$pn]))
     @local $ln := @sqrt(1 + $xn*$xn)
     @local $thetan := @atan($xn)
     @local $fn := $ln * @sin($thetan)

     @local $xe := ($ce ? $y[$p] : ($y[$p] - $y[$pe]))
     @local $le := @sqrt(1 + $xe*$xe)
     @local $thetae := @atan($xe)
     @local $fe := $le * @sin($thetae)

     @local $xs := ($cs ? $y[$p] : ($y[$p] - $y[$ps]))
     @local $ls := @sqrt(1 + $xs*$xs)
     @local $thetas := @atan($xs)
     @local $fs := $ls * @sin($thetas)

     @local $xw := ($cw ? $y[$p] : ($y[$p] - $y[$pw]))
     @local $lw := @sqrt(1 + $xw*$xw)
     @local $thetaw := @atan($xw)
     @local $fw := $lw * @sin($thetaw)


     @local $d := $D * $y[$pv]

     @local $f := $fn + $fe + $fs + $fw + $d


     $ydot[$pv] := - $k * $f
     $ydot[$p] := $y[$pv]

     return 0
}




$cpt := 0
$p := 0

$f1 := 0

    $y0 := [ 0. | ($S) ]
    // $p := $N / 2
    $y0[$p] := $f1

whenever ($f1 == $f1)
{
    // @local $my_curve
    // $y0[10] := $f1
    // print $f1
    // $y0 := [ 0. | ($S) ]
    // $p := $N / 2
    $y0[$p] := $f1

    // $y0[$p] := 2

abort my_curve


// $d0 := @host_date()
Curve my_curve
@grain 0.05 //(1./25.)
@action {


    @local $count := 0
    Loop 0. {
      $m_coords[$count*3 + 2] := $y[$count]

      $tracks("PM_Solveur_track").set_single("Form", $count, ["mul", ($y[$count]), "bpf", ($y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02))]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))

      $count += 1
    } during [$N #]

    of_list3D $m_coords
}
{
    $y' = @evolve[$NOW, $y]
    $y = $y0

    dim = @S
    order = 8
    ; tolR = 1.e-8
    ; tolA = 1.e-8
    ; lapack = true
    
    signatures = MAP {
       @evolve_aux -> [ ["bool", "bool", "bool", "bool",
                         ["double"], ["double"],
                         "int", "int", "int" ],
                        "int"],
       "$D" -> "float",
       "$N" -> "int",
       "$L" -> "int",
       "$S" -> "int",
       "$k" -> "float",
    }

    whenever $y[$N / 2] =>= 0. { $cpt += 1 }
}



}


	// recever OSC from openFrameworks
	// oscrecv PM_solveur 6666 * $from_of_gui

	group oscrecv_ofx
	{
		@local $base_freqs_of

			whenever ($from_of_gui==$from_of_gui)
			{
				// print (""+$from_of_gui)

				switch ($from_of_gui[0])
				{
			      	case "/parameters/PM_solveur/damping":
			      	$D := $from_of_gui[1]
			      	case "/parameters/PM_solveur/k":
			      	$k := $from_of_gui[1]
			      	case "/parameters/PM_solveur/mass_pos":
			      	$p := $from_of_gui[1]			      	
					case "/parameters/PM_solveur/force":
					$f1 := $from_of_gui[1]
					case "/parameters/PM_solveur/volume":
					$groups("PM_Solveur").amp($from_of_gui[1]) // controle le group en entier					
					case "/parameters/PM_solveur/freq":
					$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $L ] | $j in $L] // construction grille inner_mass freqs
					$base_freqs_of := $base_freqs_of.flatten(1)

					@local $count := 0
				    Loop 0. {

				    	$tracks("PM_Solveur_track").set_single("Form", $count, $base_freqs_of[$count])
				      	$count += 1

				    } during [$N #]

				}
			}
	}


NOTE 60 1 Stop_PM_Solveur

abort my_curve
$groups("PM_Solveur").free(1)
*/


NOTE 1 60 16_gaz_molecules_HOA

$hoa_order := 4 // hoa order
$nbMasses := 10 //25 number of particules

$mass_mass := 300.
$winSize := 500.
$diam := 0.2
$limit := 0.5
$margin := 0.1

$masses := []
$massSkins := []
$limitLines := []
// $out_pos := []
// 3D tab
$out_pos_final := [  0 | ($nbMasses*3) ]
$center := $winSize * 0.5
$resolution := $winSize / ($limit*2.) ;//pix
$invLimit := 1/$limit

$mLim := $limit - $margin;

// audio group decoder

// obj::mix_group_HOA("group1", "localhost", "studio1", 3)
obj::mix_group_HOA("group1", "localhost", "hexa", $hoa_order)


$hoa_bus := $groups("group1").$hoa_bus //recupere bus hoa du mix_group_HOA "group1"


// obj::mix_group_HOA("group_hoa1", "localhost", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer

// $synths := [ [ ["Form_HOA_3", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $hoa_bus] | $i in $grille_masses[0] ] | $j in $grille_masses[1] ] // contruction de la grille de links
// $synths := [ [ ["Form_HOA_3", "mul", 1/$nbMasses, "freq", (1/$nbMasses*600)+150, "globTBus", $hoa_bus ]] | ($nbMasses) ]
$synths := [ ["Form_HOA_"+$hoa_order, mul, 1/($i+0.00001), freq, (1/($i+1)*600)+150, globTBus, $hoa_bus ] | $i in $nbMasses ]

obj::crea_track_HOA("gaz_molecules", "group1", fade_in = 1, amp = -20, $synths, encoder = false)


$limitCoords := [
				[$mLim, $mLim, $mLim.neg(), $mLim ], //top
				[$mLim.neg(), $mLim, $mLim.neg(), $mLim.neg()], //left
				[$mLim, $mLim.neg(), $mLim, $mLim], //right
				[$mLim.neg(), $mLim.neg(), $mLim, $mLim.neg()]//bottom
			]

$limitLines := [ obj::Line2D($x[0], $x[1], $x[2], $x[3], 1000.0, kN = 10.0) |$x in $limitCoords ]

// $limitLines := $limitLines.flatten()
// Line2D(coor[0], coor[1], coor[2], coor[3], 1000, 0, 0, 10)

print limitLines (""+$limitLines)

forall $iter in $nbMasses
{
	$coords := [$limit.rand2(), $limit.rand2()]*0.8
	print (""+$coords)
	$masses.push_back(obj::Mass2D($mass_mass, $coords))
	// kT = 0.0, rN = 0.0, rT = 0.0,  dn = 0.0, dt = 0.0, dRN = 0.0, dRT = 0.0 d = 0.0,  g = 0.0, dN = 0.0, dT = 0.0
	$massSkins.push_back(obj::Circle2D($coords[0], $coords[1], 0.0001, $diam*1.3, kN = 3.0))
}
 // nbMasses.do {|i|  var coords;
 // 	coords = [limit.rand2, limit.rand2]*0.8;
 // masses = masses.add(Mass2D(100, coords)) ;
 // massSkins = massSkins.add(Circle2D(coords[0], coords[1], 0.0001, diam*1.3, 0, 0, 3))
 //  };

print masses (""+$masses)
print massSkins (""+$massSkins)
print limitLines (""+$limitLines)


// $ambient := obj::Ambient2D(0.0, 0.0, 1.0, 1.0, 0.0, -100000.0, 100000.0, -100000.0, 100000.0, 0.0, 0.0); //init displacement of the masses;

$ambient := obj::Ambient2D(0.0, 0.0, 1.0, 1.0) // default arguments

forall $imass in $masses
{
	_ := $imass.inter_ambient($ambient)
}


print toto (""+$massSkins[0].$posX_old)
print masse+masseskins ($masses[0]) ($massSkins[0])
print masseskins ($massSkins[0].$posX)
print limitLines ($limitLines[0].$x1)
print limitLines ($limitLines[0].$y1)
print limitLines ($limitLines[0].$x2)
print limitLines ($limitLines[0].$y2)

print titi (""+$masses[0].inter_circle($massSkins[0]))
print tutu (""+$masses[0].inter_line($limitLines[0]))

// print titi (""+$masses[0].inter_line(@flatten($limitLines)[0]))
// resetF = {
// 	masses.flat.do( _.inter_ambient(ambient));
// 	synths.do(_.set(\formfreq, rrand(500, 5000)));
// };


group gaz_molecules_2D
{
	loop 0.02
	{
		@local $i := 0

		forall $mss in $masses
		{
			$mss.trig()
			_ := $massSkins[$i].setXY($mss.$position_out)

			forall $circle in $massSkins
			{
				$mss.inter_circle($circle)
			}
			forall $line in $limitLines
			{
				$mss.inter_line($line)
			}

			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]

			// print velocity_out ($mss.$velocity_out[2])
			$tracks("gaz_molecules").set_single("Form_HOA_"+$hoa_order, $i, [mul, $mss.$velocity_out[2].scale_compiled(0, 0.1, 0, 0.01, 1).clip_compiled(0, 0.1), bpf, $mss.$velocity_out[2].scale_compiled(0, 0.1, 100, 5000, 1), x, ($mss.$position_out[0]+$HOA_global_x), y, ($mss.$position_out[1]+$HOA_global_y), z, (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),
			
			$i += 1
		}		
		of_molecules $out_pos_final
	}
}

NOTE 60 1 change_mass

forall $massmass in $masses
{
	$massmass.$mass := 800
}

forall $imass in $masses
{
	$imass.inter_ambient($ambient)
	// synths.do(_.set(\formfreq, rrand(500, 5000)));
}

$ambient.force([0.1, 0.1])
$ambient.randForce([2, 2])
$ambient.$damp := -100

print mass0 (""+$masses[0].$mass)
print ambient (""+$ambient.$forceX)
print ambient (""+$ambient.$damp)

NOTE 60 1 change_mass

forall $massmass in $masses
{
	$massmass.$mass := 100
}

forall $imass in $masses
{
	$imass.inter_ambient($ambient)
	// synths.do(_.set(\formfreq, rrand(500, 5000)));
}

$ambient.force([0.1, 0.1])
$ambient.randForce([2, 2])
$ambient.$damp := -100

print mass0 (""+$masses[0].$mass)
print ambient (""+$ambient.$forceX)
print ambient (""+$ambient.$damp)

NOTE 60 1 off_gaz_melocules

$groups("group1").free(1)
1 abort gaz_molecules_2D


NOTE 60 1 rec_group

$groups("group1").record("test")

NOTE 60 1 stop_rec_group

$groups("group1").stop_record("test")


NOTE 60 1 rec_hoa

$groups("group1").record_hoa("test_hoa1")
$Servers("server1").g_dumpTree(0, 1)

NOTE 60 1 stop_rec_hoa

$groups("group1").stop_record("test_hoa1")



// NOTE 1 60 16_gaz_molecules_HOA_multi_server


// $nbMasses := 100
// $mass_mass := 300.
// $winSize := 500.
// $diam := 0.2
// $limit := 0.5
// $margin := 0.1

// $masses := []
// $massSkins := []
// $limitLines := []
// // $out_pos := []
// // 3D tab
// $out_pos_final := [  0 | ($nbMasses*3) ]
// $center := $winSize * 0.5
// $resolution := $winSize / ($limit*2.) ;//pix
// $invLimit := 1/$limit

// $mLim := $limit - $margin;

// // audio group
// // $sc_group1 := obj::mix_group("group1", "localhost")

// obj::mix_group_HOA("group1", "localhost", "studio1", 3)
// obj::mix_group_HOA("group2", "server2", "studio1", 3)
// obj::mix_group_HOA("group3", "server3", "studio1", 3)
// obj::mix_group_HOA("group4", "server4", "studio1", 3)

// // obj::mix_group_HOA("group_hoa1", "localhost", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer



// // $synths := [ [ ["Form_HOA_3", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $planet3D_group_hoa.$hoa_bus] | $i in $grille_masses[0] ] | $j in $grille_masses[1] ] // contruction de la grille de links

// // $synths := [ [ ["Form2", "mul", 1/$nbMasses, "formfreq", @rand_range(500, 5000) ]] | ($nbMasses) ]

// $synths := [ [ ["Form_HOA_3", "mul", 1/$nbMasses, "freq", (1/$nbMasses*600)+150 ]] | ($nbMasses) ]


// $synth_server1 := $synths.slice(0, 25)
// $synth_server2 := $synths.slice(25, 50)
// $synth_server3 := $synths.slice(50, 75)
// $synth_server4 := $synths.slice(75, 100)


// // $gaz_molecules := obj::crea_track8s(0, 0.5, 0, $synths, "group1")

// // $gaz_molecules := obj::crea_track_HOA(0, 0.5, 0, $synths, "group1")
// obj::crea_track_HOA("gaz_molecules1", "group1", fade_in = 1, amp = 0, $synth_server1.flatten(1))
// obj::crea_track_HOA("gaz_molecules2", "group2", fade_in = 1, amp = 0, $synth_server2.flatten(1))
// obj::crea_track_HOA("gaz_molecules3", "group3", fade_in = 1, amp = 0, $synth_server3.flatten(1))
// obj::crea_track_HOA("gaz_molecules4", "group4", fade_in = 1, amp = 0, $synth_server4.flatten(1))


// $limitCoords := [
// 				[$mLim, $mLim, $mLim.neg(), $mLim ], //top
// 				[$mLim.neg(), $mLim, $mLim.neg(), $mLim.neg()], //left
// 				[$mLim, $mLim.neg(), $mLim, $mLim], //right
// 				[$mLim.neg(), $mLim.neg(), $mLim, $mLim.neg()]//bottom
// 			]

// // $links := [ [ obj::Link3D(0, 1, 0.1, 0.1) | $i in ($grille_masses[0]+1)+($grille_masses[0]+2) ] | $j in ($grille_masses[1]+2)] // contruction de la grille de links


// // $m_coords := [ [[$i, $j] | $i in $grille_masses[0]+2 ] | $j in $grille_masses[1]+2]

// // x1 = -1.0, y1 = 0.0, x2 = 1.0, y2 = 0.0, pMax = 1.0, fN = 0.0, fT = 0.0, kN = 0.0, dN = 0.0, dT = 0.0, dn = 0.0, dt = 0.0
// // $limitLines := [ obj::Line2D($limitCoords[$x[0]], $limitCoords[$x[1]], $limitCoords[$x[2]], $limitCoords[$x[3]], 1000, 0, 0, 10, 0, 0, 0, 0) |$x in $limitCoords ]

// // $limitLines := [ [$x[0], $x[1], $x[2], $x[3]] |$x in $limitCoords ]

// $limitLines := [ [ obj::Line2D($x[0], $x[1], $x[2], $x[3], 1000.0, 0.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0)] |$x in $limitCoords ]

// $limitLines := $limitLines.flatten()
// // Line2D(coor[0], coor[1], coor[2], coor[3], 1000, 0, 0, 10)

// // print limitLines (""+$limitLines)

// forall $iter in $nbMasses
// {
// 	$coords := [$limit.rand2(), $limit.rand2()]*0.8
// 	print (""+$coords)
// 	_ := $masses.push_back(obj::Mass2D($mass_mass, $coords, -100000.0, 100000.0, -100000.0, 100000.0, 0.0))
// 	// kT = 0.0, rN = 0.0, rT = 0.0,  dn = 0.0, dt = 0.0, dRN = 0.0, dRT = 0.0 d = 0.0,  g = 0.0, dN = 0.0, dT = 0.0
// 	_ := $massSkins.push_back(obj::Circle2D($coords[0], $coords[1], 0.0001, $diam*1.3, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
// }
//  // nbMasses.do {|i|  var coords;
//  // 	coords = [limit.rand2, limit.rand2]*0.8;
//  // masses = masses.add(Mass2D(100, coords)) ;
//  // massSkins = massSkins.add(Circle2D(coords[0], coords[1], 0.0001, diam*1.3, 0, 0, 3))
//  //  };

// print masses (""+$masses)
// print massSkins (""+$massSkins)
// print limitLines (""+$limitLines)


// $ambient := obj::Ambient2D(0.0, 0.0, 1.0, 1.0, 0.0, -100000.0, 100000.0, -100000.0, 100000.0, 0.0, 0.0); //init displacement of the masses;


// forall $imass in $masses
// {
// 	_ := $imass.inter_ambient($ambient)
// 	// synths.do(_.set(\formfreq, rrand(500, 5000)));
// }

// forall $synth_index in 24
// {
// 	// _ := $gaz_molecules.set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// 	$tracks("gaz_molecules1").set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// }

// forall $synth_index in 24
// {
// 	// _ := $gaz_molecules.set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// 	$tracks("gaz_molecules2").set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// }
// forall $synth_index in 24
// {
// 	// _ := $gaz_molecules.set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// 	$tracks("gaz_molecules3").set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// }
// forall $synth_index in 24
// {
// 	// _ := $gaz_molecules.set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// 	$tracks("gaz_molecules4").set_single("Form_HOA_3", $synth_index, ["formfreq", @rand_range(500, 5000)])
// }

// print toto (""+$massSkins[0].$posX_old)
// print masse+masseskins ($masses[0]) ($massSkins[0])
// print masseskins ($massSkins[0].$posX)
// print limitLines ($limitLines[0].$x1)
// print limitLines ($limitLines[0].$y1)
// print limitLines ($limitLines[0].$x2)
// print limitLines ($limitLines[0].$y2)

// print titi (""+$masses[0].inter_circle($massSkins[0]))
// print tutu (""+$masses[0].inter_line($limitLines[0]))

// // print titi (""+$masses[0].inter_line(@flatten($limitLines)[0]))
// // resetF = {
// // 	masses.flat.do( _.inter_ambient(ambient));
// // 	synths.do(_.set(\formfreq, rrand(500, 5000)));
// // };

// @fun_def index2serveur($i)
// {
// 	if(0 <= $i && $i < 25) 
// 	{ 
// 		return "gaz_molecules1" 
// 	}
// 	else 
// 	{ 
// 		if(25 <= $i && $i < 50) 
// 		{
// 			return "gaz_molecules2" 
// 		}
// 		else
// 		{
// 			if(50 <= $i && $i < 75) 
// 			{ 
// 				return "gaz_molecules3" 
// 			}
// 			else 
// 			{ 
// 				return "gaz_molecules4" 
// 			}
// 		}
// 	}
// }

// @fun_def index2serveur_index($i)
// {
// 	if(0 <= $i && $i < 25) 
// 	{ 
// 		return $i
// 	}
// 	else 
// 	{ 
// 		if(25 <= $i && $i < 50) 
// 		{
// 			return $i-25
// 		}
// 		else
// 		{
// 			if(50 <= $i && $i < 75) 
// 			{ 
// 				return $i-50
// 			}
// 			else 
// 			{ 
// 				return $i-75
// 			}
// 		}
// 	}
// }

// group gaz_molecules_2D
// {
// 	loop 0.02
// 	{
// 		@local $i := 0

// 		forall $mss in $masses
// 		{
// 			$mss.trig()
// 			_ := $massSkins[$i].setXY($mss.$position_out)

// 			forall $circle in $massSkins
// 			{
// 				$mss.inter_circle($circle)
// 			}
// 			forall $line in $limitLines
// 			{
// 				$mss.inter_line($line)
// 			}

// 			$out_pos_final[$i*3] := $mss.$position_out[0]
// 			$out_pos_final[$i*3+1] := $mss.$position_out[1]

// 			// print velocity_out ($mss.$velocity_out[2])
// 			// print ($i.index2serveur_index())
// 			// print ($i.index2serveur())
// 			// $i.index2serveur_index()
// 			$tracks($i.index2serveur()).set_single("Form_HOA_3", $i.index2serveur_index(), ["mul", $mss.$velocity_out[2].scale_compiled(0, 0.1, 0, 0.01, 1).clip_compiled(0, 0.1), "bpf", $mss.$velocity_out[2].scale_compiled(0, 0.1, 100, 5000, 1), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),			
// 			$i += 1
// 		}		
// 		of_molecules $out_pos_final
// 	}
// }


NOTE 60 1 change_mass

forall $massmass in $masses
{
	$massmass.$mass := 100
}

forall $imass in $masses
{
	_ := $imass.inter_ambient($ambient)
	// synths.do(_.set(\formfreq, rrand(500, 5000)));
}

$ambient.force([0.1, 0.1])
$ambient.randForce([2, 2])
$ambient.$damp := -100

print mass0 (""+$masses[0].$mass)
print ambient (""+$ambient.$forceX)
print ambient (""+$ambient.$damp)

NOTE 60 1 off_gaz_melocules

$groups("group1").free(1)
$groups("group2").free(1)
$groups("group3").free(1)
$groups("group4").free(1)
1 abort gaz_molecules_2D





NOTE 60 1 change_mass




NOTE 60 1 change_mass

forall $massmass in $masses
{
	$massmass.$mass := 100
}


NOTE 60 1 off_gaz_melocules

$groups("group1").free(1)
1 abort gaz_molecules_3D

NOTE 1 60 gaz_molecules3D_plan3D_HOA

$hoa_order := 4 // hoa order
$nbMasses := 20 //25 number of particules

$mass_mass := 300.


$masses := []
$massSkins := []
$limitLines := []
// $out_pos := []
// 3D tab
$out_pos_final := [  0 | ($nbMasses*3) ]
$mLim := 0.1
$limitCoords := [
				[0, -1, 0, 0, $mLim, 0], //top
				[1, 0, 0, $mLim.neg(), 0, 0], //left
				[-1, 0, 0, $mLim, 0, 0], //right
				[0, 1, 0, 0, $mLim.neg(), 0], //bottom
				[0, 0, 1, 0, 0, $mLim.neg()], //abajo
				[0, 0, -1, 0, 0, $mLim]//arriba
			]


// audio group decoder

// obj::mix_group_HOA("group1", "localhost", "studio1", 3)
// obj::mix_group_HOA("group_hoa1", "localhost", "Lebedev50", 3, "hrir_christophe_lebedev50") // binaural decoding/convolution, first load hrir_buffer

// obj::mix_group_HOA("group1", "localhost", "hexa", $hoa_order)

// $hoa_bus := $groups("group1").$hoa_bus //recupere bus hoa du mix_group_HOA "group1"

// $synths := [ [ ["Form_HOA_"+$hoa_order, "mul", 1/($i+0.00001), "freq", (1/($i+1)*600)+150, "globTBus", $hoa_bus ]] | $i in $nbMasses ]

// obj::crea_track_HOA("gaz_molecules", "group1", fade_in = 5, amp = -30, $synths.flatten(1), encoder = false)


					//  Plane3D($vX,   $vY,   $vZ,   $x0,   $y0,   $z0,   $fN, $kN,  $kT, $d,  $pMax,   $dN, $dKN) 
$limitLines := [ obj::Plane3D($x[0], $x[1], $x[2], $x[3], $x[4], $x[5], kN = 100.0) |$x in $limitCoords ]

$limitLines := $limitLines
		
forall $iter in $nbMasses
{
	$coords := [$mLim.rand2(), $mLim.rand2(), $mLim.rand2()] // random init coords XYZ
	// $vcoords := [@rand_range_int(-1, 2), @rand_range_int(-1, 2), @rand_range_int(-1, 2)]
	print (""+$coords)
	$masses.push_back(obj::Mass3D($mass_mass, $coords))

	// kT = 0.0, rN = 0.0, rT = 0.0,  dn = 0.0, dt = 0.0, dRN = 0.0, dRT = 0.0 d = 0.0,  g = 0.0, dN = 0.0, dT = 0.0
							  //Circle2D($coords[0], $coords[1], 0.0001, $diam*1.3, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
					// @obj_def Circle2D($posX, $posY, $rMin, $rMax, $fN, $fT, $kN, $kT, $rN, $rT, $dn, $dt, $dRN, $dRT, $d, $g, $dN, $dT)
				// @obj_def   Circle3D($vX, $vY, $vZ, $x0, $y0, $z0, $rMin, $rMax, $fN, $kN,  $kT,  $d, $pMax, $dN, $dKN) 
	// $massSkins.push_back(obj::Circle3D($vcoords[0], $vcoords[1], $vcoords[2], $coords[0], $coords[1], $coords[2], 0.0001, $diam*1.3, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0))
}

print masses (""+$masses)
print massSkins (""+$massSkins)
print limitLines (""+$limitLines)

// @obj_def Ambient3D($forceX, $forceY, $forceZ, $randomFX, $randomFY, $randomFZ, $damp, $xMin, $xMax, $yMin, $yMax, $zMin, $zMax, $dX, $dY, $dZ) 
$ambient := obj::Ambient3D(randomFX = 3, randomFY = 3, randomFZ= 3); //init displacement of the masses;

// Applique une force d'initialisation random x, y, z
forall $imass in $masses
{
	$imass.inter_ambient($ambient)
}

group gaz_molecules_3D
{
	loop 0.02
	{
		@local $i := 0

		forall $mss in $masses
		{
			$mss.trig()
			// _ := $massSkins[$i].setXYZ($mss.$position_out)

			// forall $circle in $massSkins
			// {
			// 	$mss.inter_circle($circle)
			// }
			// $mss.inter_plane($limitLines)
			forall $line in $limitLines
			{
				$mss.inter_plane($line)
			}

			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			// print velocity_out ($mss.$velocity_out[2])
			// $tracks("gaz_molecules").set_single("Form_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[2].scale_compiled(0, 0.1, 0, 0.01, 1).clip_compiled(0, 0.1), "bpf", $mss.$velocity_out[2].scale_compiled(0, 0.1, 100, 5000, 1), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", ($mss.$position_out[2]+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),
			
			$i += 1
		}		
		of_molecules $out_pos_final
	}
}

NOTE 60 1 gravity_billes


$period := 10
$winSize := 500
$diam := 0.05
$radius := 0
$limit := 6;
$nbLines := 6
$nbCol := 5
$vertSpacing := 0.3
$vertCoor := []
$horSpacing := 0.5;
$masses := 0
$massSkins := 0
$nbMasses := 0
$horCoor := 0
$presText := 0
$run := true
$view := 0
$window := 0
$controlWindow := 0
$invLimit := 0
$resolution := 0
$pen := 0
$spex := 0
$default := 0
$showCbutt := 0
$popup := 0
$presets := 0
$updateF := 0
$resetF := 0
$ambient := 0
$bigCircles := 0
$circleRad := 2.9
$xOffset := 3
$yOffset := 0
$xCoords := 0
$yCoords := 0
$synths := 0



$resolution := $winSize / ($limit*2)//pix
$radius := $diam * 0.5
$limit := $limit - $radius 
$limit_bas := 2

$invLimit := 1/$limit
$nbMasses := $nbCol*$nbLines

$out_pos_final := [  0 | ($nbMasses*3) ]

print limit $limit
print nbMasses $nbMasses
// vertCoor = Array.series(nbLines, 0, vertSpacing.neg)+ limit;//- (nbLines - 1 * vertSpacing* 0.5);

$vertCoor := [ ($i*$vertSpacing.neg() + $limit)  | $i in $nbLines ]

print (""+$vertCoor)

$horCoor := [ $i*$horSpacing | $i in $nbCol] - (($nbCol - 1) * $horSpacing * 0.5) 

print horCoor (""+$horCoor)

$hoa_order := 4 // hoa order

obj::mix_group_HOA(group1, "localhost", "studio1", 4)

$hoa_bus := $groups(group1).$hoa_bus //recupere bus hoa du mix_group_HOA "group1"

// synths = {|i| Synth(\sandSine, [\freq, exprand(5000, 8000), \amp, rrand(1/nbMasses*0.7, 1/nbMasses)])}!nbMasses;

$synths := [ ["SandSine_HOA_"+$hoa_order, freq, @rand_range(5000, 8000), aamp, @rand_range(1/$nbMasses*0.7, 1/$nbMasses), globTBus, $hoa_bus ] | $i in $nbMasses ]
// print synths (""+$synths)

obj::crea_track_HOA(sable, group1, fade_in = 0.1, amp = 0, $synths, encoder = false) 
	
// tableau comprehension genere une grille de links en 2D
// [Mass2D(1, [hor, ver], setMinY: limit.neg, setT: 0.9), Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]
//  Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]

$masses := [ [ obj::Mass2D(1, [$hor, $ver], -100000, 100000, $limit_bas.neg(), 100000, 0.9) | $hor in $horCoor ] |  $ver in $vertCoor ] // contruction de la grille
$masses := $masses.flatten()

$massSkins := [ [ obj::Circle2D($hor, $ver, 0.0001, $diam, 0, 0, 1, dn = 0.31) | $hor in $horCoor ] |  $ver in $vertCoor ]
$massSkins := $massSkins.flatten()

$xCoords := [$xOffset.neg(), $xOffset]
$yCoords := [$yOffset.neg(), $yOffset]

$bigCircles := [ obj::Circle2D($x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1) | $x in $xCoords ]


// $bigCircles := $xCoords.collect {|x| Circle2D(x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1)  };


$ambient := obj::Ambient2D(0, -0.0005, 0, 0, 0.03, -10000) //init displacement of the masses;
//        ambient = Ambient2D(0, -0.0005, 0, 0, 0.03); //init displacement of the masses;


// forall $imass in $masses
// {
// 	_ := $imass.inter_ambient($ambient)
// }

// forall $imass in $masses
// {
// 	print masse_setMinY (""+($imass[0].$setXY))
// }

// print masses(""+$masses)

// print toto (""+$massSkins[0].$posX_old)

// print masse_setMinY (""+($masses[0].$setMinY))
// print masse+masseskins ($masses[0]) ($massSkins[0])
// print masseskins ($massSkins[0].$posX)
// print limitLines ($limitLines[0].$x1)
// print limitLines ($limitLines[0].$y1)
// print limitLines ($limitLines[0].$x2)
// print limitLines ($limitLines[0].$y2)

// print titi (""+$masses[0].inter_circle($massSkins[0]))
// print tutu (""+$masses[0].inter_line($limitLines[0]))

group gravity_billes
{
	loop 0.02
	{
		@local $i := 0

		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			_ := $massSkins[$i].setXY($mss.$position_out)

			forall $circle in $massSkins
			{
				$mss.inter_circle($circle)
			}
			forall $bcircle in $bigCircles
			{
				$mss.inter_circle($bcircle)
			}


			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]

			// print velocity_out ($mss.$velocity_out[2])
			// $tracks("gaz_molecules").set_single("Form_HOA_"+$hoa_order, $i, ["mul", $mss.$velocity_out[2].scale_compiled(0, 0.1, 0, 0.01, 1).clip_compiled(0, 0.1), "bpf", $mss.$velocity_out[2].scale_compiled(0, 0.1, 100, 5000, 1), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),
			// $tracks("sable").set_single("SandSine_HOA"+$hoa_order, $i, ["mul", $mss.$velocity_out[2].scale_compiled(0, 0.1, 0, 0.01, 1).clip_compiled(0, 0.1), "bpf", $mss.$velocity_out[2].scale_compiled(0, 0.1, 100, 5000, 1), "x", ($mss.$position_out[0]+$HOA_global_x), "y", ($mss.$position_out[1]+$HOA_global_y), "z", (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),
			$tracks(sable).set_single("SandSine_HOA_"+$hoa_order, $i, [mul, $mss.$force_out[2].linexp_compiled(0, 0.002, 0.00001, 1).clip_compiled(0, 1), bpf, ($mss.$position_out[1]+$limit).linexp_compiled(0, $limit*4, 3000, 10000).clip_compiled(3000, 10000), gatee, $mss.$force_out[2]*100 -  0.15, x, ($mss.$position_out[0]+$HOA_global_x), y, ($mss.$position_out[1]+$HOA_global_y), z, (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),

			$i += 1
			// print (""+$mss.$position_out)
		}		
		

		of_molecules $out_pos_final
		// print (""+$out_pos_final)
		// of_list3D ($out_pos_final.flatten())
	}
}

// $Servers("localhost").g_dumpTree(0, 1)


		// synths[i].set(
		// 	\pan, mss.position_out[0]*invLimit,
		// 	\bpf, (mss.position_out[1]+limit).linexp(0, limit*4, 3000, 10000).clip(3000, 10000),
		// 	\gate, mss.force_out[2]*100 -  0.15,
		// 	\mul, mss.force_out[2].linexp(0, 0.002, 0.00001, 1).clip(0, 1)
// updateF = {
// 	masses.do {|mss, i|
// 		mss.trig;
// 		mss.inter_ambient(ambient);
// 		massSkins[i].setXY(mss.position_out);
// 		massSkins.do {|circle|mss.inter_circle(circle)};
// 		bigCircles.do {|circle|mss.inter_circle(circle)};
// 		pen.drawMass(mss, i, view.showM );

// 		synths[i].set(
// 			\pan, mss.position_out[0]*invLimit,
// 			\bpf, (mss.position_out[1]+limit).linexp(0, limit*4, 3000, 10000).clip(3000, 10000),
// 			\gate, mss.force_out[2]*100 -  0.15,
// 			\mul, mss.force_out[2].linexp(0, 0.002, 0.00001, 1).clip(0, 1)
// 		);
// 	};
// };


NOTE 60 1 gravity_billes_lluvia2D


$period := 10
$winSize := 500
$diam := 0.05
$radius := 0
$limit := 6;
$nbLines := 6
$nbCol := 5
$vertSpacing := 0.3
$vertCoor := []
$horSpacing := 0.5;
$masses := []
$massSkins := []
$nbMasses := 0
$horCoor := 0
$presText := 0
$run := true
$view := 0
$window := 0
$controlWindow := 0
$invLimit := 0
$resolution := 0
$pen := 0
$spex := 0
$default := 0
$showCbutt := 0
$popup := 0
$presets := 0
$updateF := 0
$resetF := 0
$ambient := 0
$bigCircles := 0
$circleRad := 2.9
$xOffset := 3
$yOffset := 0
$xCoords := 0
$yCoords := 0
$synths := 0



$resolution := $winSize / ($limit*2)//pix
$radius := $diam * 0.5
$limit := $limit - $radius 
$limit_bas := 2

$invLimit := 1/$limit
$nbMasses := $nbCol*$nbLines

$out_pos_final := [  0 | ($nbMasses*3) ]

print limit $limit
print nbMasses $nbMasses
// vertCoor = Array.series(nbLines, 0, vertSpacing.neg)+ limit;//- (nbLines - 1 * vertSpacing* 0.5);

$vertCoor := [ ($i*$vertSpacing.neg() + $limit)  | $i in $nbLines ]

print (""+$vertCoor)

$horCoor := [ $i*$horSpacing | $i in $nbCol] - (($nbCol - 1) * $horSpacing * 0.5) 

print horCoor (""+$horCoor)

$hoa_order := 4 // hoa order

// obj::mix_group_HOA(group1, "localhost", "studio1", 4)

// $hoa_bus := $groups(group1).$hoa_bus //recupere bus hoa du mix_group_HOA "group1"

// synths = {|i| Synth(\sandSine, [\freq, exprand(5000, 8000), \amp, rrand(1/nbMasses*0.7, 1/nbMasses)])}!nbMasses;

// $synths := [ ["SandSine_HOA_"+$hoa_order, freq, @rand_range(5000, 8000), aamp, @rand_range(1/$nbMasses*0.7, 1/$nbMasses), globTBus, $hoa_bus ] | $i in $nbMasses ]
// print synths (""+$synths)

// obj::crea_track_HOA(sable, group1, fade_in = 0.1, amp = 0, $synths, encoder = false) 
	
// tableau comprehension genere une grille de links en 2D
// [Mass2D(1, [hor, ver], setMinY: limit.neg, setT: 0.9), Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]
//  Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]

loop 1
{
	$hor := @rand_range(-1, 1)
	$ver := @rand_range(3, 4)
	$masses.push_back(obj::Mass2D(1, [$hor, $ver], -100000, 100000, $limit_bas.neg(), 100000, 0.9))
	$massSkins.push_back(obj::Circle2D($hor, $ver, 0.0001, $diam, 0, 0, 1, dn = 0.31))
}
// $masses := [ [ obj::Mass2D(1, [$hor, $ver], -100000, 100000, $limit_bas.neg(), 100000, 0.9) | $hor in $horCoor ] |  $ver in $vertCoor ] // contruction de la grille
// $masses := $masses.flatten()

// $massSkins := [ [ obj::Circle2D($hor, $ver, 0.0001, $diam, 0, 0, 1, dn = 0.31) | $hor in $horCoor ] |  $ver in $vertCoor ]
// $massSkins := $massSkins.flatten()

$xCoords := [$xOffset.neg(), $xOffset]
$yCoords := [$yOffset.neg(), $yOffset]

$bigCircles := [ obj::Circle2D($x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1) | $x in $xCoords ]


$limitLines := obj::Line2D(-1.5, -1.99, 1.5, -1.99, 1000.0, kN = .5)

// $bigCircles := $xCoords.collect {|x| Circle2D(x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1)  };


$ambient := obj::Ambient2D(0, -0.0005, 0, 0, 0.03, -10000) //init displacement of the masses;
//        ambient = Ambient2D(0, -0.0005, 0, 0, 0.03); //init displacement of the masses;



group gravity_billes
{
	loop 0.02
	{
		@local $i := 0

		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			_ := $massSkins[$i].setXY($mss.$position_out)

			forall $circle in $massSkins
			{
				$mss.inter_circle($circle)
			}
			forall $bcircle in $bigCircles
			{
				$mss.inter_circle($bcircle)
			}

			$mss.inter_line($limitLines)

			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]

			// $tracks(sable).set_single("SandSine_HOA_"+$hoa_order, $i, [mul, $mss.$force_out[2].linexp_compiled(0, 0.002, 0.00001, 1).clip_compiled(0, 1), bpf, ($mss.$position_out[1]+$limit).linexp_compiled(0, $limit*4, 3000, 10000).clip_compiled(3000, 10000), gatee, $mss.$force_out[2]*100 -  0.15, x, ($mss.$position_out[0]+$HOA_global_x), y, ($mss.$position_out[1]+$HOA_global_y), z, (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),

			$i += 1
			// print (""+$mss.$position_out)
		}		
		

		of_molecules $out_pos_final
		// print (""+$out_pos_final)
		// of_list3D ($out_pos_final.flatten())
	}
}

10 group
{
	loop 1
	{

		$masses.remove(0)
		$massSkins.remove(0)
	}
}

NOTE 1 60 gravity_billes_lluvia3D


$period := 10
$winSize := 500
$diam := 0.05
$radius := 0
$limit := 6;
$nbLines := 6
$nbCol := 5
$vertSpacing := 0.3
$vertCoor := []
$horSpacing := 0.5;
$masses := []
$massSkins := []
$nbMasses := 0
$horCoor := 0
$presText := 0
$run := true
$view := 0
$window := 0
$controlWindow := 0
$invLimit := 0
$resolution := 0
$pen := 0
$spex := 0
$default := 0
$showCbutt := 0
$popup := 0
$presets := 0
$updateF := 0
$resetF := 0
$ambient := 0
$bigCircles := 0
$circleRad := 2.9
$xOffset := 3
$yOffset := 0
$xCoords := 0
$yCoords := 0
$synths := 0



$resolution := $winSize / ($limit*2)//pix
$radius := $diam * 0.5
$limit := $limit - $radius 
$limit_bas := 0.

$invLimit := 1/$limit
$nbMasses := $nbCol*$nbLines

$out_pos_final := [  0 | ($nbMasses*3) ]

print limit $limit
print nbMasses $nbMasses
// vertCoor = Array.series(nbLines, 0, vertSpacing.neg)+ limit;//- (nbLines - 1 * vertSpacing* 0.5);

$vertCoor := [ ($i*$vertSpacing.neg() + $limit)  | $i in $nbLines ]

print (""+$vertCoor)

$horCoor := [ $i*$horSpacing | $i in $nbCol] - (($nbCol - 1) * $horSpacing * 0.5) 

print horCoor (""+$horCoor)

$hoa_order := 4 // hoa order

// obj::mix_group_HOA(group1, "localhost", "studio1", 4)

// $hoa_bus := $groups(group1).$hoa_bus //recupere bus hoa du mix_group_HOA "group1"

// synths = {|i| Synth(\sandSine, [\freq, exprand(5000, 8000), \amp, rrand(1/nbMasses*0.7, 1/nbMasses)])}!nbMasses;

// $synths := [ ["SandSine_HOA_"+$hoa_order, freq, @rand_range(5000, 8000), aamp, @rand_range(1/$nbMasses*0.7, 1/$nbMasses), globTBus, $hoa_bus ] | $i in $nbMasses ]
// print synths (""+$synths)

// obj::crea_track_HOA(sable, group1, fade_in = 0.1, amp = 0, $synths, encoder = false) 
	
// tableau comprehension genere une grille de links en 2D
// [Mass2D(1, [hor, ver], setMinY: limit.neg, setT: 0.9), Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]
//  Circle2D(hor, ver, 0.0001, diam, 0, 0, 1, dn: 0.31)]

$diam := 0.01

loop 0.5
{
	$x_coord := @rand_range(-0.1, 0.1) //  0.1
	$y_coord := @rand_range(-0.1, 0.1) //  0.1
	$z_coord := 1. //@rand_range(0.1, 0.2) //  1. 
	// $masses.push_back(obj::Mass3D(1.0, [$x_coord, $y_coord, $z_coord], setMinZ =  $limit_bas.neg(), setT = 0.9))
	$masses.push_back(obj::Mass3D(1.0, [$x_coord, $y_coord, $z_coord], setT = 0.9))

	print coords (""+[$x_coord, $y_coord, $z_coord])
	$massSkins.push_back(obj::Circle3D(0.0, 0.0, 0.0, $x_coord, $y_coord, $z_coord, 0.0001, $diam, kN = 0.0, dN = 0.031))
}
// $masses := [ [ obj::Mass2D(1, [$hor, $ver], -100000, 100000, $limit_bas.neg(), 100000, 0.9) | $hor in $horCoor ] |  $ver in $vertCoor ] // contruction de la grille
// $masses := $masses.flatten()

// $massSkins := [ [ obj::Circle2D($hor, $ver, 0.0001, $diam, 0, 0, 1, dn = 0.31) | $hor in $horCoor ] |  $ver in $vertCoor ]
// $massSkins := $massSkins.flatten()

$xCoords := [$xOffset.neg(), $xOffset]
$yCoords := [$yOffset.neg(), $yOffset]

// $bigCircles := [ obj::Circle2D($x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1) | $x in $xCoords ]

				// [0, 0, 1, 0, 0, $mLim.neg()], //abajo

$limitLines := obj::Plane3D(0, 0, 1, 0, 0, -0.2, kN = 2)


// $bigCircles := $xCoords.collect {|x| Circle2D(x, 0,  0,  $circleRad,  0,  0,  1,  0,  0,  0,  0.1)  };

// @obj_def Ambient2D($forceX = 0.0, $forceY = 0.0, $randomFX = 0.0, $randomFY = 0.0, $damp = 0.0, $xMin = -100000.0, $xMax = 100000.0, $yMin = -100000.0,  $yMax = 100000.0, $dX = 0.0, $dY = 0.0) 
// $ambient := obj::Ambient2D(0, -0.0005, 0, 0, 0.03, -10000) //init displacement of the masses;
//        ambient = Ambient2D(0, -0.0005, 0, 0, 0.03); //init displacement of the masses;

// @obj_def Ambient3D($forceX = 0.0, $forceY = 0.0, $forceZ = 0.0, $randomFX = 1.0, $randomFY = 1.0, $randomFZ = 1.0, $damp = 0.0, $xMin = -100000.0, $xMax = 100000.0, $yMin = -100000.0, $yMax = 100000.0, $zMin = -100000.0, $zMax = 100000.0, $dX = 0.0, $dY = 0.0, $dZ = 0.0) 
$ambient := obj::Ambient3D(0, 0, -0.001, 0, 0, 0, 0.03) //init displacement of the masses;


group gravity_billes
{
	loop 0.02
	{
		@local $i := 0

		forall $mss in $masses
		{
			$mss.trig()
			$mss.inter_ambient($ambient)
			_ := $massSkins[$i].setXYZ($mss.$position_out)

			forall $circle in $massSkins
			{
				$mss.inter_circle($circle)
				// $circle.setXYZ($mss.$position_out)
			}
			// forall $bcircle in $bigCircles
			// {
			// 	$mss.inter_circle($bcircle)
			// }

			$mss.inter_plane($limitLines)

			$out_pos_final[$i*3] := $mss.$position_out[0]
			$out_pos_final[$i*3+1] := $mss.$position_out[1]
			$out_pos_final[$i*3+2] := $mss.$position_out[2]
			// $tracks(sable).set_single("SandSine_HOA_"+$hoa_order, $i, [mul, $mss.$force_out[2].linexp_compiled(0, 0.002, 0.00001, 1).clip_compiled(0, 1), bpf, ($mss.$position_out[1]+$limit).linexp_compiled(0, $limit*4, 3000, 10000).clip_compiled(3000, 10000), gatee, $mss.$force_out[2]*100 -  0.15, x, ($mss.$position_out[0]+$HOA_global_x), y, ($mss.$position_out[1]+$HOA_global_y), z, (0+$HOA_global_z)]) // ($mss.$position_out[1]+$limit).scale_compiled(0, $limit*4, 200, 8000, 1).clip_compiled(200, 10000)]) // "freq", $mss.$position_out[0].scale_compiled(-0.01, 0.01, 30, 500, 1),

			$i += 1
			// print (""+$mss.$position_out)
		}		
		

		of_molecules $out_pos_final
		// print (""+$out_pos_final)
		// of_list3D ($out_pos_final.flatten())
	}
}

5 group
{
	loop 0.5
	{

		$masses.remove(0)
		$massSkins.remove(0)
	}
}




NOTE 60 1 play_curvatura

obj::mix_group("player", "localhost") // audio group					

obj::crea_track("play_8ch", "player")

$tracks("play_8ch").play_sample8("Curvatura-extrait-8ch.aif", 0)



NOTE 60 1 Curvatura1

$sc_group1 := obj::mix_group("group1", "localhost")

$sc_group_play_samp := obj::crea_track8s(0, 1, 0, [["TAddic_5_8", "preset", "synth6_2", "lag", 0], ["TGranInterpExt", "envbuf0", $envs("pointe"), "envbuf1", $envs("inv")]], "group1")

// crea_track8 $track 0 $fadeIn -120 TAddic_5_8 #preset $preset lag 0 #-> TGranInterpExt envbuf0 $buf_env0 envbuf1 $buf_env1 #-> TPan8 pos 0 #group $group
// $obj_synth6_2 := obj::play_Ingran_const("synth6_2", "synth6_2", $envs("pointe"), $envs("inv"),1 ,1 ,1 ,0, 120, 1, "group2")
// @obj_def play_Ingran_const($track, $preset, $buf_env0, $buf_env1, $rit, $prob, $rate, $rate_dev, $tempo, $fadeIn, $group)
_ := $sc_group_play_samp.ryth_prob("TGranInterpExt", "t_trig", 1, 0.7, 0.1, 0.2, 60)


_ := $sc_group1.off_group(1)
_ := $sc_group_play_samp.off_track(1)
 // crea_track8 $track set 01_TGranInterpExt t_trig 1

// print ($envs("inv"))
// 	


NOTE 60 1 test_HOA_Studio1_spheric1

//@obj_def mix_group_HOA($group_name, $server_name, $decoder, $order)

$sc_hoa_group1 := obj::mix_group_HOA("group_hoa", "localhost", "studio1", 3) // test pitch, roll, yaw

// _ := $sc_hoa_group1.off_track(1)

$sc_track_hoa1 := obj::crea_track_HOA(0, 1, -3, [["Impulse_Pluck", "freq", 548.83099365234, "freq_imp", 12.770000457764, "del", 0.0060000000521541, "amp", 0]], "group_hoa")

_ := $sc_track_hoa1.doppler(0)
_ := $sc_track_hoa1.amp(0)
_ := $sc_track_hoa1.set("Impulse_Pluck", ["freq_imp", 1])

////////////////////////////////////////////////////////////

_ := $sc_hoa_group1.HOABeamDirac2Hoa()
oscrecv ambi_rotate 6673 * $hoa_filter

group oscrecv_hoa_filter // pour HOABeamDirac2Hoa
{
	whenever ($hoa_filter)
	{
		// print (""+$hoa_filter)

		switch ($hoa_filter[0])
		{
	      	case "/hoa_filter/filter_az":
	      	_ := $sc_hoa_group1.HOABeamDirac_az($hoa_filter[1])
	      	print az ($hoa_filter[1])
	      	case "/hoa_filter/filter_ele":
	      	_ := $sc_hoa_group1.HOABeamDirac_ele($hoa_filter[1])
	      	print ele ($hoa_filter[1])

		}
	}
}
////////////////////////////////////////////////////////////

// _ := $sc_track_hoa1.set("Impulse_Pluck", ["amp", 0])

// _ := $sc_hoa_group1.off_group(1)
	///// OSC /////

// recever OSC from openFrameworks
oscrecv ambi_test 6669 * $ambi_test

// send to openFrameworks interface

group oscrecv_ofx_test
{
	whenever ($ambi_test)
	{
		// print (""+$ambi_test)

		switch ($ambi_test[0])
		{
	      	case "/ambi_test/ambiX":
	      	_ := $sc_track_hoa1.ambi_x($ambi_test[1])
	      	// print ambiX ($ambi_test[1])
	      	case "/ambi_test/ambiY":
	      	_ := $sc_track_hoa1.ambi_y($ambi_test[1])
	      	// print ambiY ($ambi_test[1])
	      	case "/ambi_test/ambiZ":
	      	_ := $sc_track_hoa1.ambi_z($ambi_test[1])
	      	// print ambiZ ($ambi_test[1])
	      	// control loop
	      	case "/ambi_test/radio":
	      	$ambi_radio := $ambi_test[1]
	      	// _ := $sc_track_hoa1.ambi_x($ambi_test[1])
	      	case "/ambi_test/theta":
	      	$ambi_theta := $ambi_test[1]
	      	// _ := $sc_track_hoa1.ambi_y($ambi_test[1])
		}
	}
}

// abort oscrecv_ofx_test
$ambi_theta := 80
$ambi_radio := 0.5
$ambi_phi := 0


loop lopptest 0.01
{
		$poltocar := @poltocar3D($ambi_radio , $ambi_theta, $ambi_phi)
		_ := $sc_track_hoa1.ambi_x($poltocar[0])
		_ := $sc_track_hoa1.ambi_y($poltocar[1])
		_ := $sc_track_hoa1.ambi_z($poltocar[2])
		ambiX ($poltocar[0])
		ambiY ($poltocar[1])
		ambiZ ($poltocar[2])
		// print (""+$poltocar)
		// $ambi_theta += 1
		$ambi_phi := ($ambi_phi + 1) % 360
		// print $ambi_phi
}

oscrecv ambi_rotate 6671 * $ambi_rotate

group oscrecv_ambi_rotate
{
	whenever ($ambi_rotate)
	{
		// print (""+$ambi_rotate)

		switch ($ambi_rotate[0])
		{
	      	case "/ambi_rotate/pitch":
	      	_ := $sc_track_hoa1.pitch($ambi_rotate[1])
	      	print pitch ($ambi_rotate[1])
	      	case "/ambi_rotate/roll":
	      	_ := $sc_track_hoa1.roll($ambi_rotate[1])
	      	print roll ($ambi_rotate[1])
	      	case "/ambi_rotate/yaw":
	      	_ := $sc_track_hoa1.yaw($ambi_rotate[1])
	      	print yaw ($ambi_rotate[1])
		}
	}
}

// print @ang2rad(90)

NOTE 60 1 test_HOA_Studio1_spheric2_stop

abort lopptest
// abort oscrecv_ofx_test


NOTE 60 1 test_HOA_Studio1_spheric2


// $proc_rand_theta := $sc_track_hoa1.ambi_rand_lfo_sphere($radio, $theta_min, $theta_max, $phi_min, $phi_max, $init_theta, $init_phi, $type, $tpo)


_ := $sc_track_hoa1.ambi_rand_lfo_sphere(0.3, -200, 10, 0, 360, 0, 0, "linear", 200)

NOTE 60 1 test_HOA_Studio1_spheric2_stop

_ := $sc_track_hoa1.ambi_rand_lfo_sphere_abort()




NOTE 60 1 hoa_grain_rand1_Studio1

$sc_hoa_group_bin_grain := obj::mix_group_HOA("group_hoa_std1", "localhost", "studio1", 3)
_ := $sc_hoa_group_bin_grain.off_group(1)

print ($SF_map("caisse-claire1.aif"))
// @proc_def 		  HOA_grain_xyz_rand_fix($buf, 						$envbuf, $rate_min, $rate_max, $pos_min, $pos_max, $ryth_min, $ryth_max, $env_dur_min, $env_dur_max, $x_min, $x_max, $y_min, $y_max, $z_min, $z_max, $amp, $mix_group_decoder, $grain_group)
$test_gran_proc1 := ::HOA_grain_xyz_rand_fix($SF_map("caisse-claire1.aif"), $envs("pointe"), 0.9, 1.1, 0, 1, 0.002, 0.02, 0.05, 0.1, 0.5, 0.6, 0.5, 0.6, 0, 0.6, 0, "group_hoa_std1", 5)
$test_gran_proc2 := ::HOA_grain_xyz_rand_fix($SF_map("bongo1.aif"), $envs("perc"), 0.9, 1.1, 0, 1, 0.002, 0.02, 0.05, 0.1, -0.5, -0.6, 0.5, 0.6, 0, 0.6, 0, "group_hoa_std1", 1)

abort $test_gran_proc1
abort $test_gran_proc2

NOTE 60 1 hoa_grain_rand2_Studio1

$sc_hoa_group_bin_grain := obj::mix_group_HOA("group_hoa_std1", "localhost", "studio1", 5)
$sc_hoa_group_bin_grain := obj::mix_group_HOA("group_hoa_std1_s2", "localhost", "studio1", 5)


	$test_gran_obj1 := obj::HOA_grain_xyz_rand_pos_mod($SF_map("caisse-claire1.aif"), $envs("perc"), 0.9, 1.1, 0, 1, 0.002, 0.02, 0.01, 0.05, -1.5, 1.5, -1.5, 1.5, 0, 0.6, -6, "group_hoa1", 5)
	$test_gran_obj2 := obj::HOA_grain_xyz_rand_pos_mod($SF_map("bongo1.aif"), 60, 0.9, 1.1, 0, 1, 0.002, 0.02, 0.01, 0.05, -0.5, 0.5, -0.5, 0.5, 0, 0.6, 0, "group_hoa_std1", 1)

	abort $test_gran_obj1
	abort $test_gran_obj2


NOTE 60 1 hoa_grain_rand3_Studio1

// HOA_grain_xyz_rand_pos_mod2($buf, $envbuf, $rate_min, $rate_max, $pos_min, $pos_max, $ryth_min, $ryth_max, $env_dur_min, $env_dur_max, $x_min, $x_max, $y_min, $y_max, $z_min, $z_max, $rand_lfo_x_min, $rand_lfo_x_max, $rand_lfo_y_min, $rand_lfo_y_max, $rand_lfo_z_min, $rand_lfo_z_max, $pos_lfo_min, $pos_lfo_max, $amp, $mix_group_decoder, $grain_group)

	$test_gran_obj3 := obj::HOA_grain_xyz_rand_pos_mod2($SF_map("caisse-claire1.aif"), $envs("perc"), 0.9, 1.1, 0, 0.001, 0.002, 0.02, 0.05, 0.15, -0.05, 0.05, -0.05, 0.05, 0, 0.6, -0.5, 0.5, -0.5, 0.5, 0, 0.6, 0., 0.1, 3, "group_hoa_std1", 1)
	$test_gran_obj4 := obj::HOA_grain_xyz_rand_pos_mod2($SF_map("bongo1.aif"), $envs("pointe"), 0.9, 1.1, 0, 0.2, 0.002, 0.02, 0.05, 0.15, -0.05, 0.05, -0.05, 0.05, 0, 0.6, -0.5, 0.5, -0.5, 0.5, 0, 0.6, 0., 1., -12, "group_hoa_std1_s2", 2)
	$test_gran_obj5 := obj::HOA_grain_xyz_rand_pos_mod2($SF_map("bongo1.aif"), $envs("pointe"), 0.9, 1.1, 0, 0.001, 0.002, 0.02, 0.05, 0.15, -0.05, 0.05, -0.05, 0.05, 0, 0.6, -0.5, 0.5, -0.5, 0.5, 0, 0.6, 0., 0.1, 6, "group_hoa_std1_s2", 3)

abort $test_gran_obj3
abort $test_gran_obj4
abort $test_gran_obj5

NOTE 60 1 test_HOA_play_eigenmike

// ordre 3 = 16 channels
$sc_hoa_group_play_eigenmike := obj::mix_group_HOA("group_hoa_std1", "localhost", "studio1", 3)

$sc_track_hoa_play_eigenmike := obj::crea_track_HOA(0, 1, -3, [], "group_hoa_std1")
// _ := $sc_track_hoa_play_eigenmike.set("TPlaybuf16", ["loop", 0])

_ := $sc_track_hoa_play_eigenmike.play_sample16("eigen_ACN_N3D_Montreal_LePlateau_Backyard_short.wav", 0, 1) // sample, volume in dB; loop
// _ := $sc_track_hoa_play_eigenmike.play_sample16("eigen_ACN_N3D_CIRMMT_Foyer_short.wav", 0, 1) // sample, volume in dB; loop
// _ := $sc_track_hoa_play_eigenmike.play_sample16("eigen_ACN_N3D_Montreal_Metro_cello.wav", 0, 1) // sample, volume in dB; loop
// _ := $sc_track_hoa_play_eigenmike.play_sample16("eigen_ACN_N3D_Montreal_Metro.wav", 0, 1) // sample, volume in dB; loop



NOTE 60 1 test_HOA_play_eigenmike_filters

// _ := $sc_hoa_group_play_eigenmike.mod_add("HOA_Filter_HOABeamDirac2Hoa3") //add HOA filter

//add HOA filter
_ := $sc_hoa_group_play_eigenmike.HOABeamDirac2Hoa()
_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa()

_ := $sc_hoa_group_play_eigenmike.HOABeamDirac2Hoa_off(1)
_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_off(1)

// change filter params
// _ := $sc_hoa_group_play_eigenmike.set("HOA_Filter_HOABeamDirac2Hoa3", ["az", 1, "ele", 0.5])


_ := $sc_hoa_group_play_eigenmike.HOABeamDirac_az(1.5)
_ := $sc_hoa_group_play_eigenmike.HOABeamDirac_ele(0.5)

_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_az(180)
_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_ele(0)
_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_cardOrder(20)

// remove filter
_ := $sc_hoa_group_play_eigenmike.mod_kill("HOA_Filter_HOABeamDirac2Hoa3", 1)

// stop audio soundFile
_ := $sc_track_hoa_play_eigenmike.play_sample16_stop("eigen_acn_n3d_montreal_metro_cello.wav", 1)


oscrecv ambi_rotate 6673 * $hoa_filter

group oscrecv_hoa_filter // pour HOABeamDirac2Hoa
{
	whenever ($hoa_filter)
	{
		// print (""+$hoa_filter)

		switch ($hoa_filter[0])
		{
	      	case "/hoa_filter/filter_az":
	      	_ := $sc_hoa_group_play_eigenmike.HOABeamDirac_az($hoa_filter[1])
	      	print az ($hoa_filter[1])
	      	case "/hoa_filter/filter_ele":
	      	_ := $sc_hoa_group_play_eigenmike.HOABeamDirac_ele($hoa_filter[1])
	      	print ele ($hoa_filter[1])

		}
	}
}

group oscrecv_hoa_filter // pour HOABeamHCard2Hoa
{
	whenever ($hoa_filter)
	{
		// print (""+$hoa_filter)

		switch ($hoa_filter[0])
		{
	      	case "/hoa_filter/filter_az":
	      	_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_az($hoa_filter[1])
	      	print az ($hoa_filter[1])
	      	case "/hoa_filter/filter_ele":
	      	_ := $sc_hoa_group_play_eigenmike.HOABeamHCard2Hoa_ele($hoa_filter[1])
	      	print ele ($hoa_filter[1])

		}
	}
}

NOTE 60 1 test_HOA_play_samples_filters

$sc_hoa_group1 := obj::mix_group_HOA("group_hoa1", "localhost", "studio1", 3)

$sc_track_play_sample1 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
	_ := $sc_track_play_sample1.play_sample("flexatone-large+bow.aif", 0, 1) // sample, volume in dB; loop
	_ := $sc_track_play_sample1.ambi_x(0.315)
	_ := $sc_track_play_sample1.ambi_y(0.3)
	_ := $sc_track_play_sample1.ambi_z(0.1)

$sc_track_play_sample2 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
_ := $sc_track_play_sample2.play_sample("cymbals-crash+bow2.aif", 0, 1) // sample, volume in dB; loop
	_ := $sc_track_play_sample2.ambi_x(-0.33)
	_ := $sc_track_play_sample2.ambi_y(0.3)
	_ := $sc_track_play_sample2.ambi_z(0.1)

$sc_track_play_sample3 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
_ := $sc_track_play_sample3.play_sample("harm-trem-C5-c4-1.aif", 0, 1) // sample, volume in dB; loop
	_ := $sc_track_play_sample3.ambi_x(-0.33)
	_ := $sc_track_play_sample3.ambi_y(-0.3)
	_ := $sc_track_play_sample3.ambi_z(0.1)
	_ := $sc_track_play_sample3.amp(10)
	_ := $sc_track_play_sample3.play_sample_stop("cymbals-crash+bow2.aif", 1) // sample, volume in dB; loop


$sc_track_play_sample4 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
_ := $sc_track_play_sample4.play_sample("chinese-cymbal+bow-Bueno.aif", 0, 1) // sample, volume in dB; loop
	_ := $sc_track_play_sample4.ambi_x(0.33)
	_ := $sc_track_play_sample4.ambi_y(-0.3)
	_ := $sc_track_play_sample4.ambi_z(0.1)

_ :=$sc_track_play_sample1.pause(1)
_ :=$sc_track_play_sample2.pause(1)
_ :=$sc_track_play_sample3.pause(1)
_ :=$sc_track_play_sample4.pause(1)

_ :=$sc_track_play_sample1.resume(1)
_ :=$sc_track_play_sample2.resume(1)
_ :=$sc_track_play_sample3.resume(1)
_ :=$sc_track_play_sample4.resume(1)

_ :=$sc_track_play_sample1.off_track(1)
_ :=$sc_track_play_sample2.off_track(1)
_ :=$sc_track_play_sample3.off_track(1)
_ :=$sc_track_play_sample4.off_track(1)

_ := $sc_hoa_group1.HOABeamDirac2Hoa()
_ := $sc_hoa_group1.HOABeamDirac2Hoa_off(1)

oscrecv ambi_rotate 6673 * $hoa_filter

group oscrecv_hoa_filter // pour HOABeamDirac2Hoa
{
	whenever ($hoa_filter)
	{
		// print (""+$hoa_filter)

		switch ($hoa_filter[0])
		{
	      	case "/hoa_filter/filter_az":
	      	_ := $sc_hoa_group1.HOABeamDirac_az($hoa_filter[1])
	      	print az ($hoa_filter[1])
	      	case "/hoa_filter/filter_ele":
	      	_ := $sc_hoa_group1.HOABeamDirac_ele($hoa_filter[1])
	      	print ele ($hoa_filter[1])

		}
	}
}

print @poltocar(0.4, 122.4)

NOTE 60 1 test_HOA_play_samples_filters2

$sc_hoa_group1 := obj::mix_group_HOA("group_hoa1", "localhost", "studio1", 3)

$sc_track_play_sample00 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample01 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample02 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample03 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample04 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample05 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample06 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample07 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample08 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample09 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample10 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample11 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample12 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample13 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample14 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample15 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample16 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample17 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample18 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample19 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample20 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample21 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample22 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")
$sc_track_play_sample23 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")

_ := $sc_track_play_sample00.ambi_xyz([0.9962, -0.001118, -0.087])
_ := $sc_track_play_sample01.ambi_xyz([0.763818, -0.639443, -0.0872])
_ := $sc_track_play_sample02.ambi_xyz([0.174101, -0.980906, -0.0872])
_ := $sc_track_play_sample03.ambi_xyz([-0.497132, -0.863259, -0.0872])
_ := $sc_track_play_sample04.ambi_xyz([-0.935717, -0.34175, -0.0872])
_ := $sc_track_play_sample05.ambi_xyz([-0.936482, 0.33965, -0.0872])
_ := $sc_track_play_sample06.ambi_xyz([-0.499068, 0.862141, -0.0872])
_ := $sc_track_play_sample07.ambi_xyz([0.171899, 0.981294, -0.0872])
_ := $sc_track_play_sample08.ambi_xyz([0.762382, 0.641156, -0.0872])
_ := $sc_track_play_sample09.ambi_xyz([0.844945, -0.306452, 0.4384])
_ := $sc_track_play_sample10.ambi_xyz([0.450273, -0.777895, 0.4384])
_ := $sc_track_play_sample11.ambi_xyz([-0.155107, -0.885275, 0.4384])
_ := $sc_track_play_sample12.ambi_xyz([-0.687852, -0.578472, 0.4384])
_ := $sc_track_play_sample13.ambi_xyz([-0.8988, 0.001008, 0.4384])
_ := $sc_track_play_sample14.ambi_xyz([-0.689148, 0.576927, 0.4384])
_ := $sc_track_play_sample15.ambi_xyz([-0.157093, 0.884925, 0.4384])
_ := $sc_track_play_sample16.ambi_xyz([0.448526, 0.778904, 0.4384])
_ := $sc_track_play_sample17.ambi_xyz([0.844255, 0.308348, 0.4384])
_ := $sc_track_play_sample18.ambi_xyz([0.5446, -0.000611, 0.8387])
_ := $sc_track_play_sample19.ambi_xyz([0.168881, -0.517811, 0.8387])
_ := $sc_track_play_sample20.ambi_xyz([-0.440241, -0.320594, 0.8387])
_ := $sc_track_play_sample21.ambi_xyz([-0.440959, 0.319606, 0.8387])
_ := $sc_track_play_sample22.ambi_xyz([0.167719, 0.518189, 0.8387])
_ := $sc_track_play_sample23.ambi_xyz([0.0, 0.0, 1.])

	_ := $sc_track_play_sample00.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample01.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample02.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample03.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample04.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample05.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample06.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample07.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample08.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample09.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample10.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample11.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample12.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample13.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample14.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample15.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample16.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample17.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample18.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample19.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample20.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample21.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample22.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)
	_ := $sc_track_play_sample23.play_sample($SF_folder("grattage_unghie_p0").choose(), 0, 1)

_ := $sc_track_play_sample00.off_track(1)
_ := $sc_track_play_sample01.off_track(1)
_ := $sc_track_play_sample02.off_track(1)
_ := $sc_track_play_sample03.off_track(1)
_ := $sc_track_play_sample04.off_track(1)
_ := $sc_track_play_sample05.off_track(1)
_ := $sc_track_play_sample06.off_track(1)
_ := $sc_track_play_sample07.off_track(1)
_ := $sc_track_play_sample08.off_track(1)
_ := $sc_track_play_sample09.off_track(1)
_ := $sc_track_play_sample10.off_track(1)
_ := $sc_track_play_sample11.off_track(1)
_ := $sc_track_play_sample12.off_track(1)
_ := $sc_track_play_sample13.off_track(1)
_ := $sc_track_play_sample14.off_track(1)
_ := $sc_track_play_sample15.off_track(1)
_ := $sc_track_play_sample16.off_track(1)
_ := $sc_track_play_sample17.off_track(1)
_ := $sc_track_play_sample18.off_track(1)
_ := $sc_track_play_sample19.off_track(1)
_ := $sc_track_play_sample20.off_track(1)
_ := $sc_track_play_sample21.off_track(1)
_ := $sc_track_play_sample22.off_track(1)
_ := $sc_track_play_sample23.off_track(1)

_ := $sc_hoa_group1.HOABeamDirac2Hoa()

oscrecv ambi_rotate 6673 * $hoa_filter

group oscrecv_hoa_filter // pour HOABeamDirac2Hoa
{
	@local $radio := 1, $theta := 0, $phi := 0

	whenever ($hoa_filter)
	{
		// print (""+$hoa_filter)
		$poltocar := @poltocar3D($radio , $theta, $phi)

		switch ($hoa_filter[0])
		{
	      	case "/hoa_filter/filter_az":
	      	_ := $sc_hoa_group1.HOABeamDirac_az($hoa_filter[1])
	      	print az ($hoa_filter[1])
	      	$phi := $hoa_filter[1]
	      	case "/hoa_filter/filter_ele":
	      	_ := $sc_hoa_group1.HOABeamDirac_ele($hoa_filter[1])
	      	print ele ($hoa_filter[1])
	      	$theta := $hoa_filter[1]

		}
		// OF
		ambiX ($poltocar[0])
		ambiY ($poltocar[1])
		ambiZ ($poltocar[2])

	}
}

NOTE 60 1 speakers_view

	oscsend speakers_pos "localhost" : 12345 "/speakers_pos"

	$spkrPos := [
		[0.001118, 0.9962, -0.0872],
		[0.639443, 0.763818, -0.0872],
		[0.980906, 0.174101, -0.0872],
		[0.863259, -0.497132, -0.0872],
		[0.34175, -0.935717, -0.0872],
		[-0.33965, -0.936482, -0.0872],
		[-0.862141, -0.499068, -0.0872],
		[-0.981294, 0.171899, -0.0872],
		[-0.641156, 0.762382, -0.0872],
		[0.306452, 0.844945, 0.4384],
		[0.777895, 0.450273, 0.4384],
		[0.885275, -0.155107, 0.4384],
		[0.578472, -0.687852, 0.4384],
		[-0.001008, -0.8988, 0.4384],
		[-0.576927, -0.689148, 0.4384],
		[-0.884925, -0.157093, 0.4384],
		[-0.778904, 0.448526, 0.4384],
		[-0.308348, 0.844255, 0.4384],
		[0.000611, 0.5446, 0.8387],
		[0.517811, 0.168881, 0.8387],
		[0.320594, -0.440241, 0.8387],
		[-0.319606, -0.440959, 0.8387],
		[-0.518189, 0.167719, 0.8387],
		[0.0, 0.0, 1.0]
	]
										
	$spkrPos := $spkrPos.flatten()

	speakers_pos $spkrPos	

	$t := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

		$test_delace := [ $t[$i] | $i in @size($t) : 2] 
	print (""+$test_delace)

NOTE 60 1 test_multi_level_oFx

print (""+[ 20  | $x in 10 ])

master_meter_out ([ 0  | $x in 24 ])

NOTE 60 1 play_HOAEncEigenMike

$sc_hoa_group_EigenMike := obj::mix_group_HOA("group_hoa_EigenMike", "localhost", "studio1", 3)

::Play_HOAEncEigenMike("eigen_ACN_N3D_Montreal_LePlateau_Backyard_short.wav", 0, "group_hoa_EigenMike", 1) 


NOTE 60 1 play_static_pos_HOA


$sc_hoa_group1 := obj::mix_group_HOA("group_hoa1", "localhost", "octo", 3)

$sc_track_play_sample1 := obj::crea_track_HOA(0, 1, 0, [], "group_hoa1")

_ := $sc_track_play_sample1.play_sample_gesture_pos_trig(["MipercNoise3.aif", "PMRand3-217.aif"])

	_ := $sc_track_play_sample1.play_sample("flexatone-large+bow.aif", 0, 1) // sample, volume in dB; loop
	_ := $sc_track_play_sample1.play_sample_stop("flexatone-large+bow.aif", 1) // sample, volume in dB; loop
		
NOTE 60 1 VST_plugins

$Servers("server1").notify(1)
/// list all vst in Max console
::list_vst()

// $Servers("localhost").cmd(["/vst_search", 15, "/Users/fernandez/Library/Application Support/SuperCollider/tmp/vst_all"])
obj::crea_track_HOA("vst_test1", "group_hoa1", amp = 0, doppler = 0, in_channels = "stereo", "MultiEQ")
obj::crea_track_HOA("vst_test1", "group_hoa1", amp = 0, doppler = 0, in_channels = "stereo", ["Massive X"])
obj::crea_track_HOA("vst_test2", "group_hoa1", amp = 0, doppler = 0, in_channels = "stereo", ["MultiEQ"])

$tracks("vst_test1").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])
$tracks("vst_test2").ambi_xyz([@rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5), @rand_range(-0.5, 0.5)])


$tracks("vst_test1").free(2)
$tracks("vst_test1").mod_add(["TestSynth3", "freq",32, "amp", -3], "before", "MultiEQ")
$tracks("vst_test1").mod_add(["TDust", "freq", 10, "amp", 10], "before", "MultiEQ")

$tracks("vst_test2").mod_add(["TestSynth3"], "before", "MultiEQ")
$tracks("vst_test2").mod_add(["TDust", "freq", 10, "amp", 10], "before", "MultiEQ")

$tracks("vst_test1").mod_add("Pitchproof", "after", "TestSynth3")

$tracks("vst_test1").vst_gui("MultiEQ", 1) // open vst editor
$tracks("vst_test1").vst_gui("MultiEQ", 0) // close vst editor

print (""+$synths_map("localhost")("group_hoa1")("vst_test1"))

$tracks("vst_test1").mod_remove("MultiEQ", 3)
$tracks("vst_test1").mod_add("MultiEQ", "after", "TDust")


$tracks("vst_test1").vst_gui("Massive X", 1) // open vst editor
$tracks("vst_test1").vst_gui("Massive X", 0) // close vst editor

$tracks("vst_test2").vst_gui("MultiEQ", 1) // open vst editor
$tracks("vst_test2").vst_gui("MultiEQ", 0) // close vst editor

$tracks("vst_test1").vst_gui("Pitchproof", 1) // open vst editor
$tracks("vst_test1").vst_gui("Pitchproof", 0) // close vst editor

$tracks("vst_test1").set("MultiEQ", ["Filter Frequency 2", 200, "Filter Gain 2", 15, "Filter Q 2", 8, "Filter Frequency 3", 300, "Filter Gain 3", 15, "Filter Q 3", 8, "Filter Frequency 4", 500, "Filter Gain 4", 15, "Filter Q 4", 8, "Filter Frequency 5", 800, "Filter Gain 5", 15, "Filter Q 5", 8]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$tracks("vst_test1").set(["VST", "Pitchproof"], [1, 0.9]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$tracks("vst_test1").set("TestSynth3", ["freq",32, "amp", -3])
$tracks("vst_test1").set("TDust", ["freq",10, "amp", 0])

$tracks("vst_test2").set("TestSynth3", ["freq",30, "amp", -3])
$tracks("vst_test2").set("TDust", ["freq",10, "amp", 0])


print (""+$vst_all_map("a7Monitor.vst3")("parameters"))
// print: MAP{ ("Filter Enablement 1", 1), ("Filter Enablement 2", 6), ("Filter Enablement 3", 11), ("Filter Enablement 4", 16), ("Filter Enablement 5", 21), ("Filter Enablement 6", 26), ("Filter Frequency 1", 3), ("Filter Frequency 2", 8), ("Filter Frequency 3", 13), ("Filter Frequency 4", 18), ("Filter Frequency 5", 23), ("Filter Frequency 6", 28), ("Filter Gain 1", 5), ("Filter Gain 2", 10), ("Filter Gain 3", 15), ("Filter Gain 4", 20), ("Filter Gain 5", 25), ("Filter Gain 6", 30), ("Filter Q 1", 4), ("Filter Q 2", 9), ("Filter Q 3", 14), ("Filter Q 4", 19), ("Filter Q 5", 24), ("Filter Q 6", 29), ("Filter Type 1", 2), ("Filter Type 2", 7), ("Filter Type 3", 12), ("Filter Type 4", 17), ("Filter Type 5", 22), ("Filter Type 6", 27), ("Number of input channels", 0) }


$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Frequency 2", 30, 3000, 200, "linear", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Frequency 3", 30, 3000, 100, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Frequency 4", 30, 3000, 100, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Frequency 5", 30, 3000, 100, "linear", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Gain 2", 0, 15, 0, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Gain 3", 0, 15, 0, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Gain 4", 0, 15, 0, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Gain 5", 0, 15, 0, "exp_out", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Q 2", 1, 8, 1, "linear", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Q 3", 1, 8, 1, "linear", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Q 4", 1, 8, 1, "linear", 100)
$tracks("vst_test1").rand_lfo("MultiEQ", "Filter Q 5", 1, 8, 1, "linear", 100)

$tracks("vst_test2").set(["VST", "MultiEQ"], ["Filter Frequency 2", 200, "Filter Gain 2", 15, "Filter Q 2", 8, "Filter Frequency 3", 300, "Filter Gain 3", 15, "Filter Q 3", 8, "Filter Frequency 4", 500, "Filter Gain 4", 15, "Filter Q 4", 8, "Filter Frequency 5", 800, "Filter Gain 5", 15, "Filter Q 5", 8]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$tracks("vst_test2").rand_lfo(["VST", "MultiEQ"], "Filter Frequency 2", 30, 3000, 200, "linear", 100)
$tracks("vst_test2").rand_lfo(["VST", "MultiEQ"], "Filter Frequency 3", 30, 3000, 100, "exp_out", 100)
$tracks("vst_test2").rand_lfo(["VST", "MultiEQ"], "Filter Frequency 4", 30, 3000, 100, "exp_out", 100)
$tracks("vst_test2").rand_lfo(["VST", "MultiEQ"], "Filter Frequency 5", 30, 3000, 100, "linear", 100)


$tracks("vst_test1").set("MultiEQ", ["bypass", 0]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

$tracks("vst_test1").rand_lfo(["VST", "Pitchproof"], 2, -1, 1, 0, "linear", 100)

print free_vst con fade
print stop lfo_s 
print otros_lfo

// $Servers("localhost").u_cmd([116, 6, "/open", "MultiEQ", 1])
// $Servers("localhost").u_cmd([114, 6, "/open", "Pitchproof", 1])

// $Servers("localhost").u_cmd([104, 6, "/vis", 1])
// $Servers("localhost").u_cmd([110, 6, "/vis", 1])
// $Servers("localhost").u_cmd([110, 6, "/param_query", 0, 16])
// $Servers("localhost").u_cmd([110, 6, "/param_query", 16, 16])
// $Servers("localhost").cmd(["/vst_probe", "/Users/fernandez/Library/Audio/Plug-Ins/VST/IEM/MultiEQ.vst", "/Users/fernandez/Library/Application Support/SuperCollider/tmp/MultiEQ"])
// $Servers("localhost").cmd(["/vst_probe", "/Users/fernandez/Library/Audio/Plug-Ins/VST/IEM/DirectionalCompressor.vst", "/Users/fernandez/Library/Application Support/SuperCollider/tmp/DirectionalCompressor"])


// [ "/u_cmd", 1001, 2, "/open", "DualDelay", 0 ]
$Servers("localhost").g_dumpTree(0, 1)

$groups("group_hoa1").vst_decoder_gui(1)

$tracks("vst_test1").master_vst("FdnReverb")
$tracks("vst_test1").vst_gui("FdnReverb", 1) // open vst editor
$tracks("vst_test1").vst_gui("FdnReverb", 0) // close vst editor
$tracks("vst_test1").set("FdnReverb", ["bypass", 1]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

$tracks("vst_test1").master_vst("DirectivityShaper", "before", "FdnReverb")
$tracks("vst_test1").vst_gui("DirectivityShaper", 1) // open vst editor

$tracks("vst_test1").master_vst("EnergyVisualizer", "after", "FdnReverb")
$tracks("vst_test1").vst_gui("EnergyVisualizer", 1) // open vst editor
$tracks("vst_test1").vst_gui("EnergyVisualizer", 0) // close vst editor
$tracks("vst_test1").mod_remove("EnergyVisualizer", 5) 

print (""+$vst_all_map("FdnReverb")("parameters"))
// print: MAP{ ("Highs Cutoff Frequency", 5), ("Highs Gain", 7), ("Highs Q Factor", 6), ("Lows Cutoff Frequency", 2), ("Lows Gain", 4), ("Lows Q Factor", 3), ("Reverberation Time", 1), ("Room Size", 0), ("Wet", 8), ("in Time", 9) }

// print: MAP{ ("Highs Cutoff Frequency", 5), ("Highs Gain", 7), ("Highs Q Factor", 6), ("Lows Cutoff Frequency", 2), ("Lows Gain", 4), ("Lows Q Factor", 3), ("Reverberation Time", 1), ("Room Size", 0), ("Wet", 8), ("in Time", 9) }

$tracks("vst_test1").set("FdnReverb", ["Room Size", 5]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)

$tracks("vst_test2").master_vst("DirectivityShaper")
$tracks("vst_test2").vst_gui("DirectivityShaper", 1) // open vst editor




   // @extra_functions4_compileddef master_vst($module, $action = "after_out", $target_mod = <undef>, $fade_in = 0.01)

// Add Mix group Master VST
$groups("group_hoa1").mod_add(["FdnReverb"])
$groups("group_hoa1").mod_remove("FdnReverb", 1)
$groups("group_hoa1").vst_gui("FdnReverb", 1)
$groups("group_hoa1").set("FdnReverb", ["bypass", 1]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$groups("group_hoa1").set("FdnReverb", ["Room Size", 5, "Reverberation Time", 5]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$groups("group_hoa1").rand_lfo("FdnReverb", "Reverberation Time", 0.2, 9, 0, "linear", 200)

$groups("group_hoa1").lfo_abort("FdnReverb", "Reverberation Time")
	
$groups("group_hoa1").mod_add(["MultiBandCompressor"], "after", "FdnReverb")
$groups("group_hoa1").vst_gui("MultiBandCompressor", 1)
$groups("group_hoa1").set(["VST", "MultiBandCompressor"], ["bypass", 0]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
	
$groups("group_hoa1").mod_add(["VST", "DualDelay"])
$groups("group_hoa1").vst_gui("DualDelay", 1)
$groups("group_hoa1").set(["VST", "DualDelay"], ["bypass", 1]) //@scale_compiled(1000, 20, 20000, 0, 1, 0.4)
$groups("group_hoa1").amp(-120)

$groups("group_hoa1").mod_add(["VST", "MultiEQ"], "before", "MultiBandCompressor")
$groups("group_hoa1").vst_gui("MultiEQ", 1)

print (""+$vst_plugins("localhost")("group_hoa1")) //("group_hoa1"))
// print (""+$synths_map("localhost")("group_hoa1")) //("group_hoa1"))
print (""+$vst_all_map)
// if($vst_all_map.is_defined(vst))
print (""+$vst_all_map.is_defined("DualDely")) //("parameters").is_defined($params[$loop_index]))
// hacer replace delete mod_add ->"after" "etc" 
$groups("group_hoa1").free(5)	

// NOTE 60 1 PM_Solveur

// //PM Solveur équations

// // obj::mix_group_HOA("group_foa", "server1", "iem_binaural", 1)
// // $groups("group_foa").vst_decoder_gui(1)
// // obj::mix_group("PM_Solveur", "server1") // audio group					
// // $Servers("server1").g_dumpTree(0, 1)
// @macro_def @L { 7 } //20

// $L := @L
// $N := $L * $L
// $S := 2 * $N
// @macro_def @S { (2 * @L * @L) }

// $m_coords := [ [[($i*0.1)-1, ($j*0.1)-1, 0] | $i in $L ] | $j in $L]
// $m_coords_visual := $m_coords.flatten()
// // print (""+$m_coords)

// // number of freqs/synth
// $n_freqs := $N

// // frequence de base
// $baseFreq := 30



// 	// print (""+$groups("group_hoa1"))
// 	$mix_group_solver := "group_hoa1"
// 	$hoa_bus := $groups($mix_group_solver).$hoa_bus
// 	$hoa_order := $groups($mix_group_solver).$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa3" dans la variable $hoa_bus
// // $synths := [ [ ["Form", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "pan", ($j+1)-($L*0.5)/$L] | $i in $L ] | $j in $L ] // contruction de la grille de links

// 	$synths := [ [ ["Form_lag_HOA_"+$hoa_order, "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $hoa_bus, "x", $m_coords[$i][$i], "y", $m_coords[$j][$j], "z", $m_coords[$i][$j]] | $i in $L ] | $j in $L ] // contruction de la grille de links

// 	obj::crea_track_HOA("PM_Solveur_track", $mix_group_solver, fade_in = 1, amp = 0, $synths.flatten(1), encoder = false)
// // obj::crea_track("PM_Solveur_track", "PM_Solveur", $synths.flatten(1))
// // obj::crea_track("track2", "group1", fade_in = 5, amp = -10, [["TestSynth3", "freq", 222, "amp", 1]])


// // print (""+$m_coords)

// @fun_def evolve($t, $y, $ydot)
// {
//     @local $p := 0
    
//     Loop
//     {
//        @local $i := ($p / $L)
//        @local $j := ($p % $L)

//        @evolve_aux(($i == 0),
//                    ($j == $L - 1),
//                    ($i == $L - 1),
//                    ($j == 0),
//                    $y,
//                    $ydot,
//                    $p,
//                    $i,
//                    $j)
       
//        $p += 1
//     } during[$N #]

//     return 0;
// }


// $D := 0.
// $k := 1.0

// whenever ($D == $D || $k == $k)
// {
//      print "$D = " $D
//      print "$k = " $k
// }

// @fun_def evolve_aux($cn, $ce, $cs, $cw, $y, $ydot, $p, $ip, $jp)
// {
//      @local $pv := $p + $N

//      @local $pn := ($ip - 1) * $L + $jp
//      @local $pe := $ip * $L + ($jp + 1)
//      @local $ps := ($ip + 1) * $L + $jp
//      @local $pw := $ip * $L + ($jp - 1)

//      @local $xn := ($cn ? $y[$p] : ($y[$p] - $y[$pn]))
//      @local $ln := @sqrt(1 + $xn*$xn)
//      @local $thetan := @atan($xn)
//      @local $fn := $ln * @sin($thetan)

//      @local $xe := ($ce ? $y[$p] : ($y[$p] - $y[$pe]))
//      @local $le := @sqrt(1 + $xe*$xe)
//      @local $thetae := @atan($xe)
//      @local $fe := $le * @sin($thetae)

//      @local $xs := ($cs ? $y[$p] : ($y[$p] - $y[$ps]))
//      @local $ls := @sqrt(1 + $xs*$xs)
//      @local $thetas := @atan($xs)
//      @local $fs := $ls * @sin($thetas)

//      @local $xw := ($cw ? $y[$p] : ($y[$p] - $y[$pw]))
//      @local $lw := @sqrt(1 + $xw*$xw)
//      @local $thetaw := @atan($xw)
//      @local $fw := $lw * @sin($thetaw)


//      @local $d := $D * $y[$pv]

//      @local $f := $fn + $fe + $fs + $fw + $d


//      $ydot[$pv] := - $k * $f
//      $ydot[$p] := $y[$pv]

//      return 0
// }




// $cpt := 0
// $p := 0

// $f1 := 0

//     $y0 := [ 0. | ($S) ]
//     // $p := $N / 2
//     $y0[$p] := $f1

// whenever ($f1 == $f1)
// {
//     // @local $my_curve
//     // $y0[10] := $f1
//     // print $f1
//     // $y0 := [ 0. | ($S) ]
//     // $p := $N / 2
//     $y0[$p] := $f1

//     // $y0[$p] := 2

// abort my_curve


// // $d0 := @host_date()
// Curve my_curve
// @grain 0.05 //(1./25.) 0.05
// @action {


//     @local $count := 0
//     Loop 0. {
// 	   	$m_coords_visual[$count*3 + 2] := $y[$count]
//         // $tracks("PM_Solveur_track").set_single("Form", $count, ["mul", ($y[$count]), "bpf", ($y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02))]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))
// 	    $tracks("PM_Solveur_track").set_single("Form_lag_HOA_"+$hoa_order, $count, ["mul", $y[$count], "bpf", $y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02), "z", $y[$count]]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))
// 	    // print test_solver (""+$y[$count])
//       $count += 1
//     } during [$N #]

//     of_list3D $m_coords_visual
// }
// {
//     $y' = @evolve[$NOW, $y]
//     $y = $y0

//     dim = @S
//     order = 8
//     ; tolR = 1.e-8
//     ; tolA = 1.e-8
//     ; lapack = true
    
//     signatures = MAP {
//        @evolve_aux -> [ ["bool", "bool", "bool", "bool",
//                          ["double"], ["double"],
//                          "int", "int", "int" ],
//                         "int"],
//        "$D" -> "float",
//        "$N" -> "int",
//        "$L" -> "int",
//        "$S" -> "int",
//        "$k" -> "float",
//     }

//     whenever $y[$N / 2] =>= 0. { $cpt += 1 }
// }



// }


// 	// recever OSC from openFrameworks
// 	// oscrecv PM_solveur 6666 * $from_of_gui

// 	group oscrecv_ofx
// 	{
// 		@local $base_freqs_of

// 			whenever ($from_of_gui==$from_of_gui)
// 			{
// 				// print (""+$from_of_gui)

// 				switch ($from_of_gui[0])
// 				{
// 			      	case "/parameters/PM_solveur/damping":
// 			      	$D := $from_of_gui[1]
// 			      	case "/parameters/PM_solveur/k":
// 			      	$k := $from_of_gui[1]
// 			      	case "/parameters/PM_solveur/mass_pos":
// 			      	$p := $from_of_gui[1]			      	
// 					case "/parameters/PM_solveur/force":
// 					$f1 := $from_of_gui[1]
// 					case "/parameters/PM_solveur/volume":
// 					$groups("PM_Solveur").amp($from_of_gui[1]) // controle le group en entier					
// 					case "/parameters/PM_solveur/freq":
// 					$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $L ] | $j in $L] // construction grille inner_mass freqs
// 					$base_freqs_of := $base_freqs_of.flatten(1)

// 					@local $count := 0
// 				    Loop 0. {

// 				    	$tracks("PM_Solveur_track").set_single("Form", $count, $base_freqs_of[$count])
// 				      	$count += 1

// 				    } during [$N #]

// 				}
// 			}
// 	}

// NOTE 60 1 Stop_PM_Solveur

// abort my_curve
// $groups("PM_Solveur").free(1)




// NOTE 60 1 PM_SolveurHOA_Multiserver

// //PM Solveur équations

// obj::mix_group_HOA("group_foa", "server1", "iem_binaural", 1)
// // $groups("group_foa").vst_decoder_gui(1)
// // obj::mix_group("PM_Solveur", "server1") // audio group					
// // $Servers("server1").g_dumpTree(0, 1)
// @macro_def @L { 10 } //20

// $L := @L
// $N := $L * $L
// $S := 2 * $N
// @macro_def @S { (2 * @L * @L) }

// $m_coords := [ [[($i*0.1)-1, ($j*0.1)-1, 0] | $i in $L ] | $j in $L]
// $m_coords_visual := $m_coords.flatten()
// // print (""+$m_coords)

// // number of freqs/synth
// $n_freqs := $N

// // frequence de base
// $baseFreq := 30



// 	// print (""+$groups("group_hoa1"))
// 	$mix_group_solver := "group_foa"
// 	$hoa_bus := $groups($mix_group_solver).$hoa_bus
// 	$hoa_order := $groups($mix_group_solver).$order // //recupère l'ordre hoa du mix_group_HOA "group_hoa3" dans la variable $hoa_bus
// // $synths := [ [ ["Form", "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "pan", ($j+1)-($L*0.5)/$L] | $i in $L ] | $j in $L ] // contruction de la grille de links

// 	$synths := [ [ ["Form_lag_HOA_"+$hoa_order, "freq", ($i+7)*$baseFreq+($j*0.1), "mul", 1, "aamp", 1/$n_freqs, "globTBus", $hoa_bus, "x", $m_coords[$i][$i], "y", $m_coords[$j][$j], "z", $m_coords[$i][$j]] | $i in $L ] | $j in $L ] // contruction de la grille de links

// 	obj::crea_track_HOA("PM_Solveur_track", $mix_group_solver, fade_in = 1, amp = 0, $synths.flatten(1), encoder = false)
// // obj::crea_track("PM_Solveur_track", "PM_Solveur", $synths.flatten(1))
// // obj::crea_track("track2", "group1", fade_in = 5, amp = -10, [["TestSynth3", "freq", 222, "amp", 1]])


// // print (""+$m_coords)

// @fun_def evolve($t, $y, $ydot)
// {
//     @local $p := 0
    
//     Loop
//     {
//        @local $i := ($p / $L)
//        @local $j := ($p % $L)

//        @evolve_aux(($i == 0),
//                    ($j == $L - 1),
//                    ($i == $L - 1),
//                    ($j == 0),
//                    $y,
//                    $ydot,
//                    $p,
//                    $i,
//                    $j)
       
//        $p += 1
//     } during[$N #]

//     return 0;
// }


// $D := 0.
// $k := 1.0

// whenever ($D == $D || $k == $k)
// {
//      print "$D = " $D
//      print "$k = " $k
// }

// @fun_def evolve_aux($cn, $ce, $cs, $cw, $y, $ydot, $p, $ip, $jp)
// {
//      @local $pv := $p + $N

//      @local $pn := ($ip - 1) * $L + $jp
//      @local $pe := $ip * $L + ($jp + 1)
//      @local $ps := ($ip + 1) * $L + $jp
//      @local $pw := $ip * $L + ($jp - 1)

//      @local $xn := ($cn ? $y[$p] : ($y[$p] - $y[$pn]))
//      @local $ln := @sqrt(1 + $xn*$xn)
//      @local $thetan := @atan($xn)
//      @local $fn := $ln * @sin($thetan)

//      @local $xe := ($ce ? $y[$p] : ($y[$p] - $y[$pe]))
//      @local $le := @sqrt(1 + $xe*$xe)
//      @local $thetae := @atan($xe)
//      @local $fe := $le * @sin($thetae)

//      @local $xs := ($cs ? $y[$p] : ($y[$p] - $y[$ps]))
//      @local $ls := @sqrt(1 + $xs*$xs)
//      @local $thetas := @atan($xs)
//      @local $fs := $ls * @sin($thetas)

//      @local $xw := ($cw ? $y[$p] : ($y[$p] - $y[$pw]))
//      @local $lw := @sqrt(1 + $xw*$xw)
//      @local $thetaw := @atan($xw)
//      @local $fw := $lw * @sin($thetaw)


//      @local $d := $D * $y[$pv]

//      @local $f := $fn + $fe + $fs + $fw + $d


//      $ydot[$pv] := - $k * $f
//      $ydot[$p] := $y[$pv]

//      return 0
// }




// $cpt := 0
// $p := 0

// $f1 := 0

//     $y0 := [ 0. | ($S) ]
//     // $p := $N / 2
//     $y0[$p] := $f1

// whenever ($f1 == $f1)
// {
//     // @local $my_curve
//     // $y0[10] := $f1
//     // print $f1
//     // $y0 := [ 0. | ($S) ]
//     // $p := $N / 2
//     $y0[$p] := $f1

//     // $y0[$p] := 2

// abort my_curve


// // $d0 := @host_date()
// Curve my_curve
// @grain 0.05 //(1./25.) 0.05
// @action {


//     @local $count := 0
//     Loop 0. {
// 	   	$m_coords_visual[$count*3 + 2] := $y[$count]
//         // $tracks("PM_Solveur_track").set_single("Form", $count, ["mul", ($y[$count]), "bpf", ($y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02))]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))
// 	    $tracks("PM_Solveur_track").set_single("Form_lag_HOA_"+$hoa_order, $count, ["mul", $y[$count], "bpf", $y[$count].scale_compiled(-1.3, 1.3, 50, 800, 1.02), "z", $y[$count]]) // , "pan", ($y[$count].scale_compiled(0, $L, -1, 1, 1))
// 	    // print test_solver (""+$y[$count])
//       $count += 1
//     } during [$N #]

//     of_list3D $m_coords_visual
// }
// {
//     $y' = @evolve[$NOW, $y]
//     $y = $y0

//     dim = @S
//     order = 8
//     ; tolR = 1.e-8
//     ; tolA = 1.e-8
//     ; lapack = true
    
//     signatures = MAP {
//        @evolve_aux -> [ ["bool", "bool", "bool", "bool",
//                          ["double"], ["double"],
//                          "int", "int", "int" ],
//                         "int"],
//        "$D" -> "float",
//        "$N" -> "int",
//        "$L" -> "int",
//        "$S" -> "int",
//        "$k" -> "float",
//     }

//     whenever $y[$N / 2] =>= 0. { $cpt += 1 }
// }



// }


// 	// recever OSC from openFrameworks
// 	// oscrecv PM_solveur 6666 * $from_of_gui

// 	group oscrecv_ofx
// 	{
// 		@local $base_freqs_of

// 			whenever ($from_of_gui==$from_of_gui)
// 			{
// 				// print (""+$from_of_gui)

// 				switch ($from_of_gui[0])
// 				{
// 			      	case "/parameters/PM_solveur/damping":
// 			      	$D := $from_of_gui[1]
// 			      	case "/parameters/PM_solveur/k":
// 			      	$k := $from_of_gui[1]
// 			      	case "/parameters/PM_solveur/mass_pos":
// 			      	$p := $from_of_gui[1]			      	
// 					case "/parameters/PM_solveur/force":
// 					$f1 := $from_of_gui[1]
// 					case "/parameters/PM_solveur/volume":
// 					$groups("PM_Solveur").amp($from_of_gui[1]) // controle le group en entier					
// 					case "/parameters/PM_solveur/freq":
// 					$base_freqs_of := [ [["freq", ($i+7)*($from_of_gui[1]/7)+($j*0.1)] | $i in $L ] | $j in $L] // construction grille inner_mass freqs
// 					$base_freqs_of := $base_freqs_of.flatten(1)

// 					@local $count := 0
// 				    Loop 0. {

// 				    	$tracks("PM_Solveur_track").set_single("Form", $count, $base_freqs_of[$count])
// 				      	$count += 1

// 				    } during [$N #]

// 				}
// 			}
// 	}


// NOTE 60 1 Stop_PM_Solveur

// abort my_curve
// $groups("PM_Solveur").free(1)